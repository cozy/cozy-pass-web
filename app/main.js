!function(e){function t(t){for(var n,o,c=t[0],a=t[1],l=t[2],u=0,h=[];u<c.length;u++)o=c[u],Object.prototype.hasOwnProperty.call(s,o)&&s[o]&&h.push(s[o][0]),s[o]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(d&&d(t);h.length;)h.shift()();return r.push.apply(r,l||[]),i()}function i(){for(var e,t=0;t<r.length;t++){for(var i=r[t],n=!0,c=1;c<i.length;c++){var a=i[c];0!==s[a]&&(n=!1)}n&&(r.splice(t--,1),e=o(o.s=i[0]))}return e}var n={},s={0:0},r=[];function o(t){if(n[t])return n[t].exports;var i=n[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=n,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var c=window.webpackJsonp=window.webpackJsonp||[],a=c.push.bind(c);c.push=t,c=c.slice();for(var l=0;l<c.length;l++)t(c[l]);var d=a;r.push([1313,1]),i()}({107:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(20);class s{constructor(e){this.username=null,this.password=null,this.passwordRevisionDate=null,this.totp=null,this.uris=null,this.autofillOnPageLoad=null,e&&(this.passwordRevisionDate=e.passwordRevisionDate,this.autofillOnPageLoad=e.autofillOnPageLoad)}get uri(){return this.hasUris?this.uris[0].uri:null}get maskedPassword(){return null!=this.password?"••••••••":null}get subTitle(){return this.username}get canLaunch(){return this.hasUris&&this.uris.some(e=>e.canLaunch)}get hasTotp(){return!n.a.isNullOrWhitespace(this.totp)}get launchUri(){if(this.hasUris){const e=this.uris.find(e=>e.canLaunch);if(null!=e)return e.launchUri}return null}get hasUris(){return null!=this.uris&&this.uris.length>0}}},112:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e,t,i){super(e);let n=null;if(null!=e){const t=this.getResponseProperty("ErrorModel");n=t&&i?t:e}n?(this.message=this.getResponseProperty("Message",n),this.validationErrors=this.getResponseProperty("ValidationErrors",n)):429===t&&(this.message="Rate limit exceeded. Try again later."),this.statusCode=t}getSingleMessage(){if(null==this.validationErrors)return this.message;for(const e in this.validationErrors)if(this.validationErrors.hasOwnProperty(e)&&this.validationErrors[e].length)return this.validationErrors[e][0];return this.message}getAllMessages(){const e=[];if(null==this.validationErrors)return e;for(const t in this.validationErrors)this.validationErrors.hasOwnProperty(t)&&this.validationErrors[t].forEach(i=>{let n="";if(t.indexOf("[")>-1&&t.indexOf("]")>-1){const e=t.lastIndexOf(".");n=t.substr(0,e>-1?e:t.length)+": "}e.push(n+i)});return e}}},1150:function(e,t){},1238:function(e,t,i){var n={"./en.json":1239,"./fr.json":1240};function s(e){var t=r(e);return i(t)}function r(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}s.keys=function(){return Object.keys(n)},s.resolve=r,e.exports=s,s.id=1238},1239:function(e){e.exports=JSON.parse('{"Nav":{"presentation":"Presentation","security":"Security","installation":"Installation","import":"Import"},"PresentationStep":{"title":"Stop losing your passwords","description":"Keep your passwords safe in your Cozy","item1":"Your passwords will be saved once and for all in your 100% personal and secured safe.","item2":"Your cozy will allow you to instantly fill in the forms of websites, for easy connection to all your services.","item3":"You can connect your brands to your Cozy to recover your data in the blink of an eye.","cta":"Let\'s go!","notSupportedInfos":{"title":"Not available on %{browser}","description":"The feature is currently not available on %{browser}. You can however take advantage of it on the following browsers:"}},"SecurityStep":{"title":"Improve your Cozy password","description":"The password of your Cozy becomes the unique key to decrypt your securely stored passwords","advices":{"strong_passphrase":"**Privilege a strong password:** A long password with numbers and special characters will be impossible to break.","memorize":"**Memorize it well:** In case of loss, you will not be able to recover the encrypted passwords in your cozy.","our_tip":"**Our tip:** Find a short phrase that suits you, for example: "},"enhance-password":"Improve my password","keep-password":"Keep my current password","password-example":"Claude est le meilleur nuage français !"},"SecurityStepOIDC":{"title":"Choose your Cozy Pass password","title-configured":"Cozy Pass password configured","description":"Your Cozy Pass password becomes the unique key to decrypt your securely stored passwords","description-configured":"You configured your Cozy Pass password earlier, your passwords vault is ready.","next-step":"Next","passphrase":{"placeholder":"Cozy Pass Password","confirmationPlaceholder":"Confirm the password","error-setting-passphrase":"Could not set passphrase, please retry later"}},"HintStep":{"title":"Leave a password hint","description":"The hint will be sent to you by email in case you forgot your password, choose a hint that only you can understand","placeholder":"Hint (required)","submit":"Save the hint","skip":"Skip","error":"Error while updating hint","please-configure-hint":"Please configure a hint","hint-configured":"Hint configured ✅ You can still change it here."},"InstallationStep":{"title":"Install Cozy extension","descriptionStart":"Add the","descriptionEnd":"to your browser. This installation is necessary to allow you to automatically fill in and save your passwords while browsing.","cozyExtension":"Cozy extension","steps":{"choose-pass-password":"Choose Cozy Pass password","pass-password-chosen":"Cozy Pass password configured ✅","improve-password":"Improve password","leave-hint":"Leave hint","install-extension":"Install extension","install-app":"Install app"},"step1":{"chrome":"Click below to open the Chrome Web Store","edge-chromium":"Click below to open the Chrome Web Store","firefox":"Click below to open Firefox Add-ons","safari":"Click below to open the Mac App Store then click on **Get**"},"step2":{"chrome":"Then click on **Add to Chrome**","edge-chromium":"Then click on **Add to Chrome**. You may have to click on the **Allow extensions from other stores** button first.","firefox":"Then click on **Add to Firefox**","safari":"Then open Safari preferences to activate the extension (Preferences > Extensions)"},"step3":"Log in with your address **%{address}** and your password!","step3-oidc":"Log in with your address **%{address}** and your Cozy Pass password!","cta":"Install Cozy extension","skip":"Skip","login":"Open my passwords"},"InstallationStepMobile":{"title":"Install the Cozy Pass App","description":"Access your credentials on the go, and automatically fill forms on your mobile.","installApp":"Install the app"},"InstalledStep":{"title":"It\'s almost finished!","descriptionStart":"Click on the ","descriptionEnd":"icon on the top right corner of your screen to log in with your address **%{address}** and your Cozy password.","descriptionEnd-oidc":"icon on the top right corner of your screen to log in with your address **%{address}** and your Cozy Pass password."},"ConnectedStep":{"title":"Your password manager is configured!","description":"Go to your Cozy browser extension to manage your passwords"},"Help":{"faq":"<a href=\'https://help.cozy.io/article/405-how-to-configure-your-password-manager\' target=\'_blank\' rel=\'noopener noreferrer\'>__Help:__ I can\'t connect</a>","import":"Import my credentials from another manager"},"AvailablePlatforms":{"text":"Find the Cozy extension on the following platforms:","smartphone":"Smartphone","smartphone-soon":"Smartphone (available soon)"},"ImportPage":{"title":"Import your credentials","options":{"label":"1. Select the source format","placeholder":"Select a format"},"file":{"label":"2. Select the file to import"},"submit":"Import","modal":{"importing":{"title":"Importing your credentials"},"imported":{"title":"Credentials imported","content":"You can now find your credentials in your Cozy vault."},"errored":{"title":"Error while importing your credentials","content":"There was an error while importing your credentials. Please try again."},"close":"OK"}},"UpdateCozyPassPassword":"Update Cozy Pass password","manifest":{"short_description":"Stop losing your passwords","long_description":"Keep your passwords safe in your Cozy.\\n\\nYour passwords are saved once and for all in your 100% personal and secured safe.\\n\\nYour Cozy allows you to instantly fill in the forms of websites, for easy connection to all your services.\\n\\nConnect your brands to your Cozy to recover your data in the blink of an eye."},"Vault":{"extension":{"cta":{"chrome":"Install on Chrome","edge-chromium":"Install on Edge","firefox":"Install on Firefox","safari":"Install on Safari"}}},"ConfirmYourIdentityModal":{"title":"Verify your identity","instruction":"You cannot access this folder\'s ciphers yet. To finalize the sharing and access your shared ciphers, contact %{ownerName} via the means of communication of your choice (call, text message, instant messaging app...) and give them your security code:","instruction2":"Your security code will allow %{ownerName} to confirm your identity and then you will be able to access your shared ciphers.","confirm":"OK"}}')},1240:function(e){e.exports=JSON.parse('{"Nav":{"presentation":"Présentation","security":"Sécurité","installation":"Installation","import":"Import"},"PresentationStep":{"title":"Ne perdez plus vos mots de passe","description":"Conservez vos mots de passe en sécurité dans votre Cozy","item1":"Vos mots de passe seront enregistrés une bonne fois pour toute dans votre coffre 100% personnel et sécurisé.","item2":"Votre cozy vous permettra un remplissage instantané des formulaires des sites internet, pour une connexion facilitée à tous vos services.","item3":"Vous pourrez connecter vos marques à votre Cozy pour récupérer vos données en un clin d\'oeil.","cta":"C\'est parti !","notSupportedInfos":{"title":"Indisponible sur %{browser}","description":"La fonctionnalité n\'est actuellement pas proposée sur %{browser}. Vous pouvez toutefois en profiter sur les navigateurs suivants :"}},"SecurityStep":{"title":"Améliorer votre mot de passe Cozy","description":"Le mot de passe de votre Cozy devient l\'unique clé pour décoder vos mots de passe sauvegardés de manière sécurisée","advices":{"strong_passphrase":"**Privilégiez un mot de passe fort :** Un mot de passe long avec des chiffres et des caractères spéciaux sera impossible à casser.","memorize":"**Mémorisez-le bien :** En cas de perte, il vous sera impossible de récupérer les mots de passe chiffrés dans votre Cozy.","our_tip":"**Notre conseil :** Trouvez une phrase courte qui vous corresponde, par exemple : "},"enhance-password":"Améliorer mon mot de passe","keep-password":"Garder mon mot de passe actuel","password-example":"Claude is the best French cloud !"},"SecurityStepOIDC":{"title":"Choisissez votre mot de passe Cozy Pass","title-configured":"Votre mot de passe Cozy Pass est configuré","description":"Votre mot de passe Cozy Pass devient la clé unique pour décoder vos mots de passe sauvegardés de manière sécurisée.","description-configured":"Vous avez configuré votre mot de passe Cozy Pass, vous pouvez maintenant stocker vos mot de passe.","passphrase":{"placeholder":"Mot de passe Cozy Pass","confirmationPlaceholder":"Confirmez le mot de passe"},"next-step":"Suivant"},"HintStep":{"title":"Définir un indice de mot de passe","description":"L\'indice vous sera envoyé par email en cas d\'oubli de votre mot de passe, choisissez un indice que vous-seul pouvez comprendre","placeholder":"Indice (obligatoire)","submit":"Enregistrer l\'indice","skip":"Passer","error":"Erreur lors de la mise à jour de l\'indice","please-configure-hint":"Merci de configurer un indice","hint-configured":"Indice défini ✅ Vous pouvez toujours le changer ici."},"InstallationStep":{"title":"Installer l\'extension Cozy","descriptionStart":"Ajoutez","descriptionEnd":"à votre navigateur. Cette installation est nécessaire pour vous permettre de remplir et enregistrer automatiquement vos mots de passe lors de votre navigation.","cozyExtension":"l\'extension Cozy","step1":{"chrome":"Cliquez ci-dessous pour ouvrir le Chrome Web Store","edge-chromium":"Cliquez ci-dessous pour ouvrir le Chrome Web Store","firefox":"Cliquez ci-dessous pour ouvrir Firefox Add-ons","safari":"Cliquez ci-dessous pour ouvrir le Mac App Store puis cliquez sur **Obtenir**"},"step2":{"chrome":"Cliquez ensuite sur **Ajouter à Chrome**","edge-chromium":"Cliquez ensuite sur **Ajouter à Chrome**. Si nécessaire, cliquez sur le bouton **Autoriser les extensions provenant d\'autres magasins** au préalable.","firefox":"Cliquez ensuite sur **Ajouter à Firefox**","safari":"Ouvrez ensuite les préférences Safari pour activer l\'extension (Préférences > Extensions)"},"steps":{"choose-pass-password":"Choisir votre mot de passe Cozy Pass","improve-password":"Renforcer le mot de passe de votre Cozy","leave-hint":"Définir un indice","install-extension":"Installer l\'extension","install-app":"Installer l\'app"},"step3":"Connectez-vous avec votre adresse **%{address}** et votre mot de passe !","step3-oidc":"Connectez-vous avec votre adresse **%{address}** et votre mot de passe Cozy Pass !","cta":"Installer l\'extension Cozy","skip":"Passer","login":"Accéder à mes mots de passe"},"InstallationStepMobile":{"title":"Installer l\'application Cozy Pass","description":"Vous permet d\'accéder à mots de passe depuis votre mobile, et remplis vos mots de passe automatiquement dans les formulaires.","installApp":"Installer l\'application"},"InstalledStep":{"title":"C\'est presque fini !","descriptionStart":"Cliquez sur l\'icône","descriptionEnd":"en haut à droite de votre écran pour vous connecter à l\'aide de votre addresse **%{address}** et de votre mot de passe Cozy.","descriptionEnd-oidc":"en haut à droite de votre écran pour vous connecter à l\'aide de votre addresse **%{address}** et de votre mot de passe Cozy Pass."},"ConnectedStep":{"title":"Votre gestionnaire de mots de passe est configuré !","description":"Rendez vous sur votre extension navigateur Cozy pour gérer vos mots de passe"},"Help":{"faq":"<a href=\'https://support.cozy.io/article/394-comment-puis-je-parametrer-mon-gestionnaire-de-mot-de-passe\' target=\'_blank\' rel=\'noopener noreferrer\'>__Aide :__ Je ne parviens pas à me connecter</a>","import":"Importer mes identifiants à partir d\'un autre gestionnaire"},"AvailablePlatforms":{"text":"Retrouvez l\'extension Cozy sur les plateformes suivantes :","smartphone":"Smartphone","smartphone-soon":"Smartphone (disponible bientôt)"},"ImportPage":{"title":"Importez vos identifiants","options":{"label":"1. Sélectionnez le format source","placeholder":"Sélectionner un format"},"file":{"label":"2. Sélectionnez le fichier à importer"},"submit":"Importer","modal":{"importing":{"title":"Import de vos identifiants en cours"},"imported":{"title":"Vos identifiants ont été importés","content":"Vous pouvez maintenant trouver vos identifiants dans votre gestionnaire de mots de passe cozy."},"errored":{"title":"Erreur lors de l\'import de vos identifiants","content":"Une erreur est survenue lors de l\'import de vos identifiants. Veuillez réessayer."},"close":"OK"}},"UpdateCozyPassPassword":"Modifier le mot de passe Cozy Pass","manifest":{"short_description":"Ne perdez plus vos mots de passe","long_description":"Conservez vos mots de passe en sécurité dans votre Cozy.\\n\\nVos mots de passe sont enregistrés une bonne fois pour toute dans votre coffre 100% personnel et sécurisé.\\n\\nVotre Cozy vous permet un remplissage instantané des formulaires des sites Internet, pour une connexion facilitée à tous vos services.\\n\\nConnectez vos marques à votre Cozy pour récupérer vos données en un clin d\'oeil."},"Vault":{"extension":{"cta":{"chrome":"Installer sur Chrome","edge-chromium":"Installer sur Edge","firefox":"Installer sur Firefox","safari":"Installer sur Safari"}}},"ConfirmYourIdentityModal":{"title":"Vérification de votre identité","instruction":"Les mots de passe de ce dossier ne vous sont pas encore accessibles. Pour finaliser le partage et accéder aux mots de passe partagés, veuillez transmettre par le moyen de votre choix (Appel, SMS, messagerie instantanée, ...) votre code de sécurité à %{ownerName} :","instruction2":"Ce code de sécurité permettra à %{ownerName} de valider votre identité et ainsi d\'accéder aux éléments partagés.","confirm":"J\'ai compris"}}')},13:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},130:function(e,t,i){"use strict";i.d(t,"a",(function(){return u}));var n=i(15),s=i(383),r=i(384),o=i(385),c=i(386),a=i(387),l=i(389),d=i(390);class u{constructor(e,t,i){if(null!=e){switch(this.id=e.id,this.organizationId=e.organizationId,this.folderId=e.folderId,this.userId=t,this.edit=e.edit,this.viewPassword=e.viewPassword,this.organizationUseTotp=e.organizationUseTotp,this.favorite=e.favorite,this.revisionDate=e.revisionDate,this.type=e.type,this.name=e.name,this.notes=e.notes,this.collectionIds=null!=i?i:e.collectionIds,this.deletedDate=e.deletedDate,this.reprompt=e.reprompt,this.type){case n.a.Login:this.login=new a.a(e.login);break;case n.a.SecureNote:this.secureNote=new d.a(e.secureNote);break;case n.a.Card:this.card=new r.a(e.card);break;case n.a.Identity:this.identity=new c.a(e.identity)}null!=e.fields&&(this.fields=e.fields.map(e=>new o.a(e))),null!=e.attachments&&(this.attachments=e.attachments.map(e=>new s.a(e))),null!=e.passwordHistory&&(this.passwordHistory=e.passwordHistory.map(e=>new l.a(e)))}}}},1301:function(e,t){},1303:function(e,t){},1313:function(e,t,i){"use strict";i.r(t);var n=i(0),s=i(159),r=(i(917),i(102)),o=i(218),c=i(28),a=i(38),l=i(40),d=i.n(l),u=i(79),h=i.n(u),p=i(537),g=i.n(p);class f{}f.client=void 0,f.realtime=void 0;class y{constructor(){this.client=void 0}GetClient(){return this.InitClient(),f.client}GetRealtime(){return this.InitClient(),f.realtime}InitClient(){void 0===f.client&&(f.client=d.a.fromDOM(),f.client.registerPlugin(h.a.plugin,void 0),f.client.registerPlugin(p.RealtimePlugin,void 0),f.realtime=new g.a({client:f.client}))}}y.ɵfac=function(e){return new(e||y)},y.ɵprov=n.Yb({token:y,factory:y.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(y,[{type:n.A,args:[{providedIn:"root"}]}],null,null);var m=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class v{constructor(e){this.clientService=e,this.userFinishedInstallation=!1}IsVaultInstalled(){return m(this,void 0,void 0,(function*(){try{const e=this.clientService.GetClient(),t=yield e.stackClient.fetchJSON("GET","/data/io.cozy.settings/io.cozy.settings.bitwarden",[]);return!h()("passwords.force-vault-unconfigured")&&(t.extension_installed||this.userFinishedInstallation)}catch(e){return!1}}))}setIsInstalled(){this.userFinishedInstallation=!0}}v.ɵfac=function(e){return new(e||v)(n.lc(y))},v.ɵprov=n.Yb({token:v,factory:v.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(v,[{type:n.A,args:[{providedIn:"root"}]}],(function(){return[{type:y}]}),null);class b{constructor(e,t){this.vaultInstallationService=e,this.messagingService=t}canActivate(e,t){return m(this,void 0,void 0,(function*(){return!!(yield this.vaultInstallationService.IsVaultInstalled())||(this.messagingService.send("installBlocked"),!1)}))}}b.ɵfac=function(e){return new(e||b)(n.lc(v),n.lc(a.a))},b.ɵprov=n.Yb({token:b,factory:b.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(b,[{type:n.A,args:[{providedIn:"root"}]}],(function(){return[{type:v},{type:a.a}]}),null);class w{constructor(e,t){this.vaultInstallationService=e,this.messagingService=t}canActivate(e,t){return m(this,void 0,void 0,(function*(){return!(yield this.vaultInstallationService.IsVaultInstalled())||(this.messagingService.send("uninstallBlocked"),!1)}))}}w.ɵfac=function(e){return new(e||w)(n.lc(v),n.lc(a.a))},w.ɵprov=n.Yb({token:w,factory:w.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(w,[{type:n.A,args:[{providedIn:"root"}]}],(function(){return[{type:v},{type:a.a}]}),null);class O{}class S{}class C{}class P{}var x=i(34);class k{}class T{}var I=i(13);class D{}var A=i(14);class M{}var z=i(22),E=i(45),U=i(1),N=i.n(U),R=i(51),F=i(789),Q=i(20);class V{constructor(e){this.cryptoService=e}attachToWindow(e){this.attachToGlobal(e)}attachToGlobal(e){e.bitwardenContainerService||(e.bitwardenContainerService=this)}getCryptoService(){return this.cryptoService}}var B=i(15),L=i(147);class _{constructor(e){this.groups=[],null!=e&&(this.name=e.name?e.name.encryptedString:null,this.externalId=e.externalId)}}class j{constructor(e){this.name=e.name?e.name.encryptedString:null}}class K{constructor(){this.ciphers=[],this.folders=[],this.folderRelationships=[]}}class H{constructor(){this.ciphers=[],this.collections=[],this.collectionRelationships=[]}}class W{constructor(e,t){this.key=e,this.value=t}}var q=i(112),G=i(216),J=i(85),Y=i(68);class $ extends Y.a{constructor(e,t=!1){super(),null!=e&&this.buildDomainModel(this,e,{id:null,organizationId:null,name:null,externalId:null,readOnly:null,hidePasswords:null},t,["id","organizationId","externalId","readOnly","hidePasswords"])}decrypt(){return this.decryptObj(new X(this),{name:null},this.organizationId)}}class X{constructor(e){this.id=null,this.organizationId=null,this.name=null,this.externalId=null,this.readOnly=null,this.hidePasswords=null,e&&(this.id=e.id,this.organizationId=e.organizationId,this.externalId=e.externalId,e instanceof $&&(this.readOnly=e.readOnly,this.hidePasswords=e.hidePasswords))}}var Z=i(140),ee=i(138);class te{constructor(e){this.id=null,this.name=null,this.revisionDate=null,e&&(this.id=e.id,this.revisionDate=e.revisionDate)}}var ie,ne,se=i(107),re=i(78),oe=i(60);!function(e){e[e.Generic=0]="Generic"}(ie||(ie={})),function(e){e[e.Debug=0]="Debug",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(ne||(ne={}));var ce=i(538);class ae{constructor(e,t=null){this.isDev=e,this.filter=t,this.timersMap=new Map}debug(e){this.isDev&&this.write(ne.Debug,e)}info(e){this.write(ne.Info,e)}warning(e){this.write(ne.Warning,e)}error(e){this.write(ne.Error,e)}write(e,t){if(null==this.filter||!this.filter(e))switch(e){case ne.Debug:case ne.Info:console.log(t);break;case ne.Warning:console.warn(t);break;case ne.Error:console.error(t)}}time(e="default"){this.timersMap.has(e)||this.timersMap.set(e,ce())}timeEnd(e="default"){const t=ce(this.timersMap.get(e));return this.timersMap.delete(e),this.write(ne.Info,`${e}: ${1e3*t[0]+t[1]/1e7}ms`),t}}class le{constructor(){this.organizationId=null,this.logService=new ae(!1),this.newLineRegex=/(?:\r\n|\r|\n)/,this.passwordFieldNames=["password","pass word","passphrase","pass phrase","pass","code","code word","codeword","secret","secret word","personpwd","key","keyword","key word","keyphrase","key phrase","form_pw","wppassword","pin","pwd","pw","pword","passwd","p","serial","serial#","license key","reg #","passwort"],this.usernameFieldNames=["user","name","user name","username","login name","email","e-mail","id","userid","user id","login","form_loginname","wpname","mail","loginid","login id","log","personlogin","first name","last name","card#","account #","member","member #","nom","benutzername"],this.notesFieldNames=["note","notes","comment","comments","memo","description","free form","freeform","free text","freetext","free","kommentar"],this.uriFieldNames=["url","hyper link","hyperlink","link","host","hostname","host name","server","address","hyper ref","href","web","website","web site","site","web-site","uri","ort","adresse"],this.parseCsvOptions={encoding:"UTF-8",skipEmptyLines:!1}}get organization(){return null!=this.organizationId}parseXml(e){const t=(new DOMParser).parseFromString(e,"application/xml");return null!=t&&null==t.querySelector("parsererror")?t:null}parseCsv(e,t,i={}){const n=Object.assign({header:t},this.parseCsvOptions,i);e=this.splitNewLine(e).join("\n").trim();const s=G.parse(e,n);return null!=s.errors&&s.errors.length>0&&s.errors.forEach(e=>{null!=e.row&&this.logService.warning("Error parsing row "+e.row+": "+e.message)}),s.data&&s.data.length>0?s.data:null}parseSingleRowCsv(e){if(this.isNullOrWhitespace(e))return null;const t=this.parseCsv(e,!1);return null!=t&&t.length>0&&t[0].length>0?t[0]:null}makeUriArray(e){if(null==e)return null;if("string"==typeof e){const t=new Z.a;return t.uri=this.fixUri(e),this.isNullOrWhitespace(t.uri)?null:(t.match=null,[t])}if(e.length>0){const t=[];return e.forEach(e=>{const i=new Z.a;i.uri=this.fixUri(e),this.isNullOrWhitespace(i.uri)||(i.match=null,t.push(i))}),0===t.length?null:t}return null}fixUri(e){return null==e?null:(-1===(e=e.trim()).indexOf("://")&&e.indexOf(".")>=0&&(e="http://"+e),e.length>1e3?e.substring(0,1e3):e)}nameFromUrl(e){const t=Q.a.getHostname(e);return this.isNullOrWhitespace(t)?null:t.startsWith("www.")?t.replace("www.",""):t}isNullOrWhitespace(e){return Q.a.isNullOrWhitespace(e)}getValueOrDefault(e,t=null){return this.isNullOrWhitespace(e)?t:e}splitNewLine(e){return e.split(this.newLineRegex)}getCardBrand(e){if(this.isNullOrWhitespace(e))return null;let t=new RegExp("^4");return null!=e.match(t)?"Visa":/^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(e)?"Mastercard":(t=new RegExp("^3[47]"),null!=e.match(t)?"Amex":(t=new RegExp("^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)"),null!=e.match(t)?"Discover":(t=new RegExp("^36"),null!=e.match(t)?"Diners Club":(t=new RegExp("^30[0-5]"),null!=e.match(t)?"Diners Club":(t=new RegExp("^35(2[89]|[3-8][0-9])"),null!=e.match(t)?"JCB":(t=new RegExp("^(4026|417500|4508|4844|491(3|7))"),null!=e.match(t)?"Visa":null))))))}setCardExpiration(e,t){if(!this.isNullOrWhitespace(t)){const i=(t=t.replace(/\s/g,"")).split("/");if(2===i.length){let t=null,n=null;if(1!==i[0].length&&2!==i[0].length||(t=i[0],2===t.length&&"0"===t[0]&&(t=t.substr(1,1))),2!==i[1].length&&4!==i[1].length||(n=2===t.length?"20"+i[1]:i[1]),null!=t&&null!=n)return e.card.expMonth=t,e.card.expYear=n,!0}}return!1}moveFoldersToCollections(e){e.folderRelationships.forEach(t=>e.collectionRelationships.push(t)),e.collections=e.folders.map(e=>{const t=new X;return t.name=e.name,t}),e.folderRelationships=[],e.folders=[]}querySelectorDirectChild(e,t){const i=this.querySelectorAllDirectChild(e,t);return 0===i.length?null:i[0]}querySelectorAllDirectChild(e,t){return Array.from(e.querySelectorAll(t)).filter(t=>t.parentNode===e)}initLoginCipher(){const e=new J.a;return e.favorite=!1,e.notes="",e.fields=[],e.login=new se.a,e.type=B.a.Login,e}cleanupCipher(e){null!=e&&(e.type!==B.a.Login&&(e.login=null),this.isNullOrWhitespace(e.name)&&(e.name="--"),this.isNullOrWhitespace(e.notes)?e.notes=null:e.notes=e.notes.trim(),null!=e.fields&&0===e.fields.length&&(e.fields=null))}processKvp(e,t,i,n=oe.a.Text){if(!this.isNullOrWhitespace(i))if(this.isNullOrWhitespace(t)&&(t=""),i.length>200||i.trim().search(this.newLineRegex)>-1)null==e.notes&&(e.notes=""),e.notes+=t+": "+this.splitNewLine(i).join("\n")+"\n";else{null==e.fields&&(e.fields=[]);const s=new ee.a;s.type=n,s.name=t,s.value=i,e.fields.push(s)}}processFolder(e,t){let i=e.folders.length;const n=!this.isNullOrWhitespace(t);let s=n;if(n)for(let n=0;n<e.folders.length;n++)if(e.folders[n].name===t){s=!1,i=n;break}if(s){const i=new te;i.name=t,e.folders.push(i)}n&&e.folderRelationships.push([e.ciphers.length,i])}convertToNoteIfNeeded(e){e.type===B.a.Login&&this.isNullOrWhitespace(e.login.username)&&this.isNullOrWhitespace(e.login.password)&&(null==e.login.uris||0===e.login.uris.length)&&(e.type=B.a.SecureNote,e.secureNote=new re.a,e.secureNote.type=ie.Generic)}}class de{constructor(){this.success=!1,this.ciphers=[],this.folders=[],this.folderRelationships=[],this.collections=[],this.collectionRelationships=[]}}class ue extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(e.length<2)return;const i=this.initLoginCipher();if(i.notes=this.getValueOrDefault(e[e.length-1]),i.name=this.getValueOrDefault(e[0],"--"),e.length>2&&e.length%2==0)for(let t=0;t<e.length-2;t+=2){const n=e[t+2],s=e[t+1];if(this.isNullOrWhitespace(n)||this.isNullOrWhitespace(s))continue;const r=s.toLowerCase();null==i.login.password&&this.passwordFieldNames.indexOf(r)>-1?i.login.password=this.getValueOrDefault(n):null==i.login.username&&this.usernameFieldNames.indexOf(r)>-1?i.login.username=this.getValueOrDefault(n):(null==i.login.uris||0===i.login.uris.length)&&this.uriFieldNames.indexOf(r)>-1?i.login.uris=this.makeUriArray(n):this.processKvp(i,s,n)}this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class he extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.name),i.login.uris=this.makeUriArray(e.web),i.login.password=this.getValueOrDefault(e.password),i.login.username=this.getValueOrDefault(e.login),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class pe extends le{parse(e){const t=new de,i=JSON.parse(e);return null==i?(t.success=!1,Promise.resolve(t)):(null!=i.logins&&i.logins.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.custName),i.notes=this.getValueOrDefault(e.note),i.login.uris=this.makeUriArray(e.url),i.login.password=this.getValueOrDefault(e.pwd),i.login.username=this.getValueOrDefault(e.loginName),this.cleanupCipher(i),t.ciphers.push(i)}),null!=i.notes&&i.notes.forEach(e=>{const i=this.initLoginCipher();i.type=B.a.SecureNote,i.secureNote.type=ie.Generic,i.name=this.getValueOrDefault(e.label),i.notes=this.getValueOrDefault(e.text),this.cleanupCipher(i),t.ciphers.push(i)}),null!=i.cards&&i.cards.forEach(e=>{const i=this.initLoginCipher();i.type=B.a.Card,i.name=this.getValueOrDefault(e.custName),i.notes=this.getValueOrDefault(e.note),i.card.cardholderName=this.getValueOrDefault(e.holderName),i.card.number=this.getValueOrDefault(e.cardNumber),i.card.code=this.getValueOrDefault(e.cvv),i.card.brand=this.getCardBrand(i.card.number),null!=e.expirationDate&&(null!=e.expirationDate.month&&(i.card.expMonth=e.expirationDate.month+""),null!=e.expirationDate.year&&(i.card.expYear=e.expirationDate.year+"")),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class ge extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.name,this.getValueOrDefault(this.nameFromUrl(e.website),"--")),i.login.uris=this.makeUriArray(e.website),i.login.password=this.getValueOrDefault(e.password),this.isNullOrWhitespace(e.username)&&!this.isNullOrWhitespace(e.secondary_username)?i.login.username=e.secondary_username:(i.login.username=this.getValueOrDefault(e.username),i.notes=this.getValueOrDefault(e.secondary_username)),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}var fe=i(96);class ye extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(this.organization&&!this.isNullOrWhitespace(e.collections)){e.collections.split(",").forEach(e=>{let i=!0,n=t.collections.length;for(let s=0;s<t.collections.length;s++)if(t.collections[s].name===e){i=!1,n=s;break}if(i){const i=new X;i.name=e,t.collections.push(i)}t.collectionRelationships.push([t.ciphers.length,n])})}else this.organization||this.processFolder(t,e.folder);const i=new J.a;i.favorite=!this.organization&&"0"!==this.getValueOrDefault(e.favorite,"0"),i.type=B.a.Login,i.notes=this.getValueOrDefault(e.notes),i.name=this.getValueOrDefault(e.name,"--");try{i.reprompt=parseInt(this.getValueOrDefault(e.reprompt,fe.a.None.toString()),10)}catch(e){console.error("Unable to parse reprompt value",e),i.reprompt=fe.a.None}if(!this.isNullOrWhitespace(e.fields)){const t=this.splitNewLine(e.fields);for(let e=0;e<t.length;e++){if(this.isNullOrWhitespace(t[e]))continue;const n=t[e].lastIndexOf(": ");if(-1===n)continue;null==i.fields&&(i.fields=[]);const s=new ee.a;s.name=t[e].substr(0,n),s.value=null,s.type=oe.a.Text,t[e].length>n+2&&(s.value=t[e].substr(n+2)),i.fields.push(s)}}switch(null!=e.type?e.type.toLowerCase():null){case"note":i.type=B.a.SecureNote,i.secureNote=new re.a,i.secureNote.type=ie.Generic;break;default:i.type=B.a.Login,i.login=new se.a,i.login.totp=this.getValueOrDefault(e.login_totp||e.totp),i.login.username=this.getValueOrDefault(e.login_username||e.username),i.login.password=this.getValueOrDefault(e.login_password||e.password);const t=this.parseSingleRowCsv(e.login_uri||e.uri);i.login.uris=this.makeUriArray(t)}t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}var me=i(43),ve=i(166),be=i(67),we=i(274);class Oe{constructor(e){var t,i,n,s,r,o;null!=e&&(e instanceof be.a?(this.cardholderName=e.cardholderName,this.brand=e.brand,this.number=e.number,this.expMonth=e.expMonth,this.expYear=e.expYear,this.code=e.code):(this.cardholderName=null===(t=e.cardholderName)||void 0===t?void 0:t.encryptedString,this.brand=null===(i=e.brand)||void 0===i?void 0:i.encryptedString,this.number=null===(n=e.number)||void 0===n?void 0:n.encryptedString,this.expMonth=null===(s=e.expMonth)||void 0===s?void 0:s.encryptedString,this.expYear=null===(r=e.expYear)||void 0===r?void 0:r.encryptedString,this.code=null===(o=e.code)||void 0===o?void 0:o.encryptedString))}static template(){const e=new Oe;return e.cardholderName="John Doe",e.brand="visa",e.number="4242424242424242",e.expMonth="04",e.expYear="2023",e.code="123",e}static toView(e,t=new be.a){return t.cardholderName=e.cardholderName,t.brand=e.brand,t.number=e.number,t.expMonth=e.expMonth,t.expYear=e.expYear,t.code=e.code,t}static toDomain(e,t=new we.a){return t.cardholderName=null!=e.cardholderName?new me.a(e.cardholderName):null,t.brand=null!=e.brand?new me.a(e.brand):null,t.number=null!=e.number?new me.a(e.number):null,t.expMonth=null!=e.expMonth?new me.a(e.expMonth):null,t.expYear=null!=e.expYear?new me.a(e.expYear):null,t.code=null!=e.code?new me.a(e.code):null,t}}var Se=i(275);class Ce{constructor(e){var t,i;null!=e&&(e instanceof ee.a?(this.name=e.name,this.value=e.value):(this.name=null===(t=e.name)||void 0===t?void 0:t.encryptedString,this.value=null===(i=e.value)||void 0===i?void 0:i.encryptedString),this.type=e.type)}static template(){const e=new Ce;return e.name="Field name",e.value="Some value",e.type=oe.a.Text,e}static toView(e,t=new ee.a){return t.type=e.type,t.value=e.value,t.name=e.name,t}static toDomain(e,t=new Se.a){return t.type=e.type,t.value=null!=e.value?new me.a(e.value):null,t.name=null!=e.name?new me.a(e.name):null,t}}var Pe=i(99),xe=i(276);class ke{constructor(e){var t,i,n,s,r,o,c,a,l,d,u,h,p,g,f,y,m,v;null!=e&&(e instanceof Pe.a?(this.title=e.title,this.firstName=e.firstName,this.middleName=e.middleName,this.lastName=e.lastName,this.address1=e.address1,this.address2=e.address2,this.address3=e.address3,this.city=e.city,this.state=e.state,this.postalCode=e.postalCode,this.country=e.country,this.company=e.company,this.email=e.email,this.phone=e.phone,this.ssn=e.ssn,this.username=e.username,this.passportNumber=e.passportNumber,this.licenseNumber=e.licenseNumber):(this.title=null===(t=e.title)||void 0===t?void 0:t.encryptedString,this.firstName=null===(i=e.firstName)||void 0===i?void 0:i.encryptedString,this.middleName=null===(n=e.middleName)||void 0===n?void 0:n.encryptedString,this.lastName=null===(s=e.lastName)||void 0===s?void 0:s.encryptedString,this.address1=null===(r=e.address1)||void 0===r?void 0:r.encryptedString,this.address2=null===(o=e.address2)||void 0===o?void 0:o.encryptedString,this.address3=null===(c=e.address3)||void 0===c?void 0:c.encryptedString,this.city=null===(a=e.city)||void 0===a?void 0:a.encryptedString,this.state=null===(l=e.state)||void 0===l?void 0:l.encryptedString,this.postalCode=null===(d=e.postalCode)||void 0===d?void 0:d.encryptedString,this.country=null===(u=e.country)||void 0===u?void 0:u.encryptedString,this.company=null===(h=e.company)||void 0===h?void 0:h.encryptedString,this.email=null===(p=e.email)||void 0===p?void 0:p.encryptedString,this.phone=null===(g=e.phone)||void 0===g?void 0:g.encryptedString,this.ssn=null===(f=e.ssn)||void 0===f?void 0:f.encryptedString,this.username=null===(y=e.username)||void 0===y?void 0:y.encryptedString,this.passportNumber=null===(m=e.passportNumber)||void 0===m?void 0:m.encryptedString,this.licenseNumber=null===(v=e.licenseNumber)||void 0===v?void 0:v.encryptedString))}static template(){const e=new ke;return e.title="Mr",e.firstName="John",e.middleName="William",e.lastName="Doe",e.address1="123 Any St",e.address2="Apt #123",e.address3=null,e.city="New York",e.state="NY",e.postalCode="10001",e.country="US",e.company="Acme Inc.",e.email="john@company.com",e.phone="5555551234",e.ssn="000-123-4567",e.username="jdoe",e.passportNumber="US-123456789",e.licenseNumber="D123-12-123-12333",e}static toView(e,t=new Pe.a){return t.title=e.title,t.firstName=e.firstName,t.middleName=e.middleName,t.lastName=e.lastName,t.address1=e.address1,t.address2=e.address2,t.address3=e.address3,t.city=e.city,t.state=e.state,t.postalCode=e.postalCode,t.country=e.country,t.company=e.company,t.email=e.email,t.phone=e.phone,t.ssn=e.ssn,t.username=e.username,t.passportNumber=e.passportNumber,t.licenseNumber=e.licenseNumber,t}static toDomain(e,t=new xe.a){return t.title=null!=e.title?new me.a(e.title):null,t.firstName=null!=e.firstName?new me.a(e.firstName):null,t.middleName=null!=e.middleName?new me.a(e.middleName):null,t.lastName=null!=e.lastName?new me.a(e.lastName):null,t.address1=null!=e.address1?new me.a(e.address1):null,t.address2=null!=e.address2?new me.a(e.address2):null,t.address3=null!=e.address3?new me.a(e.address3):null,t.city=null!=e.city?new me.a(e.city):null,t.state=null!=e.state?new me.a(e.state):null,t.postalCode=null!=e.postalCode?new me.a(e.postalCode):null,t.country=null!=e.country?new me.a(e.country):null,t.company=null!=e.company?new me.a(e.company):null,t.email=null!=e.email?new me.a(e.email):null,t.phone=null!=e.phone?new me.a(e.phone):null,t.ssn=null!=e.ssn?new me.a(e.ssn):null,t.username=null!=e.username?new me.a(e.username):null,t.passportNumber=null!=e.passportNumber?new me.a(e.passportNumber):null,t.licenseNumber=null!=e.licenseNumber?new me.a(e.licenseNumber):null,t}}var Te=i(278);class Ie{constructor(e){var t;this.match=null,null!=e&&(e instanceof Z.a?this.uri=e.uri:this.uri=null===(t=e.uri)||void 0===t?void 0:t.encryptedString,this.match=e.match)}static template(){const e=new Ie;return e.uri="https://google.com",e.match=null,e}static toView(e,t=new Z.a){return t.uri=e.uri,t.match=e.match,t}static toDomain(e,t=new Te.a){return t.uri=null!=e.uri?new me.a(e.uri):null,t.match=e.match,t}}var De=i(277);class Ae{constructor(e){var t,i,n;null!=e&&(null!=e.uris&&(se.a,this.uris=e.uris.map(e=>new Ie(e))),e instanceof se.a?(this.username=e.username,this.password=e.password,this.totp=e.totp):(this.username=null===(t=e.username)||void 0===t?void 0:t.encryptedString,this.password=null===(i=e.password)||void 0===i?void 0:i.encryptedString,this.totp=null===(n=e.totp)||void 0===n?void 0:n.encryptedString))}static template(){const e=new Ae;return e.uris=[],e.username="jdoe",e.password="myp@ssword123",e.totp="JBSWY3DPEHPK3PXP",e}static toView(e,t=new se.a){return null!=e.uris&&(t.uris=e.uris.map(e=>Ie.toView(e))),t.username=e.username,t.password=e.password,t.totp=e.totp,t}static toDomain(e,t=new De.a){return null!=e.uris&&(t.uris=e.uris.map(e=>Ie.toDomain(e))),t.username=null!=e.username?new me.a(e.username):null,t.password=null!=e.password?new me.a(e.password):null,t.totp=null!=e.totp?new me.a(e.totp):null,t}}var Me=i(279);class ze{constructor(e){null!=e&&(this.type=e.type)}static template(){const e=new ze;return e.type=ie.Generic,e}static toView(e,t=new re.a){return t.type=e.type,t}static toDomain(e,t=new Me.a){return t.type=e.type,t}}class Ee{static template(){const e=new Ee;return e.organizationId=null,e.collectionIds=null,e.folderId=null,e.type=B.a.Login,e.name="Item name",e.notes="Some notes about this item.",e.favorite=!1,e.fields=[],e.login=null,e.secureNote=null,e.card=null,e.identity=null,e.reprompt=fe.a.None,e}static toView(e,t=new J.a){var i,n,s;if(t.type=e.type,t.folderId=e.folderId,null==t.organizationId&&(t.organizationId=e.organizationId),t.collectionIds||e.collectionIds){const s=new Set((null!==(i=t.collectionIds)&&void 0!==i?i:[]).concat(null!==(n=e.collectionIds)&&void 0!==n?n:[]));t.collectionIds=Array.from(s.values())}switch(t.name=e.name,t.notes=e.notes,t.favorite=e.favorite,t.reprompt=null!==(s=e.reprompt)&&void 0!==s?s:fe.a.None,null!=e.fields&&(t.fields=e.fields.map(e=>Ce.toView(e))),e.type){case B.a.Login:t.login=Ae.toView(e.login);break;case B.a.SecureNote:t.secureNote=ze.toView(e.secureNote);break;case B.a.Card:t.card=Oe.toView(e.card);break;case B.a.Identity:t.identity=ke.toView(e.identity)}return t}static toDomain(e,t=new ve.a){var i;switch(t.type=e.type,t.folderId=e.folderId,null==t.organizationId&&(t.organizationId=e.organizationId),t.name=null!=e.name?new me.a(e.name):null,t.notes=null!=e.notes?new me.a(e.notes):null,t.favorite=e.favorite,t.reprompt=null!==(i=e.reprompt)&&void 0!==i?i:fe.a.None,null!=e.fields&&(t.fields=e.fields.map(e=>Ce.toDomain(e))),e.type){case B.a.Login:t.login=Ae.toDomain(e.login);break;case B.a.SecureNote:t.secureNote=ze.toDomain(e.secureNote);break;case B.a.Card:t.card=Oe.toDomain(e.card);break;case B.a.Identity:t.identity=ke.toDomain(e.identity)}return t}build(e){var t,i;switch(this.organizationId=e.organizationId,this.folderId=e.folderId,this.type=e.type,this.reprompt=e.reprompt,e instanceof J.a?(this.name=e.name,this.notes=e.notes):(this.name=null===(t=e.name)||void 0===t?void 0:t.encryptedString,this.notes=null===(i=e.notes)||void 0===i?void 0:i.encryptedString),this.favorite=e.favorite,null!=e.fields&&(J.a,this.fields=e.fields.map(e=>new Ce(e))),e.type){case B.a.Login:this.login=new Ae(e.login);break;case B.a.SecureNote:this.secureNote=new ze(e.secureNote);break;case B.a.Card:this.card=new Oe(e.card);break;case B.a.Identity:this.identity=new ke(e.identity)}}}class Ue extends Ee{build(e){this.id=e.id,super.build(e),this.collectionIds=e.collectionIds}}class Ne{static template(){const e=new Ne;return e.organizationId="00000000-0000-0000-0000-000000000000",e.name="Collection name",e.externalId=null,e}static toView(e,t=new X){return t.name=e.name,t.externalId=e.externalId,null==t.organizationId&&(t.organizationId=e.organizationId),t}static toDomain(e,t=new $){return t.name=null!=e.name?new me.a(e.name):null,t.externalId=e.externalId,null==t.organizationId&&(t.organizationId=e.organizationId),t}build(e){var t;this.organizationId=e.organizationId,this.name=e instanceof X?e.name:null===(t=e.name)||void 0===t?void 0:t.encryptedString,this.externalId=e.externalId}}class Re extends Ne{build(e){this.id=e.id,super.build(e)}}class Fe extends Y.a{constructor(e,t=!1){super(),null!=e&&(this.buildDomainModel(this,e,{id:null,name:null},t,["id"]),this.revisionDate=null!=e.revisionDate?new Date(e.revisionDate):null)}decrypt(){return this.decryptObj(new te(this),{name:null},null)}}class Qe{static template(){const e=new Qe;return e.name="Folder name",e}static toView(e,t=new te){return t.name=e.name,t}static toDomain(e,t=new Fe){return t.name=null!=e.name?new me.a(e.name):null,t}build(e){var t;this.name=e instanceof te?e.name:null===(t=e.name)||void 0===t?void 0:t.encryptedString}}class Ve extends Qe{build(e){this.id=e.id,super.build(e)}}var Be=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Le extends le{constructor(e,t){super(),this.cryptoService=e,this.i18nService=t}parse(e){return Be(this,void 0,void 0,(function*(){return this.result=new de,this.results=JSON.parse(e),null==this.results||null==this.results.items||0===this.results.items.length?(this.result.success=!1,this.result):(this.results.encrypted?yield this.parseEncrypted():this.parseDecrypted(),this.result)}))}parseEncrypted(){return Be(this,void 0,void 0,(function*(){if(null!=this.results.encKeyValidation_DO_NOT_EDIT){const e=new me.a(this.results.encKeyValidation_DO_NOT_EDIT);if(null===(yield this.cryptoService.decryptToUtf8(e)))return this.result.success=!1,void(this.result.errorMessage=this.i18nService.t("importEncKeyError"))}const e=new Map;if(this.organization&&null!=this.results.collections)for(const t of this.results.collections){const i=Re.toDomain(t);if(null!=i){i.id=null,i.organizationId=this.organizationId;const n=yield i.decrypt();e.set(t.id,this.result.collections.length),this.result.collections.push(n)}}else if(!this.organization&&null!=this.results.folders)for(const t of this.results.folders){const i=Ve.toDomain(t);if(null!=i){i.id=null;const n=yield i.decrypt();e.set(t.id,this.result.folders.length),this.result.folders.push(n)}}for(const t of this.results.items){const i=Ue.toDomain(t);i.id=null,i.folderId=null,i.organizationId=this.organizationId,i.collectionIds=null,null!=i.passwordHistory&&i.passwordHistory.length>5&&(i.passwordHistory=i.passwordHistory.slice(0,5)),!this.organization&&null!=t.folderId&&e.has(t.folderId)?this.result.folderRelationships.push([this.result.ciphers.length,e.get(t.folderId)]):this.organization&&null!=t.collectionIds&&t.collectionIds.forEach(t=>{e.has(t)&&this.result.collectionRelationships.push([this.result.ciphers.length,e.get(t)])});const n=yield i.decrypt();this.cleanupCipher(n),this.result.ciphers.push(n)}this.result.success=!0}))}parseDecrypted(){const e=new Map;this.organization&&null!=this.results.collections?this.results.collections.forEach(t=>{const i=Re.toView(t);null!=i&&(i.id=null,i.organizationId=null,e.set(t.id,this.result.collections.length),this.result.collections.push(i))}):this.organization||null==this.results.folders||this.results.folders.forEach(t=>{const i=Ve.toView(t);null!=i&&(i.id=null,e.set(t.id,this.result.folders.length),this.result.folders.push(i))}),this.results.items.forEach(t=>{const i=Ue.toView(t);i.id=null,i.folderId=null,i.organizationId=null,i.collectionIds=null,null!=i.passwordHistory&&i.passwordHistory.length>5&&(i.passwordHistory=i.passwordHistory.slice(0,5)),!this.organization&&null!=t.folderId&&e.has(t.folderId)?this.result.folderRelationships.push([this.result.ciphers.length,e.get(t.folderId)]):this.organization&&null!=t.collectionIds&&t.collectionIds.forEach(t=>{e.has(t)&&this.result.collectionRelationships.push([this.result.ciphers.length,e.get(t)])}),this.cleanupCipher(i),this.result.ciphers.push(i)}),this.result.success=!0}}class _e extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if("list"===e.grouping)return;const i=this.initLoginCipher();i.favorite="1"===e.fav,i.name=this.getValueOrDefault(e.name),i.notes=this.getValueOrDefault(e.extra),"note"!==e.grouping&&(i.login.uris=this.makeUriArray(e.url),i.login.password=this.getValueOrDefault(e.password),i.login.username=this.getValueOrDefault(e.username)),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class je extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{"null"===e.label&&(e.label=null);const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.label,this.getValueOrDefault(this.nameFromUrl(e.domain),"--")),i.login.uris=this.makeUriArray(e.domain),i.login.password=this.getValueOrDefault(e.password),this.isNullOrWhitespace(e.email)&&!this.isNullOrWhitespace(e.username)?i.login.username=e.username:(i.login.username=this.getValueOrDefault(e.email),i.notes=this.getValueOrDefault(e.username)),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}const Ke=["!group_id","!group_name","title","username","password","URL","id"];class He extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{this.processFolder(t,this.getValueOrDefault(e["!group_name"]));const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.title,"--"),i.login.username=this.getValueOrDefault(e.username),i.login.password=this.getValueOrDefault(e.password),i.login.uris=this.makeUriArray(e.URL);let n=!1;for(const t in e)e.hasOwnProperty(t)&&(n||-1!==Ke.indexOf(t)||(n=!0),n&&this.processKvp(i,t,e[t]));this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}class We extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.name,"--"),i.login.username=this.getValueOrDefault(e.username),i.login.password=this.getValueOrDefault(e.password),i.login.uris=this.makeUriArray(e.url),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class qe extends le{parse(e){const t=new de,i=this.parseXml(e);if(null==i)return t.success=!1,Promise.resolve(t);const n=i.querySelector("textarea");if(null==n||this.isNullOrWhitespace(n.textContent))return t.errorMessage="Missing textarea.",t.success=!1,Promise.resolve(t);return JSON.parse(n.textContent).forEach(e=>{const i=this.initLoginCipher();if(this.isNullOrWhitespace(e.label)||(i.name=e.label.split(" ")[0]),null==e.data||this.isNullOrWhitespace(e.data.notes)||(i.notes=e.data.notes.split("\\n").join("\n")),null!=e.currentVersion&&null!=e.currentVersion.fields)for(const t in e.currentVersion.fields){if(!e.currentVersion.fields.hasOwnProperty(t))continue;const n=e.currentVersion.fields[t];switch(null!=n.actionType?n.actionType.toLowerCase():null){case"password":i.login.password=this.getValueOrDefault(n.value);break;case"email":case"username":case"user":case"name":i.login.username=this.getValueOrDefault(n.value);break;case"url":i.login.uris=this.makeUriArray(n.value);break;default:const e=null!=n.label?n.label.toLowerCase():null;null==i.login.password&&this.passwordFieldNames.indexOf(e)>-1?i.login.password=this.getValueOrDefault(n.value):null==i.login.username&&this.usernameFieldNames.indexOf(e)>-1?i.login.username=this.getValueOrDefault(n.value):(null==i.login.uris||0===i.login.uris.length)&&this.uriFieldNames.indexOf(e)>-1?i.login.uris=this.makeUriArray(n.value):this.processKvp(i,n.label,n.value)}}this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t)}}class Ge extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{this.processFolder(t,this.getValueOrDefault(e.Category));const i=this.initLoginCipher();i.favorite="True"===this.getValueOrDefault(e.Favorite),i.name=this.getValueOrDefault(e.Entry,"--"),i.notes=this.getValueOrDefault(e.Note),i.login.username=this.getValueOrDefault(e.Username,e.Email),i.login.password=this.getValueOrDefault(e.Password),i.login.totp=this.getValueOrDefault(e.TOTP),i.login.uris=this.makeUriArray(e.Website),this.isNullOrWhitespace(e.Username)||this.processKvp(i,"Email",e.Email),this.processKvp(i,"Phone",e.Phone),this.processKvp(i,"PIN",e.PIN),this.processKvp(i,"Account",e.Account),this.processKvp(i,"Date",e.Date),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}const Je=new Set(["ADDRESS","AUTHENTIFIANT","BANKSTATEMENT","IDCARD","IDENTITY","PAYMENTMEANS_CREDITCARD","PAYMENTMEAN_PAYPAL","EMAIL"]);class Ye extends le{parse(e){this.result=new de;const t=JSON.parse(e);if(null==t||0===t.length)return this.result.success=!1,Promise.resolve(this.result);null!=t.ADDRESS&&this.processAddress(t.ADDRESS),null!=t.AUTHENTIFIANT&&this.processAuth(t.AUTHENTIFIANT),null!=t.BANKSTATEMENT&&this.processNote(t.BANKSTATEMENT,"BankAccountName"),null!=t.IDCARD&&this.processNote(t.IDCARD,"Fullname"),null!=t.PAYMENTMEANS_CREDITCARD&&this.processCard(t.PAYMENTMEANS_CREDITCARD),null!=t.IDENTITY&&this.processIdentity(t.IDENTITY);for(const e in t)t.hasOwnProperty(e)&&!Je.has(e)&&this.processNote(t[e],null,"Generic Note");return this.result.success=!0,Promise.resolve(this.result)}processAuth(e){e.forEach(e=>{const t=this.initLoginCipher();t.name=this.getValueOrDefault(e.title),t.login.username=this.getValueOrDefault(e.login,this.getValueOrDefault(e.secondaryLogin)),this.isNullOrWhitespace(t.login.username)?t.login.username=this.getValueOrDefault(e.email):this.isNullOrWhitespace(e.email)||(t.notes="Email: "+e.email+"\n"),t.login.password=this.getValueOrDefault(e.password),t.login.uris=this.makeUriArray(e.domain),t.notes+=this.getValueOrDefault(e.note,""),this.convertToNoteIfNeeded(t),this.cleanupCipher(t),this.result.ciphers.push(t)})}processIdentity(e){e.forEach(e=>{const t=new J.a;t.identity=new Pe.a,t.type=B.a.Identity,t.name=this.getValueOrDefault(e.fullName,"");const i=t.name.split(" ");i.length>0&&(t.identity.firstName=this.getValueOrDefault(i[0])),2===i.length?t.identity.lastName=this.getValueOrDefault(i[1]):3===i.length&&(t.identity.middleName=this.getValueOrDefault(i[1]),t.identity.lastName=this.getValueOrDefault(i[2])),t.identity.username=this.getValueOrDefault(e.pseudo),this.cleanupCipher(t),this.result.ciphers.push(t)})}processAddress(e){e.forEach(e=>{const t=new J.a;t.identity=new Pe.a,t.type=B.a.Identity,t.name=this.getValueOrDefault(e.addressName),t.identity.address1=this.getValueOrDefault(e.addressFull),t.identity.city=this.getValueOrDefault(e.city),t.identity.state=this.getValueOrDefault(e.state),t.identity.postalCode=this.getValueOrDefault(e.zipcode),t.identity.country=this.getValueOrDefault(e.country),null!=t.identity.country&&(t.identity.country=t.identity.country.toUpperCase()),this.cleanupCipher(t),this.result.ciphers.push(t)})}processCard(e){e.forEach(e=>{const t=new J.a;t.card=new be.a,t.type=B.a.Card,t.name=this.getValueOrDefault(e.bank),t.card.number=this.getValueOrDefault(e.cardNumber),t.card.brand=this.getCardBrand(t.card.number),t.card.cardholderName=this.getValueOrDefault(e.owner),this.isNullOrWhitespace(t.card.brand)||(this.isNullOrWhitespace(t.name)?t.name=t.card.brand:t.name+=" - "+t.card.brand),this.cleanupCipher(t),this.result.ciphers.push(t)})}processNote(e,t,i=null){e.forEach(e=>{const n=new J.a;n.secureNote=new re.a,n.type=B.a.SecureNote,n.secureNote.type=ie.Generic,n.name=null!=i?i:this.getValueOrDefault(e[t]);for(const i in e)e.hasOwnProperty(i)&&i!==t&&this.processKvp(n,i,e[i].toString());this.cleanupCipher(n),this.result.ciphers.push(n)})}}class $e extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.Label,"--"),i.notes=this.getValueOrDefault(e.Notes);const n=this.getValueOrDefault(e.Text);this.isNullOrWhitespace(n)||(this.isNullOrWhitespace(i.notes)?i.notes=n:i.notes+="\n\n"+n);const s=e["Entry Type"];if("Password"===s)i.login.username=this.getValueOrDefault(e.Username),i.login.password=this.getValueOrDefault(e.Password),i.login.uris=this.makeUriArray(e["Site URL"]);else if("Credit Card"===s){i.type=B.a.Card,i.card=new be.a,i.card.cardholderName=this.getValueOrDefault(e["Name on card"]),i.card.number=this.getValueOrDefault(e["Card Number"]),i.card.brand=this.getCardBrand(i.card.number),i.card.code=this.getValueOrDefault(e.CVV);const t=this.getValueOrDefault(e.Expiry);if(!this.isNullOrWhitespace(t)){const e=t.split("/");e.length>1&&(i.card.expMonth=parseInt(e[0],null).toString(),i.card.expYear=(2e3+parseInt(e[1],null)).toString())}}this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class Xe extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);if(null==i)return t.success=!1,Promise.resolve(t);let n=!0;return i.forEach(e=>{if(e.length<2||n&&("Title"===e[0]||"title"===e[0]))return void(n=!1);const i=this.initLoginCipher();if(i.notes=this.getValueOrDefault(e[e.length-1]),i.name=this.getValueOrDefault(e[0],"--"),2!==e.length&&(this.containsField(e,"username")||this.containsField(e,"password")||this.containsField(e,"email")||this.containsField(e,"url"))||(i.type=B.a.SecureNote,i.secureNote=new re.a,i.secureNote.type=ie.Generic),this.containsField(e,"cardholder")&&this.containsField(e,"number")&&this.containsField(e,"expiry date")&&(i.type=B.a.Card,i.card=new be.a),e.length>2&&e.length%2==0)for(let t=0;t<e.length-2;t+=2){const n=e[t+2];if(this.isNullOrWhitespace(n))continue;const s=e[t+1],r=s.toLowerCase();if(i.type===B.a.Login){if("url"===r&&(null==i.login.uris||0===i.login.uris.length)){i.login.uris=this.makeUriArray(n);continue}if(("username"===r||"email"===r)&&this.isNullOrWhitespace(i.login.username)){i.login.username=n;continue}if("password"===r&&this.isNullOrWhitespace(i.login.password)){i.login.password=n;continue}if("totp"===r&&this.isNullOrWhitespace(i.login.totp)){i.login.totp=n;continue}}else if(i.type===B.a.Card){if("cardholder"===r&&this.isNullOrWhitespace(i.card.cardholderName)){i.card.cardholderName=n;continue}if("number"===r&&this.isNullOrWhitespace(i.card.number)){i.card.number=n,i.card.brand=this.getCardBrand(n);continue}if("cvc"===r&&this.isNullOrWhitespace(i.card.code)){i.card.code=n;continue}if("expiry date"===r&&this.isNullOrWhitespace(i.card.expMonth)&&this.isNullOrWhitespace(i.card.expYear)){if(this.setCardExpiration(i,n))continue}else if("type"===r)continue}this.processKvp(i,s,n)}this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t)}containsField(e,t){return null!=e&&null!=t&&e.filter(e=>!this.isNullOrWhitespace(e)&&e.toLowerCase()===t.toLowerCase()).length>0}}class Ze extends le{parse(e){const t=new de,i=JSON.parse(e);if(null==i||null==i.items||0===i.items.length)return t.success=!1,Promise.resolve(t);const n=new Map,s=new Map,r=this.buildFolderTree(i.folders);return this.flattenFolderTree(null,r,n),n.forEach((e,i)=>{s.set(i,t.folders.length);const n=new te;n.name=e,t.folders.push(n)}),i.items.forEach(e=>{null!=e.folders&&e.folders.length>0&&s.has(e.folders[0])&&t.folderRelationships.push([t.ciphers.length,s.get(e.folders[0])]);const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.title),i.favorite=e.favorite>0,null!=e.template_type&&null!=e.fields&&e.fields.length>0&&(0===e.template_type.indexOf("login.")||0===e.template_type.indexOf("password.")?this.processLogin(i,e.fields):0===e.template_type.indexOf("creditcard.")?this.processCard(i,e.fields):e.template_type.indexOf("identity.")<0&&e.fields.some(e=>"password"===e.type&&!this.isNullOrWhitespace(e.value))?this.processLogin(i,e.fields):this.processNote(i,e.fields)),i.notes+="\n"+this.getValueOrDefault(e.note,""),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t)}processLogin(e,t){const i=[];t.forEach(t=>{this.isNullOrWhitespace(t.value)||"section"===t.type||("username"!==t.type&&"email"!==t.type||!this.isNullOrWhitespace(e.login.username)?"password"===t.type&&this.isNullOrWhitespace(e.login.password)?e.login.password=t.value:"totp"===t.type&&this.isNullOrWhitespace(e.login.totp)?e.login.totp=t.value:"url"===t.type?i.push(t.value):this.processKvp(e,t.label,t.value,1===t.sensitive?oe.a.Hidden:oe.a.Text):e.login.username=t.value)}),e.login.uris=this.makeUriArray(i)}processCard(e,t){e.card=new be.a,e.type=B.a.Card,t.forEach(t=>{this.isNullOrWhitespace(t.value)||"section"===t.type||"ccType"===t.type||("ccName"===t.type&&this.isNullOrWhitespace(e.card.cardholderName)?e.card.cardholderName=t.value:"ccNumber"===t.type&&this.isNullOrWhitespace(e.card.number)?(e.card.number=t.value,e.card.brand=this.getCardBrand(e.card.number)):"ccCvc"===t.type&&this.isNullOrWhitespace(e.card.code)?e.card.code=t.value:"ccExpiry"===t.type&&this.isNullOrWhitespace(e.card.expYear)&&this.setCardExpiration(e,t.value)||this.processKvp(e,t.label,t.value,1===t.sensitive?oe.a.Hidden:oe.a.Text))})}processNote(e,t){t.forEach(t=>{this.isNullOrWhitespace(t.value)||"section"===t.type||this.processKvp(e,t.label,t.value,1===t.sensitive?oe.a.Hidden:oe.a.Text)})}buildFolderTree(e){if(null==e)return[];const t=[],i=new Map([]);return e.forEach(e=>{i.set(e.uuid,e),e.children=[]}),e.forEach(e=>{null!=e.parent_uuid&&""!==e.parent_uuid&&i.has(e.parent_uuid)?i.get(e.parent_uuid).children.push(e):t.push(e)}),t}flattenFolderTree(e,t,i){null!=t&&t.forEach(t=>{if(null!=t.title&&""!==t.title.trim()){let n=t.title.trim();null!=e&&""!==e.trim()&&(n=e+"/"+n),i.set(t.uuid,n),null!=t.children&&0!==t.children.length&&this.flattenFolderTree(n,t.children,i)}})}}class et extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.filter(e=>"chrome://FirefoxAccounts"!==e.url).forEach(e=>{const i=this.initLoginCipher(),n=this.getValueOrDefault(e.url,this.getValueOrDefault(e.hostname));i.name=this.getValueOrDefault(this.nameFromUrl(n),"--"),i.login.username=this.getValueOrDefault(e.username),i.login.password=this.getValueOrDefault(e.password),i.login.uris=this.makeUriArray(n),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class tt extends le{parse(e){const t=new de,i=JSON.parse(e);if(null==i||null==i.data)return t.success=!1,Promise.resolve(t);for(const e in i.data){if(!i.data.hasOwnProperty(e))continue;const n=i.data[e],s=this.initLoginCipher();if(s.name=this.getValueOrDefault(n.service),s.notes=this.getValueOrDefault(n.notes),"website"===n.style)s.login.username=this.getValueOrDefault(n.username),s.login.password=this.getValueOrDefault(n.password),s.login.uris=this.makeUriArray(n.url);else{if("creditcard"!==n.style)continue;s.type=B.a.Card,s.card=new be.a,s.card.cardholderName=this.getValueOrDefault(n.username),s.card.number=this.getValueOrDefault(n.creditNumber),s.card.brand=this.getCardBrand(s.card.number),s.card.code=this.getValueOrDefault(n.creditCvv),this.isNullOrWhitespace(n.creditExpiry)||this.setCardExpiration(s,n.creditExpiry)||this.processKvp(s,"Expiration",n.creditExpiry),this.isNullOrWhitespace(n.password)||this.processKvp(s,"PIN",n.password)}this.convertToNoteIfNeeded(s),this.cleanupCipher(s),t.ciphers.push(s)}return t.success=!0,Promise.resolve(t)}}class it extends le{parse(e){const t=new de,i=JSON.parse(e);if(null==i||0===Object.keys(i).length)return t.success=!1,Promise.resolve(t);for(const e in i)i.hasOwnProperty(e)&&!this.isNullOrWhitespace(e)&&0!==i[e].length&&i[e].forEach(i=>{if(this.isNullOrWhitespace(i.display_name)||0!==i.display_name.indexOf("http"))return;this.processFolder(t,e);const n=this.initLoginCipher();if(n.name=i.display_name.replace("http://","").replace("https://",""),n.name.length>30&&(n.name=n.name.substring(0,30)),n.login.password=this.getValueOrDefault(i.secret),n.login.uris=this.makeUriArray(i.display_name),null!=i.attributes){n.login.username=null!=i.attributes?this.getValueOrDefault(i.attributes.username_value):null;for(const e in i.attributes)i.attributes.hasOwnProperty(e)&&"username_value"!==e&&"xdg:schema"!==e&&this.processKvp(n,e,i.attributes[e])}this.convertToNoteIfNeeded(n),this.cleanupCipher(n),t.ciphers.push(n)});return this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}}class nt extends le{parse(e){const t=new de;let i,n,s,r=this.splitNewLine(e).join("\n");if(-1!==r.indexOf("Notes\n\n")){const e=r.split("Notes\n\n");e.length>1&&(r=e[0],i=e[1])}if(-1!==r.indexOf("Applications\n\n")){const e=r.split("Applications\n\n");e.length>1&&(r=e[0],n=e[1])}if(0===r.indexOf("Websites\n\n")){const e=r.split("Websites\n\n");e.length>1&&(r=e[0],s=e[1])}const o=this.parseDataCategory(i),c=this.parseDataCategory(n),a=this.parseDataCategory(s);return o.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.get("Name")),i.notes=this.getValueOrDefault(e.get("Text")),this.cleanupCipher(i),t.ciphers.push(i)}),a.concat(c).forEach(e=>{const i=this.initLoginCipher(),n=e.has("Website name")?"Website name":"Application";i.name=this.getValueOrDefault(e.get(n),""),this.isNullOrWhitespace(e.get("Login name"))||(this.isNullOrWhitespace(i.name)||(i.name+=": "),i.name+=e.get("Login name")),i.notes=this.getValueOrDefault(e.get("Comment")),e.has("Website URL")&&(i.login.uris=this.makeUriArray(e.get("Website URL"))),i.login.username=this.getValueOrDefault(e.get("Login")),i.login.password=this.getValueOrDefault(e.get("Password")),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t)}parseDataCategory(e){if(this.isNullOrWhitespace(e)||-1===e.indexOf("\n---\n"))return[];const t=[];return e.split("\n---\n").forEach(e=>{if(-1===e.indexOf("\n"))return;const i=new Map;let n,s;e.split("\n").forEach(e=>{if(null!=n)return void(n+="\n"+e);const t=e.indexOf(":");let r,o;-1!==t&&(r=e.substring(0,t),e.length>t+1&&(o=e.substring(t+2)),null!=r&&i.set(r,o),"Comment"!==r&&"Text"!==r||(n=o,s=r))}),null!=n&&null!=s&&i.set(s,n),0!==i.size&&t.push(i)}),t}}class st extends le{constructor(){super(...arguments),this.result=new de}parse(e){const t=this.parseXml(e);if(null==t)return this.result.success=!1,Promise.resolve(this.result);const i=t.querySelector("KeePassFile > Root > Group");return null==i?(this.result.errorMessage="Missing `KeePassFile > Root > Group` node.",this.result.success=!1,Promise.resolve(this.result)):(this.traverse(i,!0,""),this.organization&&this.moveFoldersToCollections(this.result),this.result.success=!0,Promise.resolve(this.result))}traverse(e,t,i){const n=this.result.folders.length;let s=i;if(!t){""!==s&&(s+="/");const t=this.querySelectorDirectChild(e,"Name");s+=null==t?"-":t.textContent;const i=new te;i.name=s,this.result.folders.push(i)}this.querySelectorAllDirectChild(e,"Entry").forEach(e=>{const i=this.result.ciphers.length,s=this.initLoginCipher();this.querySelectorAllDirectChild(e,"String").forEach(e=>{const t=this.querySelectorDirectChild(e,"Value"),i=null!=t?t.textContent:null;if(this.isNullOrWhitespace(i))return;const n=this.querySelectorDirectChild(e,"Key"),r=null!=n?n.textContent:null;if("URL"===r)s.login.uris=this.makeUriArray(i);else if("UserName"===r)s.login.username=i;else if("Password"===r)s.login.password=i;else if("otp"===r)s.login.totp=i.replace("key=","");else if("Title"===r)s.name=i;else if("Notes"===r)s.notes+=i+"\n";else{let e=oe.a.Text;const n=t.attributes;n.length>0&&null!=n.ProtectInMemory&&"True"===n.ProtectInMemory.value&&(e=oe.a.Hidden),this.processKvp(s,r,i,e)}}),this.cleanupCipher(s),this.result.ciphers.push(s),t||this.result.folderRelationships.push([i,n])}),this.querySelectorAllDirectChild(e,"Group").forEach(e=>{this.traverse(e,!1,s)})}}class rt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(this.isNullOrWhitespace(e.Title))return;e.Group=!this.isNullOrWhitespace(e.Group)&&e.Group.startsWith("Root/")?e.Group.replace("Root/",""):e.Group;const i=this.isNullOrWhitespace(e.Group)?null:e.Group;this.processFolder(t,i);const n=this.initLoginCipher();n.notes=this.getValueOrDefault(e.Notes),n.name=this.getValueOrDefault(e.Title,"--"),n.login.username=this.getValueOrDefault(e.Username),n.login.password=this.getValueOrDefault(e.Password),n.login.uris=this.makeUriArray(e.URL),this.cleanupCipher(n),t.ciphers.push(n)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}class ot extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(e.length<6)return;this.processFolder(t,e[0]);const i=this.initLoginCipher();if(i.notes=this.getValueOrDefault(e[5])+"\n",i.name=this.getValueOrDefault(e[1],"--"),i.login.username=this.getValueOrDefault(e[2]),i.login.password=this.getValueOrDefault(e[3]),i.login.uris=this.makeUriArray(e[4]),e.length>7)for(let t=7;t<e.length;t+=2)this.processKvp(i,e[t],e[t+1]);this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}class ct extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach((e,i)=>{const n=t.ciphers.length;let s=t.folders.length,r=e.grouping;null!=r&&(r=r.replace(/\\/g,"/").replace(/[\x00-\x1F\x7F-\x9F]/g,""));const o="(none)"!==this.getValueOrDefault(r,"(none)");let c=o;if(o)for(let e=0;e<t.folders.length;e++)if(t.folders[e].name===r){c=!1,s=e;break}const a=this.buildBaseCipher(e);if(a.type===B.a.Login)a.notes=this.getValueOrDefault(e.extra),a.login=new se.a,a.login.uris=this.makeUriArray(e.url),a.login.username=this.getValueOrDefault(e.username),a.login.password=this.getValueOrDefault(e.password),a.login.totp=this.getValueOrDefault(e.totp);else if(a.type===B.a.SecureNote)this.parseSecureNote(e,a);else if(a.type===B.a.Card)a.card=this.parseCard(e),a.notes=this.getValueOrDefault(e.notes);else if(a.type===B.a.Identity&&(a.identity=this.parseIdentity(e),a.notes=this.getValueOrDefault(e.notes),!this.isNullOrWhitespace(e.ccnum))){const i=this.buildBaseCipher(e);i.identity=null,i.type=B.a.Card,i.card=this.parseCard(e),t.ciphers.push(i)}if(t.ciphers.push(a),c){const e=new te;e.name=r,t.folders.push(e)}o&&t.folderRelationships.push([n,s])}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}buildBaseCipher(e){const t=new J.a;return e.hasOwnProperty("profilename")&&e.hasOwnProperty("profilelanguage")?(t.favorite=!1,t.name=this.getValueOrDefault(e.profilename,"--"),t.type=B.a.Card,this.isNullOrWhitespace(e.title)&&this.isNullOrWhitespace(e.firstname)&&this.isNullOrWhitespace(e.lastname)&&this.isNullOrWhitespace(e.address1)&&this.isNullOrWhitespace(e.phone)&&this.isNullOrWhitespace(e.username)&&this.isNullOrWhitespace(e.email)||(t.type=B.a.Identity)):(t.favorite=!this.organization&&"1"===this.getValueOrDefault(e.fav,"0"),t.name=this.getValueOrDefault(e.name,"--"),t.type="http://sn"===e.url?B.a.SecureNote:B.a.Login),t}parseCard(e){const t=new be.a;if(t.cardholderName=this.getValueOrDefault(e.ccname),t.number=this.getValueOrDefault(e.ccnum),t.code=this.getValueOrDefault(e.cccsc),t.brand=this.getCardBrand(e.ccnum),!this.isNullOrWhitespace(e.ccexp)&&e.ccexp.indexOf("-")>-1){const i=e.ccexp.split("-");i.length>1&&(t.expYear=i[0],t.expMonth=i[1],2===t.expMonth.length&&"0"===t.expMonth[0]&&(t.expMonth=t.expMonth[1]))}return t}parseIdentity(e){const t=new Pe.a;return t.title=this.getValueOrDefault(e.title),t.firstName=this.getValueOrDefault(e.firstname),t.middleName=this.getValueOrDefault(e.middlename),t.lastName=this.getValueOrDefault(e.lastname),t.username=this.getValueOrDefault(e.username),t.company=this.getValueOrDefault(e.company),t.ssn=this.getValueOrDefault(e.ssn),t.address1=this.getValueOrDefault(e.address1),t.address2=this.getValueOrDefault(e.address2),t.address3=this.getValueOrDefault(e.address3),t.city=this.getValueOrDefault(e.city),t.state=this.getValueOrDefault(e.state),t.postalCode=this.getValueOrDefault(e.zip),t.country=this.getValueOrDefault(e.country),t.email=this.getValueOrDefault(e.email),t.phone=this.getValueOrDefault(e.phone),this.isNullOrWhitespace(t.title)||(t.title=t.title.charAt(0).toUpperCase()+t.title.slice(1)),t}parseSecureNote(e,t){const i=this.splitNewLine(e.extra);let n=!1;if(i.length){const e=i[0].split(":");if(e.length>1&&"NoteType"===e[0]&&("Credit Card"===e[1]||"Address"===e[1])){if("Credit Card"===e[1]){const e=this.parseSecureNoteMapping(t,i,{Number:"number","Name on Card":"cardholderName","Security Code":"code","Expiration Date":"expMonth"});if(this.isNullOrWhitespace(e.expMonth)||","===e.expMonth)e.expMonth=void 0;else{const[t,i]=e.expMonth.split(",");if(this.isNullOrWhitespace(t))e.expMonth=void 0;else{const i=new Date(Date.parse(t.trim()+" 1, 2012")).getMonth()+1;isNaN(i)?e.expMonth=void 0:e.expMonth=i.toString()}this.isNullOrWhitespace(i)||(e.expYear=i)}t.type=B.a.Card,t.card=e}else if("Address"===e[1]){const e=this.parseSecureNoteMapping(t,i,{Title:"title","First Name":"firstName","Last Name":"lastName","Middle Name":"middleName",Company:"company","Address 1":"address1","Address 2":"address2","Address 3":"address3","City / Town":"city",State:"state","Zip / Postal Code":"postalCode",Country:"country","Email Address":"email",Username:"username"});t.type=B.a.Identity,t.identity=e}n=!0}}n||(t.secureNote=new re.a,t.secureNote.type=ie.Generic,t.notes=this.getValueOrDefault(e.extra))}parseSecureNoteMapping(e,t,i){const n={};let s=!1;return t.forEach(t=>{let r=null,o=null;if(!s){if(this.isNullOrWhitespace(t))return;const e=t.indexOf(":");if(-1===e?r=t:(r=t.substring(0,e),t.length>e&&(o=t.substring(e+1))),this.isNullOrWhitespace(r)||this.isNullOrWhitespace(o)||"NoteType"===r)return}s?e.notes+="\n"+t:"Notes"===r?(this.isNullOrWhitespace(e.notes)?e.notes=o:e.notes+="\n"+o,s=!0):i.hasOwnProperty(r)?n[i[r]]=o:this.processKvp(e,r,o)}),n}}class at extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(e.length<4)return;const i=this.initLoginCipher();i.name=this.getValueOrDefault(e[0],"--"),i.login.username=this.getValueOrDefault(e[2]),i.login.password=this.getValueOrDefault(e[3]),i.login.uris=this.makeUriArray(e[1]),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class lt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.DisplayName,"--"),i.notes=this.getValueOrDefault(e.Notes),i.login.username=this.getValueOrDefault(e.UserName),i.login.password=this.getValueOrDefault(e.Password),i.login.uris=this.makeUriArray(e.Url),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class dt extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(e.length<3)return;const i="Unassigned"!==this.getValueOrDefault(e[0],"Unassigned")?e[0]:null;this.processFolder(t,i);const n=this.initLoginCipher();if(n.name=this.getValueOrDefault(e[2],"--"),"Web Logins"===e[1]||"Login"===e[1])n.login.uris=this.makeUriArray(e[4]),n.login.username=this.getValueOrDefault(e[5]),n.login.password=this.getValueOrDefault(e[6]),n.notes=this.isNullOrWhitespace(e[3])?null:e[3].split("\\n").join("\n");else if(e.length>3){n.type=B.a.SecureNote,n.secureNote=new re.a,n.secureNote.type=ie.Generic;for(let t=3;t<e.length;t++)this.isNullOrWhitespace(e[t])||(n.notes+=e[t]+"\n")}this.isNullOrWhitespace(e[1])||n.type===B.a.Login||(n.name=e[1]+": "+n.name),this.cleanupCipher(n),t.ciphers.push(n)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}class ut extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();if(i.name=this.getValueOrDefault(e.nickname,"--"),i.notes=this.getValueOrDefault(e.additionalInfo),void 0!==e.url)i.login.uris=this.makeUriArray(e.url),i.login.username=this.getValueOrDefault(e.username),i.login.password=this.getValueOrDefault(e.password),i.login.totp=this.getValueOrDefault(e.twoFactAuthToken);else if(void 0!==e.cardNumber)i.card=new be.a,i.type=B.a.Card,i.card.cardholderName=this.getValueOrDefault(e.cardName),i.card.number=this.getValueOrDefault(e.cardNumber),i.card.brand=this.getCardBrand(i.card.number),i.card.expMonth=this.getValueOrDefault(e.exp_month),i.card.expYear=this.getValueOrDefault(e.exp_year),i.card.code=this.getValueOrDefault(e.cvv);else if(void 0!==e.firstName)i.identity=new Pe.a,i.type=B.a.Identity,i.identity.title=this.getValueOrDefault(e.title),i.identity.firstName=this.getValueOrDefault(e.firstName),i.identity.middleName=this.getValueOrDefault(e.middleName),i.identity.lastName=this.getValueOrDefault(e.lastName),i.identity.phone=this.getValueOrDefault(e.number),i.identity.email=this.getValueOrDefault(e.email),i.identity.address1=this.getValueOrDefault(e.firstAddressLine),i.identity.address2=this.getValueOrDefault(e.secondAddressLine),i.identity.city=this.getValueOrDefault(e.city),i.identity.country=this.getValueOrDefault(e.country),i.identity.postalCode=this.getValueOrDefault(e.zipCode);else{if(void 0===e.content)return;i.secureNote=new re.a,i.type=B.a.SecureNote,i.secureNote.type=ie.Generic,i.name=this.getValueOrDefault(e.title,"--"),i.notes=this.getValueOrDefault(e.content)}this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class ht extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.evaluateType(e);if(void 0===i)return;this.organization||this.processFolder(t,e.folder);const n=new J.a;switch(n.name=this.getValueOrDefault(e.name,"--"),n.notes=this.getValueOrDefault(e.note),i){case B.a.Login:n.type=B.a.Login,n.login=new se.a,n.login.username=this.getValueOrDefault(e.username),n.login.password=this.getValueOrDefault(e.password),n.login.uris=this.makeUriArray(e.url);break;case B.a.Card:n.type=B.a.Card,n.card.cardholderName=this.getValueOrDefault(e.cardholdername),n.card.number=this.getValueOrDefault(e.cardnumber),n.card.code=this.getValueOrDefault(e.cvc),n.card.brand=this.getCardBrand(n.card.number),this.setCardExpiration(n,e.expirydate);break;case B.a.Identity:n.type=B.a.Identity,this.processName(n,this.getValueOrDefault(e.full_name)),n.identity.address1=this.getValueOrDefault(e.address1),n.identity.address2=this.getValueOrDefault(e.address2),n.identity.city=this.getValueOrDefault(e.city),n.identity.state=this.getValueOrDefault(e.state),n.identity.postalCode=this.getValueOrDefault(e.zipcode),n.identity.country=this.getValueOrDefault(e.country),null!=n.identity.country&&(n.identity.country=n.identity.country.toUpperCase()),n.identity.email=this.getValueOrDefault(e.email),n.identity.phone=this.getValueOrDefault(e.phone_number);break;case B.a.SecureNote:n.type=B.a.SecureNote,n.secureNote.type=ie.Generic}this.cleanupCipher(n),t.ciphers.push(n)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}evaluateType(e){return this.isNullOrWhitespace(e.username)?this.isNullOrWhitespace(e.cardnumber)?this.isNullOrWhitespace(e.full_name)?this.isNullOrWhitespace(e.note)?void 0:B.a.SecureNote:B.a.Identity:B.a.Card:B.a.Login}processName(e,t){if(this.isNullOrWhitespace(t))return;const i=t.split(" ");i.length>0&&(e.identity.firstName=this.getValueOrDefault(i[0])),2===i.length?e.identity.lastName=this.getValueOrDefault(i[1]):i.length>=3&&(e.identity.middleName=this.getValueOrDefault(i[1]),e.identity.lastName=i.slice(2,i.length).join(" "))}}var pt=i(237);class gt extends le{constructor(){super(...arguments),this.result=new de}parse(e){return e.split(this.newLineRegex).forEach(e=>{if(this.isNullOrWhitespace(e)||"{"!==e[0])return;const t=JSON.parse(e);if(!0===t.trashed)return;const i=this.initLoginCipher();this.isNullOrWhitespace(t.hmac)?this.processStandardItem(t,i):this.processWinOpVaultItem(t,i),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),this.result.ciphers.push(i)}),this.result.success=!0,Promise.resolve(this.result)}processWinOpVaultItem(e,t){if(null!=e.overview&&(t.name=this.getValueOrDefault(e.overview.title),null!=e.overview.URLs)){const i=[];e.overview.URLs.forEach(e=>{this.isNullOrWhitespace(e.u)||i.push(e.u)}),t.login.uris=this.makeUriArray(i)}null!=e.details&&(null!=e.details.passwordHistory&&this.parsePasswordHistory(e.details.passwordHistory,t),this.isNullOrWhitespace(e.details.ccnum)&&this.isNullOrWhitespace(e.details.cvv)?this.isNullOrWhitespace(e.details.firstname)&&this.isNullOrWhitespace(e.details.address1)||(t.type=B.a.Identity,t.identity=new Pe.a):(t.type=B.a.Card,t.card=new be.a),t.type!==B.a.Login||this.isNullOrWhitespace(e.details.password)||(t.login.password=e.details.password),this.isNullOrWhitespace(e.details.notesPlain)||(t.notes=e.details.notesPlain.split(this.newLineRegex).join("\n")+"\n"),null!=e.details.fields&&this.parseFields(e.details.fields,t,"designation","value","name"),null!=e.details.sections&&e.details.sections.forEach(e=>{null!=e.fields&&this.parseFields(e.fields,t,"n","v","t")}))}processStandardItem(e,t){if(t.favorite=!(!e.openContents||!e.openContents.faveIndex),t.name=this.getValueOrDefault(e.title),"securenotes.SecureNote"===e.typeName?(t.type=B.a.SecureNote,t.secureNote=new re.a,t.secureNote.type=ie.Generic):"wallet.financial.CreditCard"===e.typeName?(t.type=B.a.Card,t.card=new be.a):"identities.Identity"===e.typeName?(t.type=B.a.Identity,t.identity=new Pe.a):t.login.uris=this.makeUriArray(e.location),null!=e.secureContents){if(null!=e.secureContents.passwordHistory&&this.parsePasswordHistory(e.secureContents.passwordHistory,t),this.isNullOrWhitespace(e.secureContents.notesPlain)||(t.notes=e.secureContents.notesPlain.split(this.newLineRegex).join("\n")+"\n"),t.type===B.a.Login&&(this.isNullOrWhitespace(e.secureContents.password)||(t.login.password=e.secureContents.password),null!=e.secureContents.URLs)){const i=[];e.secureContents.URLs.forEach(e=>{this.isNullOrWhitespace(e.url)||i.push(e.url)}),i.length>0&&(t.login.uris=this.makeUriArray(i))}null!=e.secureContents.fields&&this.parseFields(e.secureContents.fields,t,"designation","value","name"),null!=e.secureContents.sections&&e.secureContents.sections.forEach(e=>{null!=e.fields&&this.parseFields(e.fields,t,"n","v","t")})}}parsePasswordHistory(e,t){const i=e.length>5?5:e.length;t.passwordHistory=e.filter(e=>!this.isNullOrWhitespace(e.value)&&null!=e.time).sort((e,t)=>t.time-e.time).slice(0,i).map(e=>{const t=new pt.a;return t.password=e.value,t.lastUsedDate=new Date((""+e.time).length>=13?e.time:1e3*e.time),t})}parseFields(e,t,i,n,s){e.forEach(e=>{if(null==e[n]||""===e[n].toString().trim())return;const r=e[n].toString(),o=null!=e[i]?e[i].toString():null;if(t.type===B.a.Login){if(this.isNullOrWhitespace(t.login.username)&&"username"===o)return void(t.login.username=r);if(this.isNullOrWhitespace(t.login.password)&&"password"===o)return void(t.login.password=r);if(this.isNullOrWhitespace(t.login.totp)&&null!=o&&o.startsWith("TOTP_"))return void(t.login.totp=r)}else if(t.type===B.a.Card){if(this.isNullOrWhitespace(t.card.number)&&"ccnum"===o)return t.card.number=r,void(t.card.brand=this.getCardBrand(r));if(this.isNullOrWhitespace(t.card.code)&&"cvv"===o)return void(t.card.code=r);if(this.isNullOrWhitespace(t.card.cardholderName)&&"cardholder"===o)return void(t.card.cardholderName=r);if(this.isNullOrWhitespace(t.card.expiration)&&"expiry"===o&&6===r.length)return t.card.expMonth=r.substr(4,2),"0"===t.card.expMonth[0]&&(t.card.expMonth=t.card.expMonth.substr(1,1)),void(t.card.expYear=r.substr(0,4));if("type"===o)return}else if(t.type===B.a.Identity){const i=t.identity;if(this.isNullOrWhitespace(i.firstName)&&"firstname"===o)return void(i.firstName=r);if(this.isNullOrWhitespace(i.lastName)&&"lastname"===o)return void(i.lastName=r);if(this.isNullOrWhitespace(i.middleName)&&"initial"===o)return void(i.middleName=r);if(this.isNullOrWhitespace(i.phone)&&"defphone"===o)return void(i.phone=r);if(this.isNullOrWhitespace(i.company)&&"company"===o)return void(i.company=r);if(this.isNullOrWhitespace(i.email)&&"email"===o)return void(i.email=r);if(this.isNullOrWhitespace(i.username)&&"username"===o)return void(i.username=r);if("address"===o){const{street:t,city:s,country:r,zip:o}=e[n];return i.address1=this.getValueOrDefault(t),i.city=this.getValueOrDefault(s),this.isNullOrWhitespace(r)||(i.country=r.toUpperCase()),void(i.postalCode=this.getValueOrDefault(o))}}const c=this.isNullOrWhitespace(e[s])?"no_name":e[s];if("password"===c&&null!=t.passwordHistory&&t.passwordHistory.some(e=>e.password===r))return;const a="concealed"===e.k?oe.a.Hidden:oe.a.Text;this.processKvp(t,c,r,a)})}}class ft{constructor(e,t,i){this.importRecord=e,this.property=t,this.cipher=i,this.lowerProperty=t.toLowerCase()}}const yt=["ainfo","autosubmit","notesplain","ps","scope","tags","title","uuid","notes"];class mt extends le{constructor(){super(...arguments),this.loginPropertyParsers=[this.setLoginUsername,this.setLoginPassword,this.setLoginUris],this.creditCardPropertyParsers=[this.setCreditCardNumber,this.setCreditCardVerification,this.setCreditCardCardholderName,this.setCreditCardExpiry],this.identityPropertyParsers=[this.setIdentityFirstName,this.setIdentityInitial,this.setIdentityLastName,this.setIdentityUserName,this.setIdentityEmail,this.setIdentityPhone,this.setIdentityCompany]}parse(e){const t=new de,i=this.parseCsv(e,!0,{quoteChar:'"',escapeChar:"\\"});return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(this.isNullOrWhitespace(this.getProp(e,"title")))return;const i=this.initLoginCipher();i.name=this.getValueOrDefault(this.getProp(e,"title"),"--"),this.setNotes(e,i),this.setCipherType(e,i);let n=null;for(const t in e){if(!e.hasOwnProperty(t)||this.isNullOrWhitespace(e[t]))continue;const s=new ft(e,t,i);i.type===B.a.Login&&this.setKnownLoginValue(s)||(i.type===B.a.Card&&this.setKnownCreditCardValue(s)||i.type===B.a.Identity&&this.setKnownIdentityValue(s)||(n=this.setUnknownValue(s,n)))}i.type===B.a.Login&&!this.isNullOrWhitespace(n)&&this.isNullOrWhitespace(i.login.username)&&-1===n.indexOf("://")&&(i.login.username=n),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}getProp(e,t){return Object.entries(e).reduce((e,t)=>(e[t[0].toLowerCase()]=t[1],e),{})[t.toLowerCase()]}getPropByRegexp(e,t){const i=Object.keys(e).reduce((e,i)=>(i.match(t)&&e.push(i),e),[]);return 0===i.length?null:e[i[0]]}getPropIncluding(e,t){const i=Object.keys(e).reduce((e,i)=>(i.toLowerCase().includes(t.toLowerCase())&&e.push(i),e),[]);return 0===i.length?null:e[i[0]]}setNotes(e,t){t.notes=this.getValueOrDefault(this.getProp(e,"notesPlain"),"")+"\n"+this.getValueOrDefault(this.getProp(e,"notes"),"")+"\n",t.notes.trim()}setKnownLoginValue(e){return this.loginPropertyParsers.reduce((t,i)=>(t||(t=i.bind(this)(e)),t),!1)}setKnownCreditCardValue(e){return this.creditCardPropertyParsers.reduce((t,i)=>(t||(t=i.bind(this)(e)),t),!1)}setKnownIdentityValue(e){return this.identityPropertyParsers.reduce((t,i)=>(t||(t=i.bind(this)(e)),t),!1)}setUnknownValue(e,t){if(-1===yt.indexOf(e.lowerProperty)&&!e.lowerProperty.startsWith("section:")&&!e.lowerProperty.startsWith("section ")){if(null==t&&"email"===e.lowerProperty)return e.importRecord[e.property];if("created date"===e.lowerProperty||"modified date"===e.lowerProperty){const t=new Date(1e3*parseInt(e.importRecord[e.property],10)).toUTCString();return this.processKvp(e.cipher,"1Password "+e.property,t),null}e.lowerProperty.includes("password")||e.lowerProperty.includes("key")||e.lowerProperty.includes("secret")?this.processKvp(e.cipher,e.property,e.importRecord[e.property],oe.a.Hidden):this.processKvp(e.cipher,e.property,e.importRecord[e.property])}return null}setIdentityFirstName(e){return!(!this.isNullOrWhitespace(e.cipher.identity.firstName)||!e.lowerProperty.includes("first name"))&&(e.cipher.identity.firstName=e.importRecord[e.property],!0)}setIdentityInitial(e){return!(!this.isNullOrWhitespace(e.cipher.identity.middleName)||!e.lowerProperty.includes("initial"))&&(e.cipher.identity.middleName=e.importRecord[e.property],!0)}setIdentityLastName(e){return!(!this.isNullOrWhitespace(e.cipher.identity.lastName)||!e.lowerProperty.includes("last name"))&&(e.cipher.identity.lastName=e.importRecord[e.property],!0)}setIdentityUserName(e){return!(!this.isNullOrWhitespace(e.cipher.identity.username)||!e.lowerProperty.includes("username"))&&(e.cipher.identity.username=e.importRecord[e.property],!0)}setIdentityCompany(e){return!(!this.isNullOrWhitespace(e.cipher.identity.company)||!e.lowerProperty.includes("company"))&&(e.cipher.identity.company=e.importRecord[e.property],!0)}setIdentityPhone(e){return!(!this.isNullOrWhitespace(e.cipher.identity.phone)||!e.lowerProperty.includes("default phone"))&&(e.cipher.identity.phone=e.importRecord[e.property],!0)}setIdentityEmail(e){return!(!this.isNullOrWhitespace(e.cipher.identity.email)||!e.lowerProperty.includes("email"))&&(e.cipher.identity.email=e.importRecord[e.property],!0)}setCreditCardNumber(e){return!(!this.isNullOrWhitespace(e.cipher.card.number)||!e.lowerProperty.includes("number"))&&(e.cipher.card.number=e.importRecord[e.property],e.cipher.card.brand=this.getCardBrand(e.cipher.card.number),!0)}setCreditCardVerification(e){return!(!this.isNullOrWhitespace(e.cipher.card.code)||!e.lowerProperty.includes("verification number"))&&(e.cipher.card.code=e.importRecord[e.property],!0)}setCreditCardCardholderName(e){return!(!this.isNullOrWhitespace(e.cipher.card.cardholderName)||!e.lowerProperty.includes("cardholder name"))&&(e.cipher.card.cardholderName=e.importRecord[e.property],!0)}setCreditCardExpiry(e){return!(!this.isNullOrWhitespace(e.cipher.card.expiration)||!e.lowerProperty.includes("expiry date")||7!==e.importRecord[e.property].length)&&(e.cipher.card.expMonth=e.importRecord[e.property].substr(0,2),"0"===e.cipher.card.expMonth[0]&&(e.cipher.card.expMonth=e.cipher.card.expMonth.substr(1,1)),e.cipher.card.expYear=e.importRecord[e.property].substr(3,4),!0)}setLoginPassword(e){return!(!this.isNullOrWhitespace(e.cipher.login.password)||"password"!==e.lowerProperty)&&(e.cipher.login.password=e.importRecord[e.property],!0)}setLoginUsername(e){return!(!this.isNullOrWhitespace(e.cipher.login.username)||"username"!==e.lowerProperty)&&(e.cipher.login.username=e.importRecord[e.property],!0)}setLoginUris(e){if((null==e.cipher.login.uris||0===e.cipher.login.uris.length)&&"urls"===e.lowerProperty){const t=e.importRecord[e.property].split(this.newLineRegex);return e.cipher.login.uris=this.makeUriArray(t),!0}return"url"===e.lowerProperty&&(null==e.cipher.login.uris&&(e.cipher.login.uris=[]),e.cipher.login.uris.concat(this.makeUriArray(e.importRecord[e.property])),!0)}}i(365);class vt extends mt{setCipherType(e,t){switch(this.getValueOrDefault(this.getProp(e,"type"),"Login")){case"Credit Card":t.type=B.a.Card,t.card=new be.a,yt.push("type");break;case"Identity":t.type=B.a.Identity,t.identity=new Pe.a,yt.push("type");break;case"Login":case"Secure Note":yt.push("type")}}}class bt extends mt{constructor(){super(),this.identityPropertyParsers.push(this.setIdentityAddress)}setCipherType(e,t){t.type=B.a.Login,t.login=new se.a,this.isNullOrWhitespace(this.getPropByRegexp(e,/\d+: number/i))||this.isNullOrWhitespace(this.getPropByRegexp(e,/\d+: expiry date/i))||(t.type=B.a.Card,t.card=new be.a),this.isNullOrWhitespace(this.getPropByRegexp(e,/name \d+: first name/i))&&this.isNullOrWhitespace(this.getPropByRegexp(e,/name \d+: initial/i))&&this.isNullOrWhitespace(this.getPropByRegexp(e,/name \d+: last name/i))&&this.isNullOrWhitespace(this.getPropByRegexp(e,/internet \d+: email/i))||(t.type=B.a.Identity,t.identity=new Pe.a)}setIdentityAddress(e){return!!e.lowerProperty.match(/address \d+: address/i)&&(this.processKvp(e.cipher,"address",e.importRecord[e.property]),!0)}setCreditCardExpiry(e){if(this.isNullOrWhitespace(e.cipher.card.expiration)&&e.lowerProperty.includes("expiry date")){const t=e.importRecord[e.property].split("/");return e.cipher.card.expMonth=t[0],"0"===e.cipher.card.expMonth[0]&&2===e.cipher.card.expMonth.length&&(e.cipher.card.expMonth=e.cipher.card.expMonth.substr(1,1)),e.cipher.card.expYear=t[2].length>4?t[2].substr(0,4):t[2],!0}return!1}}class wt extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);if(null==i)return t.success=!1,Promise.resolve(t);let n=null;return i.forEach(e=>{if(null==n)return void(n=e.map(e=>e));if(e.length<2||e.length!==n.length)return;if(!this.isNullOrWhitespace(e[1]))if(this.organization){e[1].split(",").forEach(e=>{e=e.trim();let i=!0,n=t.collections.length;for(let s=0;s<t.collections.length;s++)if(t.collections[s].name===e){i=!1,n=s;break}if(i){const i=new X;i.name=e,t.collections.push(i)}t.collectionRelationships.push([t.ciphers.length,n])})}else{const i=e[1].split(","),n=i.length>0?i[0].trim():null;this.processFolder(t,n)}const i=this.initLoginCipher();i.name=this.getValueOrDefault(e[0],"--");for(let t=2;t<e.length;t++){const s=n[t].trim().toLowerCase();this.isNullOrWhitespace(e[t])||this.isNullOrWhitespace(s)||(this.usernameFieldNames.indexOf(s)>-1?i.login.username=e[t]:this.passwordFieldNames.indexOf(s)>-1?i.login.password=e[t]:this.uriFieldNames.indexOf(s)>-1?i.login.uris=this.makeUriArray(e[t]):this.processKvp(i,n[t],e[t]))}this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t)}}class Ot extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{this.processFolder(t,this.getValue("category",e));const i=this.initLoginCipher();i.notes=this.getValue("description",e),i.name=this.getValueOrDefault(this.getValue("title",e),"--"),i.login.username=this.getValue("username",e),i.login.password=this.getValue("password",e),i.login.uris=this.makeUriArray(this.getValue("site",e)),this.processKvp(i,"Password 2",this.getValue("password2",e)),this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}getValue(e,t){return this.getValueOrDefault(t[e],this.getValueOrDefault(t[" "+e]))}}class St extends le{parse(e){const t=new de,i=JSON.parse(e);return null==i||0===i.length?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(null!=e.tags&&e.tags.length>0){const i=e.tags[0].text;this.processFolder(t,i)}const i=this.initLoginCipher();i.name=e.label,i.login.username=this.getValueOrDefault(e.username),this.isNullOrWhitespace(i.login.username)?i.login.username=this.getValueOrDefault(e.email):this.isNullOrWhitespace(e.email)||(i.notes="Email: "+e.email+"\n"),i.login.password=this.getValueOrDefault(e.password),i.login.uris=this.makeUriArray(e.url),i.notes+=this.getValueOrDefault(e.description,""),null!=e.otp&&(i.login.totp=this.getValueOrDefault(e.otp.secret)),null!=e.custom_fields&&e.custom_fields.forEach(e=>{switch(e.field_type){case"text":case"password":this.processKvp(i,e.label,e.value)}}),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}class Ct extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.isNullOrWhitespace(e.Tags)?null:JSON.parse(e.Tags),n=null!=i&&null!=i.tags&&i.tags.length>0?i.tags.map(e=>{try{const t=JSON.parse(e);return this.getValueOrDefault(t.tag)}catch(e){}return null}).filter(e=>!this.isNullOrWhitespace(e)):null;this.organization&&null!=n&&n.length>0?n.forEach(e=>{let i=!0,n=t.collections.length;for(let s=0;s<t.collections.length;s++)if(t.collections[s].name===e){i=!1,n=s;break}if(i){const i=new X;i.name=e,t.collections.push(i)}t.collectionRelationships.push([t.ciphers.length,n])}):!this.organization&&null!=n&&n.length>0&&this.processFolder(t,n[0]);const s=this.initLoginCipher();s.notes=this.getValueOrDefault(e.Notes,""),s.notes+="\n\n"+this.getValueOrDefault(e["Shared Notes"],"")+"\n",s.name=this.getValueOrDefault(e["Entry Name"],"--"),s.login.username=this.getValueOrDefault(e["User ID"]),s.login.password=this.getValueOrDefault(e.Password),s.login.uris=this.makeUriArray(e.URL),null!=e.__parsed_extra&&e.__parsed_extra.length>0&&e.__parsed_extra.forEach(e=>{this.isNullOrWhitespace(e)||(s.notes+="\n"+e)});const r=this.isNullOrWhitespace(e["Extra Fields"])?null:JSON.parse(e["Extra Fields"]),o=null!=r&&null!=r.extraFields&&r.extraFields.length>0?r.extraFields.map(e=>{try{return JSON.parse(e)}catch(e){}return null}):null;null!=o&&o.forEach(e=>{null!=e&&this.processKvp(s,e.name,e.data)}),this.cleanupCipher(s),t.ciphers.push(s)}),t.success=!0,Promise.resolve(t))}}class Pt extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);if(null==i)return t.success=!1,Promise.resolve(t);let n=!0;return i.forEach(e=>{if(5!==e.length&&e.length<9)return;const i=10===e.length&&"0"===e[0],s=this.initLoginCipher();if(s.name=this.getValueOrDefault(e[i?1:0],"--"),s.login.username=this.getValueOrDefault(e[i?2:1]),s.login.password=this.getValueOrDefault(e[i?3:2]),5===e.length)n=!1,s.notes=this.getValueOrDefault(e[4]),s.login.uris=this.makeUriArray(e[3]);else{const n=this.getValueOrDefault(e[i?9:8],"(None)");let r="(None)"!==n?n.split("\\").join("/"):null;null!=r&&(r=n.split(" > ").join("/"),r=n.split(">").join("/")),this.processFolder(t,r),s.notes=this.getValueOrDefault(e[i?5:3]),s.login.uris=this.makeUriArray(e[4])}this.convertToNoteIfNeeded(s),this.cleanupCipher(s),t.ciphers.push(s)}),n&&this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}}class xt extends le{parse(e){const t=new de,i=JSON.parse(e);if(null==i||null==i.items)return t.success=!1,Promise.resolve(t);const n=new Map;i.folders.forEach(e=>{n.set(e.id,e.name)});const s=new Map;return n.forEach((e,i)=>{s.set(i,t.folders.length);const n=new te;n.name=e,t.folders.push(n)}),i.items.forEach(e=>{const i=this.initLoginCipher();if(i.name=this.getValueOrDefault(e.name,"--"),i.login.uris=this.makeUriArray(e.login_url),null!=e.folder&&s.has(e.folder)&&t.folderRelationships.push([t.ciphers.length,s.get(e.folder)]),null!=e.identifiers){this.isNullOrWhitespace(e.identifiers.notes)||(i.notes=e.identifiers.notes.split("\\r\\n").join("\n").split("\\n").join("\n")),"CreditCard"===e.type&&(i.card=new be.a,i.type=B.a.Card);for(const t in e.identifiers){if(!e.identifiers.hasOwnProperty(t))continue;const n=e.identifiers[t],s=null!=n?n.toString():null;if(!this.isNullOrWhitespace(s)&&"notes"!==t&&"ignoreItemInSecurityScore"!==t)if("custom_fields"!==t){if(i.type===B.a.Card){if("cardNumber"===t){i.card.number=s,i.card.brand=this.getCardBrand(s);continue}if("nameOnCard"===t){i.card.cardholderName=s;continue}if("security_code"===t){i.card.code=s;continue}if("expires"===t){try{const e=new Date(s);i.card.expYear=e.getFullYear().toString(),i.card.expMonth=(e.getMonth()+1).toString()}catch(e){}continue}if("cardType"===t)continue}else{if(("username"===t||"email"===t)&&this.isNullOrWhitespace(i.login.username)){i.login.username=s;continue}if("password"===t){i.login.password=s;continue}if("totp"===t){i.login.totp=s;continue}if((null==i.login.uris||0===i.login.uris.length)&&this.uriFieldNames.indexOf(t)>-1){i.login.uris=this.makeUriArray(s);continue}}this.processKvp(i,t,s)}else n.forEach(e=>{this.processKvp(i,e.name,e.value)})}this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}}),t.success=!0,Promise.resolve(t)}}class kt extends le{parse(e){const t=new de,i=this.parseXml(e);if(null==i)return t.success=!1,Promise.resolve(t);const n=i.querySelectorAll("PasswordManager > record");return Array.from(n).forEach(e=>{const i=this.querySelectorDirectChild(e,"Category"),n=null==i||this.isNullOrWhitespace(i.textContent)||"Unfiled"===i.textContent?null:i.textContent;this.processFolder(t,n);const s=this.querySelectorDirectChild(e,"Account-Name"),r=this.querySelectorDirectChild(e,"User-Id"),o=this.querySelectorDirectChild(e,"Password"),c=this.querySelectorDirectChild(e,"URL"),a=this.querySelectorDirectChild(e,"Notes"),l=this.initLoginCipher();l.name=null!=s?this.getValueOrDefault(s.textContent,"--"):"--",l.notes=null!=a?this.getValueOrDefault(a.textContent):"",l.login.username=null!=r?this.getValueOrDefault(r.textContent):null,l.login.password=null!=o?this.getValueOrDefault(o.textContent):null,l.login.uris=null!=c?this.makeUriArray(c.textContent):null;const d=[];for(let e=1;e<=10;e++)d.push("Attribute-"+e);this.querySelectorAllDirectChild(e,d.join(",")).forEach(e=>{this.isNullOrWhitespace(e.textContent)||"null"===e.textContent||this.processKvp(l,e.tagName,e.textContent)}),this.cleanupCipher(l),t.ciphers.push(l)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}}class Tt extends le{parse(e){const t=new de,i=this.parseXml(e);if(null==i)return t.success=!1,Promise.resolve(t);const n=i.querySelector("passwordsafe");if(null==n)return t.errorMessage="Missing `passwordsafe` node.",t.success=!1,Promise.resolve(t);const s=n.getAttribute("delimiter"),r=i.querySelectorAll("passwordsafe > entry");return Array.from(r).forEach(e=>{const i=this.querySelectorDirectChild(e,"group"),n=null==i||this.isNullOrWhitespace(i.textContent)?null:i.textContent.split(".").join("/");this.processFolder(t,n);const r=this.querySelectorDirectChild(e,"title"),o=this.querySelectorDirectChild(e,"username"),c=this.querySelectorDirectChild(e,"email"),a=this.querySelectorDirectChild(e,"password"),l=this.querySelectorDirectChild(e,"url"),d=this.querySelectorDirectChild(e,"notes"),u=this.initLoginCipher();u.name=null!=r?this.getValueOrDefault(r.textContent,"--"):"--",u.notes=null!=d?this.getValueOrDefault(d.textContent,"").split(s).join("\n"):null,u.login.username=null!=o?this.getValueOrDefault(o.textContent):null,u.login.password=null!=a?this.getValueOrDefault(a.textContent):null,u.login.uris=null!=l?this.makeUriArray(l.textContent):null,this.isNullOrWhitespace(u.login.username)&&null!=c?u.login.username=this.getValueOrDefault(c.textContent):null==c||this.isNullOrWhitespace(c.textContent)||(u.notes=this.isNullOrWhitespace(u.notes)?"Email: "+c.textContent:u.notes+"\nEmail: "+c.textContent),this.cleanupCipher(u),t.ciphers.push(u)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}}class It extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(e.length<1)return;e.length>5&&this.processFolder(t,e[5]);const i=this.initLoginCipher();i.name=this.getValueOrDefault(e[0],"--"),e.length>4&&(i.notes=this.getValueOrDefault(e[4],"").split("¬").join("\n")),e.length>2&&(i.login.username=this.getValueOrDefault(e[2])),e.length>3&&(i.login.password=this.getValueOrDefault(e[3])),e.length>1&&(i.login.uris=this.makeUriArray(e[1])),this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}}class Dt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if("true"===e.trash)return;const i=this.initLoginCipher();if(i.name=this.getValueOrDefault(e.name),i.notes=this.getValueOrDefault(e.notes),"LoginItem"===e.type)i.login.uris=this.makeUriArray(e.website),i.login.password=this.getValueOrDefault(e.password),i.login.username=this.getValueOrDefault(e.username);else if("CreditCardItem"===e.type){i.type=B.a.Card,i.card=new be.a,i.card.cardholderName=this.getValueOrDefault(e.cardholder),i.card.number=this.getValueOrDefault(e.number),i.card.brand=this.getCardBrand(i.card.number),i.card.code=this.getValueOrDefault(e.verification);try{const t=this.getValueOrDefault(e.expiryMonth);if(null!=t){const e=parseInt(t,null);null!=e&&e>=1&&e<=12&&(i.card.expMonth=e.toString())}}catch(e){}try{const t=this.getValueOrDefault(e.expiryYear);if(null!=t){const e=parseInt(t,null);null!=e&&(i.card.expYear=e.toString())}}catch(e){}const t=this.getValueOrDefault(e.pin);null!=t&&this.processKvp(i,"PIN",t);const n=this.getValueOrDefault(e.zipCode);null!=n&&this.processKvp(i,"Zip Code",n)}this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class At extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);if(null==i)return t.success=!1,Promise.resolve(t);let n=1;return i.forEach(e=>{const s=!this.isNullOrWhitespace(e.Folder)&&e.Folder.startsWith("/")?e.Folder.replace("/",""):e.Folder,r=this.isNullOrWhitespace(s)?null:s;this.processFolder(t,r);const o=this.initLoginCipher();if(o.notes=this.getValueOrDefault(e.Note),o.name=this.getValueOrDefault(e.Name,"--"),o.login.username=this.getValueOrDefault(e.Login),o.login.password=this.getValueOrDefault(e.Pwd),o.login.uris=this.makeUriArray(e.Url),!this.isNullOrWhitespace(e.Rf_fields)){let t=[e.Rf_fields];null!=e.__parsed_extra&&e.__parsed_extra.length>0&&(t=t.concat(e.__parsed_extra)),t.forEach(e=>{const t=e.split(":");if(t.length<3)return;const i="-no-name-"===t[0]?null:t[0],n=4===t.length&&"rck"===t[2]?t[1]:t[2];this.processKvp(o,i,n)})}this.convertToNoteIfNeeded(o),this.cleanupCipher(o),n===i.length&&"--"===o.name&&this.isNullOrWhitespace(o.login.password)||(t.ciphers.push(o),n++)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}}var Mt,zt=i(55),Et=i(64);!function(e){e[e.Authenticator=0]="Authenticator",e[e.Email=1]="Email",e[e.Duo=2]="Duo",e[e.Yubikey=3]="Yubikey",e[e.U2f=4]="U2f",e[e.Remember=5]="Remember",e[e.OrganizationDuo=6]="OrganizationDuo",e[e.WebAuthn=7]="WebAuthn"}(Mt||(Mt={}));var Ut=i(92);class Nt extends le{parse(e){const t=new de,i=this.parseXml(e);if(null==i)return t.success=!1,Promise.resolve(t);if(null==i.querySelector("database"))return t.errorMessage="Missing `database` node.",t.success=!1,Promise.resolve(t);const n=new Map;return Array.from(i.querySelectorAll("database > label")).forEach(e=>{const i=e.getAttribute("name"),s=e.getAttribute("id");if(!this.isNullOrWhitespace(i)&&!this.isNullOrWhitespace(s)){n.set(s,t.folders.length);const e=new te;e.name=i,t.folders.push(e)}}),Array.from(i.querySelectorAll("database > card")).forEach(e=>{if("true"===e.getAttribute("template")||"true"===e.getAttribute("deleted"))return;const i=this.querySelectorDirectChild(e,"label_id");if(null!=i){const e=i.textContent;!this.isNullOrWhitespace(e)&&n.has(e)&&t.folderRelationships.push([t.ciphers.length,n.get(e)])}const s=this.initLoginCipher();s.name=this.getValueOrDefault(e.getAttribute("title"),"--"),"true"===e.getAttribute("star")&&(s.favorite=!0);"note"===e.getAttribute("type")?(s.type=B.a.SecureNote,s.secureNote=new re.a,s.secureNote.type=ie.Generic):Array.from(this.querySelectorAllDirectChild(e,"field")).forEach(e=>{const t=e.textContent;if(this.isNullOrWhitespace(t))return;const i=e.getAttribute("name"),n=this.getValueOrDefault(e.getAttribute("type"),"").toLowerCase();"login"===n?s.login.username=t:"password"===n||"secret"===n?this.processKvp(s,i,t,oe.a.Hidden):"one_time_password"===n?s.login.totp=t:"notes"===n?s.notes+=t+"\n":"weblogin"===n||"website"===n?s.login.uris=this.makeUriArray(t):this.processKvp(s,i,t)}),Array.from(this.querySelectorAllDirectChild(e,"notes")).forEach(e=>{s.notes+=e.textContent+"\n"}),this.setPassword(s),this.cleanupCipher(s),t.ciphers.push(s)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}setPassword(e){const t=e.fields.filter(e=>e.type===oe.a.Hidden);if(!t.length)return;let i;for(const n of t)if(this.passwordFieldNames.includes(n.name.toLowerCase())){i=n,e.fields=e.fields.filter(e=>e!==i);break}i||(i=t[0]),e.login.password=i.value}}class Rt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(this.nameFromUrl(e.url),"--"),i.notes=this.getValueOrDefault(e.notes),i.login.username=this.getValueOrDefault(e.username),i.login.password=this.getValueOrDefault(e.password),i.login.uris=this.makeUriArray(e.url),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class Ft extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.Title),i.notes=this.getValueOrDefault(e.Comment),i.login.uris=this.makeUriArray(e.Url),i.login.password=this.getValueOrDefault(e.Password),i.login.username=this.getValueOrDefault(e.Username),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class Qt extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(e.length<3)return;this.processFolder(t,this.getValueOrDefault(e[e.length-1]));const i=this.initLoginCipher();i.notes=this.getValueOrDefault(e[e.length-2],""),i.name=this.getValueOrDefault(e[1],"--"),"Web Logins"===e[0]||"Servers"===e[0]||"Email Accounts"===e[0]?(i.login.username=this.getValueOrDefault(e[2]),i.login.password=this.getValueOrDefault(e[3]),i.login.uris=this.makeUriArray(e[4]),this.parseFieldsToNotes(i,5,e)):this.parseFieldsToNotes(i,2,e),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}parseFieldsToNotes(e,t,i){for(let n=t;n<i.length-3;n++)this.isNullOrWhitespace(i[n])||(e.notes+=i[n]+"\n")}}class Vt extends le{parse(e){const t=new de,i=this.parseXml(e);if(null==i)return t.success=!1,Promise.resolve(t);const n=i.querySelectorAll("root > Database > Logins > Login");return Array.from(n).forEach(e=>{const n=e.getAttribute("ID");if(this.isNullOrWhitespace(n))return;const s=e.getAttribute("Name"),r=e.getAttribute("Password");let o=null,c=null,a=null,l=null,d=null;const u=i.querySelector('root > Database > Accounts > Account > LoginLinks > Login[SourceLoginID="'+n+'"]');if(null!=u){const e=u.parentElement.parentElement;null!=e&&(o=e.getAttribute("Name"),c=e.getAttribute("Link"),l=e.getAttribute("ParentID"),a=e.getAttribute("Comments"),this.isNullOrWhitespace(a)||(a=a.split("/n").join("\n")))}this.isNullOrWhitespace(l)||(d=this.buildGroupText(i,l,""),this.processFolder(t,d));const h=this.initLoginCipher();h.name=this.getValueOrDefault(o,"--"),h.notes=this.getValueOrDefault(a),h.login.username=this.getValueOrDefault(s),h.login.password=this.getValueOrDefault(r),h.login.uris=this.makeUriArray(c),this.cleanupCipher(h),t.ciphers.push(h)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t)}buildGroupText(e,t,i){const n=e.querySelector('root > Database > Groups > Group[ID="'+t+'"]');return null==n?i:(this.isNullOrWhitespace(i)||(i="/"+i),i=n.getAttribute("Name")+i,this.buildGroupText(e,n.getAttribute("ParentID"),i))}}const Bt=["kind","autologin","favorite","hexcolor","protectedwithpassword","subdomainonly","type","tk_export_version","note","title","document_content"];class Lt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();if(i.favorite="true"===this.getValueOrDefault(e.favorite,"").toLowerCase(),i.name=this.getValueOrDefault(e.name,"--"),i.notes=this.getValueOrDefault(e.memo,""),i.login.username=this.getValueOrDefault(e.login),i.login.password=this.getValueOrDefault(e.password),i.login.uris=this.makeUriArray(e.url),"login"!==e.kind&&(i.name=this.getValueOrDefault(e.title,"--"),i.notes=this.getValueOrDefault(e.note,"")),"cc"===e.kind){if(i.type=B.a.Card,i.card=new be.a,i.card.cardholderName=this.getValueOrDefault(e.cardholder),i.card.number=this.getValueOrDefault(e.number),i.card.brand=this.getCardBrand(i.card.number),!this.isNullOrWhitespace(e.expiryDate))try{const t=new Date(e.expiryDate);i.card.expYear=t.getFullYear().toString(),i.card.expMonth=(t.getMonth()+1).toString()}catch(e){}}else if("login"!==e.kind){i.type=B.a.SecureNote,i.secureNote=new re.a,i.secureNote.type=ie.Generic,this.isNullOrWhitespace(i.notes)||(i.notes=this.getValueOrDefault(e.document_content,""));for(const t in e)e.hasOwnProperty(t)&&Bt.indexOf(t.toLowerCase())<0&&!this.isNullOrWhitespace(e[t])&&this.processKvp(i,t,e[t])}this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class _t extends le{parse(e){const t=new de,i=this.parseCsv(e,!1);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(5!==e.length)return;const i=this.initLoginCipher();i.name=this.getValueOrDefault(e[0],"--"),i.notes=this.getValueOrDefault(e[4]),i.login.username=this.getValueOrDefault(e[1]),i.login.password=this.getValueOrDefault(e[2]),i.login.uris=this.makeUriArray(e[3]),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class jt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{const i=this.initLoginCipher();i.name=this.getValueOrDefault(e.Name,"--"),i.login.username=this.getValueOrDefault(e["User name"]),i.login.password=this.getValueOrDefault(e.Password),i.login.uris=this.makeUriArray(e.URL),this.cleanupCipher(i),t.ciphers.push(i)}),t.success=!0,Promise.resolve(t))}}class Kt extends le{parse(e){const t=new de,i=this.parseCsv(e,!0);return null==i?(t.success=!1,Promise.resolve(t)):(i.forEach(e=>{if(this.isNullOrWhitespace(e["Password Name"])&&this.isNullOrWhitespace(e["Secret Name"]))return;this.processFolder(t,this.getValueOrDefault(e.ChamberName));const i=this.initLoginCipher();i.favorite="1"===this.getValueOrDefault(e.Favorite,"0"),i.notes=this.getValueOrDefault(e.Notes),i.name=this.getValueOrDefault(e["Password Name"],this.getValueOrDefault(e["Secret Name"],"--")),i.login.uris=this.makeUriArray(this.getValueOrDefault(e["Password URL"],this.getValueOrDefault(e["Secret URL"]))),this.parseData(i,e.SecretData),this.parseData(i,e.CustomData),this.convertToNoteIfNeeded(i),this.cleanupCipher(i),t.ciphers.push(i)}),this.organization&&this.moveFoldersToCollections(t),t.success=!0,Promise.resolve(t))}parseData(e,t){if(this.isNullOrWhitespace(t))return;this.splitNewLine(t).forEach(t=>{const i=t.indexOf(":");if(i<0)return;const n=t.substring(0,i),s=t.length>i?t.substring(i+1):null;if(this.isNullOrWhitespace(n)||this.isNullOrWhitespace(s)||"SecretType"===n)return;const r=n.toLowerCase();null==e.login.username&&this.usernameFieldNames.indexOf(r)>-1?e.login.username=s:null==e.login.password&&this.passwordFieldNames.indexOf(r)>-1?e.login.password=s:this.processKvp(e,n,s)})}}var Ht=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Wt{constructor(e,t,i,n,s,r,o){this.cipherService=e,this.folderService=t,this.apiService=i,this.i18nService=n,this.collectionService=s,this.platformUtilsService=r,this.cryptoService=o,this.featuredImportOptions=[{id:"bitwardenjson",name:"Bitwarden (json)"},{id:"bitwardencsv",name:"Bitwarden (csv)"},{id:"lastpasscsv",name:"LastPass (csv)"},{id:"chromecsv",name:"Chrome (csv)"},{id:"firefoxcsv",name:"Firefox (csv)"},{id:"keepass2xml",name:"KeePass 2 (xml)"},{id:"1password1pif",name:"1Password (1pif)"},{id:"dashlanejson",name:"Dashlane (json)"}],this.regularImportOptions=[{id:"keepassxcsv",name:"KeePassX (csv)"},{id:"1passwordwincsv",name:"1Password 6 and 7 Windows (csv)"},{id:"1passwordmaccsv",name:"1Password 6 and 7 Mac (csv)"},{id:"roboformcsv",name:"RoboForm (csv)"},{id:"keepercsv",name:"Keeper (csv)"},{id:"enpasscsv",name:"Enpass (csv)"},{id:"enpassjson",name:"Enpass (json)"},{id:"safeincloudxml",name:"SafeInCloud (xml)"},{id:"pwsafexml",name:"Password Safe (xml)"},{id:"stickypasswordxml",name:"Sticky Password (xml)"},{id:"msecurecsv",name:"mSecure (csv)"},{id:"truekeycsv",name:"True Key (csv)"},{id:"passwordbossjson",name:"Password Boss (json)"},{id:"zohovaultcsv",name:"Zoho Vault (csv)"},{id:"splashidcsv",name:"SplashID (csv)"},{id:"passworddragonxml",name:"Password Dragon (xml)"},{id:"padlockcsv",name:"Padlock (csv)"},{id:"passboltcsv",name:"Passbolt (csv)"},{id:"clipperzhtml",name:"Clipperz (html)"},{id:"aviracsv",name:"Avira (csv)"},{id:"saferpasscsv",name:"SaferPass (csv)"},{id:"upmcsv",name:"Universal Password Manager (csv)"},{id:"ascendocsv",name:"Ascendo DataVault (csv)"},{id:"meldiumcsv",name:"Meldium (csv)"},{id:"passkeepcsv",name:"PassKeep (csv)"},{id:"operacsv",name:"Opera (csv)"},{id:"vivaldicsv",name:"Vivaldi (csv)"},{id:"gnomejson",name:"GNOME Passwords and Keys/Seahorse (json)"},{id:"blurcsv",name:"Blur (csv)"},{id:"passwordagentcsv",name:"Password Agent (csv)"},{id:"passpackcsv",name:"Passpack (csv)"},{id:"passmanjson",name:"Passman (json)"},{id:"avastcsv",name:"Avast Passwords (csv)"},{id:"avastjson",name:"Avast Passwords (json)"},{id:"fsecurefsk",name:"F-Secure KEY (fsk)"},{id:"kasperskytxt",name:"Kaspersky Password Manager (txt)"},{id:"remembearcsv",name:"RememBear (csv)"},{id:"passwordwallettxt",name:"PasswordWallet (txt)"},{id:"mykicsv",name:"Myki (csv)"},{id:"securesafecsv",name:"SecureSafe (csv)"},{id:"logmeoncecsv",name:"LogMeOnce (csv)"},{id:"blackberrycsv",name:"BlackBerry Password Keeper (csv)"},{id:"buttercupcsv",name:"Buttercup (csv)"},{id:"codebookcsv",name:"Codebook (csv)"},{id:"encryptrcsv",name:"Encryptr (csv)"},{id:"yoticsv",name:"Yoti (csv)"},{id:"nordpasscsv",name:"Nordpass (csv)"}]}getImportOptions(){return this.featuredImportOptions.concat(this.regularImportOptions)}import(e,t,i=null){return Ht(this,void 0,void 0,(function*(){const n=yield e.parse(t);if(n.success){if(0===n.folders.length&&0===n.ciphers.length)return new Error(this.i18nService.t("importNothingError"));if(n.ciphers.length>0){const e=Math.floor(n.ciphers.length/2),t=n.ciphers.length-1;if(this.badData(n.ciphers[0])&&this.badData(n.ciphers[e])&&this.badData(n.ciphers[t]))return new Error(this.i18nService.t("importFormatError"))}try{yield this.postImport(n,i)}catch(e){const t=new q.a(e,400);return this.handleServerError(t,n)}return null}return Q.a.isNullOrWhitespace(n.errorMessage)?new Error(this.i18nService.t("importFormatError")):new Error(n.errorMessage)}))}getImporter(e,t=null){const i=this.getImporterInstance(e);return null==i?null:(i.organizationId=t,i)}getImporterInstance(e){if(null==e||""===e)return null;switch(e){case"bitwardencsv":return new ye;case"bitwardenjson":return new Le(this.cryptoService,this.i18nService);case"lastpasscsv":case"passboltcsv":return new ct;case"keepassxcsv":return new rt;case"aviracsv":return new ge;case"blurcsv":return new je;case"safeincloudxml":return new Nt;case"padlockcsv":return new wt;case"keepass2xml":return new st;case"chromecsv":case"operacsv":case"vivaldicsv":return new We;case"firefoxcsv":return new et;case"upmcsv":return new _t;case"saferpasscsv":return new Rt;case"meldiumcsv":return new lt;case"1password1pif":return new gt;case"1passwordwincsv":return new bt;case"1passwordmaccsv":return new vt;case"keepercsv":return new ot;case"passworddragonxml":return new kt;case"enpasscsv":return new Xe;case"enpassjson":return new Ze;case"pwsafexml":return new Tt;case"dashlanejson":return new Ye;case"msecurecsv":return new dt;case"stickypasswordxml":return new Vt;case"truekeycsv":return new Lt;case"clipperzhtml":return new qe;case"roboformcsv":return new At;case"ascendocsv":return new ue;case"passwordbossjson":return new xt;case"zohovaultcsv":return new Kt;case"splashidcsv":return new Qt;case"passkeepcsv":return new Ot;case"gnomejson":return new it;case"passwordagentcsv":return new Pt;case"passpackcsv":return new Ct;case"passmanjson":return new St;case"avastcsv":return new he;case"avastjson":return new pe;case"fsecurefsk":return new tt;case"kasperskytxt":return new nt;case"remembearcsv":return new Dt;case"passwordwallettxt":return new It;case"mykicsv":return new ut;case"securesafecsv":return new Ft;case"logmeoncecsv":return new at;case"blackberrycsv":return new _e;case"buttercupcsv":return new He;case"codebookcsv":return new Ge;case"encryptrcsv":return new $e;case"yoticsv":return new jt;case"nordpasscsv":return new ht;default:return null}}postImport(e,t=null){return Ht(this,void 0,void 0,(function*(){if(null==t){const t=new K;for(let i=0;i<e.ciphers.length;i++){const n=yield this.cipherService.encrypt(e.ciphers[i]);t.ciphers.push(new L.a(n))}if(null!=e.folders)for(let i=0;i<e.folders.length;i++){const n=yield this.folderService.encrypt(e.folders[i]);t.folders.push(new j(n))}return null!=e.folderRelationships&&e.folderRelationships.forEach(e=>t.folderRelationships.push(new W(e[0],e[1]))),yield this.apiService.postImportCiphers(t)}{const i=new H;for(let n=0;n<e.ciphers.length;n++){e.ciphers[n].organizationId=t;const s=yield this.cipherService.encrypt(e.ciphers[n]);i.ciphers.push(new L.a(s))}if(null!=e.collections)for(let n=0;n<e.collections.length;n++){e.collections[n].organizationId=t;const s=yield this.collectionService.encrypt(e.collections[n]);i.collections.push(new _(s))}return null!=e.collectionRelationships&&e.collectionRelationships.forEach(e=>i.collectionRelationships.push(new W(e[0],e[1]))),yield this.apiService.postImportOrganizationCiphers(t,i)}}))}badData(e){return(null==e.name||"--"===e.name)&&e.type===B.a.Login&&null!=e.login&&Q.a.isNullOrWhitespace(e.login.password)}handleServerError(e,t){if(null==e.validationErrors)return new Error(e.message);let i="";return Object.entries(e.validationErrors).forEach(([e,n],s)=>{let r,o;const c=Number(e.match(/[0-9]+/)[0]);switch(e.match(/^\w+/)[0]){case"Ciphers":r=t.ciphers[c],o=B.a[r.type];break;case"Folders":r=t.folders[c],o="Folder";break;case"Collections":r=t.collections[c],o="Collection";break;default:return}s>0&&(i+="\n\n"),"Folder"!==o&&"Collection"!==o&&(i+="["+(c+1)+"] "),i+="["+o+'] "'+r.name+'": '+n}),new Error(i)}}var qt=i(1382),Gt=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Jt{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p){this.clientService=e,this.apiService=t,this.environmentService=i,this.authService=n,this.syncService=s,this.cryptoService=r,this.cipherService=o,this.userService=c,this.collectionService=a,this.passwordGenerationService=l,this.vaultTimeoutService=d,this.folderService=u,this.i18nService=h,this.platformUtilsService=p,this.rootDomID=""}ngOnInit(){this.rootDomID=qt.a()}ngOnChanges(){this.renderReactIfMounted()}ngAfterViewInit(){this.renderReactIfMounted()}ngOnDestroy(){}getReactWrapperProps(e=!1){return Gt(this,void 0,void 0,(function*(){const t=this.clientService.GetClient();return{client:t,bitwardenData:{extension_installed:!e||(yield this.fetchHintExists(t))},vaultData:this.getVaultData()}}))}getVaultData(){const e=new Wt(this.cipherService,this.folderService,this.apiService,this.i18nService,this.collectionService,this.platformUtilsService,this.cryptoService),t=new V(this.cryptoService);return{apiService:this.apiService,environmentService:this.environmentService,authService:this.authService,syncService:this.syncService,cryptoService:this.cryptoService,cipherService:this.cipherService,userService:this.userService,collectionService:this.collectionService,passwordGenerationService:this.passwordGenerationService,containerService:t,vaultTimeoutService:this.vaultTimeoutService,importService:e,utils:Q.a}}fetchHintExists(e){return Gt(this,void 0,void 0,(function*(){try{return yield e.getStackClient().collection("io.cozy.settings").get("hint"),!0}catch(e){return!1}}))}getRootDomNode(){const e=document.getElementById(this.rootDomID);return F(e,`Node '${this.rootDomID} not found!`),e}renderReact(){throw new Error("should be overridden")}renderReactIfMounted(){this.isMounted()&&this.renderReact()}isMounted(){return!!this.rootDomID}}Jt.ɵfac=function(e){return new(e||Jt)(n.cc(y),n.cc(O),n.cc(k),n.cc(S),n.cc(M),n.cc(x.a),n.cc(C),n.cc(z.a),n.cc(P),n.cc(D),n.cc(E.a),n.cc(T),n.cc(I.a),n.cc(A.a))},Jt.ɵcmp=n.Wb({type:Jt,selectors:[["ng-component"]],features:[n.Ob],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Jt,[{type:n.l,args:[{templateUrl:"./angular-wrapper.component.html",encapsulation:n.gb.None}]}],(function(){return[{type:y},{type:O},{type:k},{type:S},{type:M},{type:x.a},{type:C},{type:z.a},{type:P},{type:D},{type:E.a},{type:T},{type:I.a},{type:A.a}]}),null);var Yt,$t=i(4),Xt=i.n($t),Zt=i(29),ei=i.n(Zt),ti=i(2),ii=i.n(ti),ni=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))},si=Object(U.createContext)(),ri=(h()("passwords.force-vault-unconfigured"),i(91)),oi=i(36),ci=i(1385),ai=i(1373),li=i(1374),di=i(1321),ui=i(17),hi=i.n(ui),pi=i(58),gi=i(76),fi=i(83),yi=i(797),mi=i(42),vi=i(94),bi=cozy.bar.BarCenter,wi=function(){var e=Object(U.useState)("Yannick"),t=ei()(e,2),i=t[0];return(0,t[1])("Yannick Cihron"),N.a.createElement("div",null,i)},Oi=function(e){e.children;return Object(vi.b)().isMobile?N.a.createElement(bi,null,N.a.createElement(wi,null)):null},Si=i(221),Ci=i(796),Pi=i(795),xi=i(395),ki=i.p+"images/import-passwords.svg",Ti=i(126),Ii=i.n(Ti),Di=i(539),Ai={insert:"head",singleton:!1},Mi=(Ii()(Di.a,Ai),Di.a.locals,function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i}),zi=function(e){var t=e.className,i=Mi(e,["className"]);return N.a.createElement("div",{className:hi()("CircleIcon",t)},N.a.createElement(mi.a,i))},Ei=i(12),Ui=i.n(Ei),Ni=i(540),Ri={insert:"head",singleton:!1},Fi=(Ii()(Ni.a,Ri),Ni.a.locals,function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i}),Qi=function(e){var t=e.className,i=Fi(e,["className"]);return N.a.createElement("div",Ui()({className:hi()("Wrapper",t)},i))},Vi={chrome:{id:"chrome",type:"browser",label:"Google Chrome",storeUrl:"https://chrome.google.com/webstore/detail/cozy-personal-cloud/jplochopoaajoochpoccajmgelpfbbic"},"edge-chromium":{id:"edge-chromium",type:"browser",label:"Edge",storeUrl:"https://chrome.google.com/webstore/detail/cozy-personal-cloud/jplochopoaajoochpoccajmgelpfbbic"},firefox:{id:"firefox",type:"browser",label:"Mozilla Firefox",storeUrl:"https://addons.mozilla.org/en-US/firefox/addon/cozy-personal-cloud"},safari:{id:"safari",type:"browser",label:"Safari",storeUrl:"macappstore://itunes.apple.com/app/id1504487449?mt=12"},ios:{id:"ios",type:"os",os:"ios",storeUrl:"https://apps.apple.com/fr/app/cozy-pass/id1502262449"},android:{id:"android",type:"os",os:"android",storeUrl:"https://play.google.com/store/apps/details?id=io.cozy.pass"}},Bi=function(){return Vi},Li=Bi,_i=i(280),ji=i(532),Ki=i.n(ji),Hi={ios:"iOS"},Wi=Object(_i.a)(),qi=(Yt=Wi.name,Hi[Yt]||Ki()(Yt)),Gi=function(){return!h()("passwords.force-unsupported-platform")&&(e=Wi.name,t=Bi(),i=e.trim().toLowerCase(),Object.keys(t).includes(i));var e,t,i},Ji=i(790),Yi=i(791),$i=i(792),Xi=i(793),Zi=i.p+"images/store_chrome.svg",en=i.p+"images/store_safari.svg",tn=i.p+"images/store_firefox.svg",nn={safari:Ji.a,firefox:Yi.a,chrome:$i.a,"edge-chromium":Xi.a},sn={chrome:Zi,safari:en,firefox:tn,"edge-chromium":Zi},rn=nn,on=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i},cn=function(e){var t=e.className,i=on(e,["className"]);return N.a.createElement("div",Ui()({className:hi()("u-pv-2","u-mt-auto","u-mb-auto",t)},i))},an=function(){var e=Object(oi.e)().t;return N.a.createElement(Si.b,null,N.a.createElement(zi,{icon:Pi.a,size:32,color:"var(--slateGrey)"}),N.a.createElement(fi.d,{tag:"p"},e("PresentationStep.item1")))},ln=function(){var e=Object(oi.e)().t;return N.a.createElement(Si.b,null,N.a.createElement(zi,{icon:Ci.a,size:32,color:"var(--slateGrey)"}),N.a.createElement(fi.d,{tag:"p"},e("PresentationStep.item2")))},dn=function(){var e=Object(oi.e)().t;return N.a.createElement(Si.b,null,N.a.createElement(zi,{icon:xi.a,size:32,color:"var(--slateGrey)"}),N.a.createElement(fi.d,{tag:"p"},e("PresentationStep.item3")))},un=function(){var e=Object(oi.e)().t,t=Li();return N.a.createElement(yi.a,{className:"u-ta-left",theme:"danger",description:N.a.createElement(N.a.Fragment,null,N.a.createElement(fi.c,{className:"u-pomegranate"},e("PresentationStep.notSupportedInfos.title",{browser:qi})),N.a.createElement(fi.d,null,e("PresentationStep.notSupportedInfos.description",{browser:qi}))),action:Object.entries(t).filter((function(e){return"browser"===ei()(e,2)[1].type})).map((function(e,t){var i=ei()(e,2),n=i[0],s=i[1];return N.a.createElement(pi.b,{key:n,href:s.storeUrl,icon:N.a.createElement(mi.a,{icon:rn[n],size:16,color:"var(--slateGrey)"}),theme:"secondary",label:s.label,className:hi()({"u-ml-0":0===t})})}))})},hn=function(e){var t=e.onLetsGo,i=Object(oi.e)().t;return N.a.createElement(cn,null,N.a.createElement(Oi,null,i("Nav.presentation")),N.a.createElement(Qi,null,N.a.createElement(gi.a,null,N.a.createElement("img",{src:ki,alt:"",height:191}),N.a.createElement(Si.e,null,N.a.createElement(Si.d,{className:"u-mb-0"},i("PresentationStep.title")),N.a.createElement(fi.d,{className:"u-mb-3",tag:"p"},i("PresentationStep.description")),N.a.createElement(Si.c,{className:"u-mb-2"},N.a.createElement(an,null),N.a.createElement(ln,null),N.a.createElement(dn,null)),Gi()?N.a.createElement(Si.a,null,N.a.createElement(pi.c,{onClick:t,label:i("PresentationStep.cta"),extension:"full"})):N.a.createElement(un,null)))))},pn=i(440),gn=i(120),fn=i(243),yn=i(554),mn=i(244),vn=i(199),bn=i.p+"images/strong-password.svg",wn=i(57),On=i.n(wn),Sn=function(e){return!!h()("passwords.oidc-auth")||On()(e,"capabilities.can_auth_with_oidc")},Cn=N.a.createContext({canAuthWithOIDC:!1,isVaultConfigured:!1,hasHint:!1}),Pn=Cn,xn=i(322),kn=function(e,t){var i=new URL(t.getStackClient().uri),n=t.getInstanceOptions().subdomain;return Object(xn.b)({cozyUrl:i.origin,slug:e,subDomainType:n})},Tn=i(325),In=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i},Dn=function(e){var t=e.successRoute,i=e.cancelRoute,n=e.Component,s=In(e,["successRoute","cancelRoute","Component"]),r=Object(l.useClient)(),o=kn("settings",r),c=kn("passwords",r),a=new URL(t,c).href,d=new URL(i,c).href,u="?redirect_success=".concat(encodeURIComponent(a),"&redirect_cancel=").concat(encodeURIComponent(d)),h=new URL("#/profile/password"+u,o).href;return N.a.createElement(Tn.a,{slug:"settings",href:h},(function(e){var t=e.onClick,i=e.href;return N.a.createElement(n,Ui()({href:i,onClick:t},s))}))};Dn.defaultProps={Component:pi.b};var An=Dn,Mn=i(11),zn=i.n(Mn),En=i(131),Un=i(552),Nn=i(293),Rn=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))},Fn=window;function Qn(e){var t=new Uint8Array(e);return Fn.crypto.getRandomValues(t),t.buffer}function Vn(e){for(var t="",i=new Uint8Array(e),n=0;n<i.byteLength;n++)t+=String.fromCharCode(i[n]);return Fn.btoa(t)}function Bn(e){var t=Fn.crypto.subtle,i=Qn(64),n=Qn(16);return t.importKey("raw",e,{name:"AES-CBC"},!1,["encrypt"]).then((function(e){return t.encrypt({name:"AES-CBC",iv:n},e,i)})).then((function(e){var t=Vn(n),s=Vn(e);return{cipherString:"0.".concat(t,"|").concat(s),key:i}}))}function Ln(e){var t,i,n,s=Fn.crypto.subtle,r=e.slice(0,32),o=e.slice(32,64),c=Qn(16),a={name:"RSA-OAEP",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:{name:"SHA-1"}},l={name:"HMAC",hash:"SHA-256"};return s.generateKey(a,!0,["encrypt","decrypt"]).then((function(e){var t=s.exportKey("spki",e.publicKey),i=s.exportKey("pkcs8",e.privateKey);return Promise.all([t,i])})).then((function(e){return t=e[0],i=e[1],s.importKey("raw",r,{name:"AES-CBC"},!1,["encrypt"])})).then((function(e){return s.encrypt({name:"AES-CBC",iv:c},e,i)})).then((function(e){return n=e,s.importKey("raw",o,l,!1,["sign"])})).then((function(e){var t=new Uint8Array(c.byteLength+n.byteLength);return t.set(new Uint8Array(c),0),t.set(new Uint8Array(n),c.byteLength),s.sign(l,e,t)})).then((function(e){var i=Vn(t),s=Vn(c),r=Vn(n),o=Vn(e);return{publicKey:i,privateKey:"2.".concat(s,"|").concat(r,"|").concat(o)}}))}var _n=function(e,t,i){return Rn(void 0,void 0,void 0,ii.a.mark((function n(){var s,r,o,c,a,l,d;return ii.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,e.stackClient.fetchJSON("POST","/bitwarden/api/accounts/prelogin");case 2:return s=n.sent,r=s.Kdf,0===(o=s.KdfIterations)&&(o=1e5),n.next=8,t.computeMasterKey(i,o,r);case 8:return c=n.sent,n.next=11,t.computeHashedPassword(i,c);case 11:return a=n.sent,n.next=14,Bn(c.encKey);case 14:return l=n.sent,n.next=17,Ln(l.key);case 17:return d=n.sent,n.next=20,e.stackClient.fetchJSON("PUT","/settings/passphrase",{new_passphrase:a,key:l.cipherString,publicKey:d.publicKey,privateKey:d.privateKey,iterations:o,force:!0});case 20:case"end":return n.stop()}}),n)})))},jn=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))},Kn=function(e){var t=e.onSuccess,i=Object(oi.e)().t,n=Object(l.useClient)(),s=Object(Nn.b)();window.vaultClient=s;var r=Object(U.useState)((function(){return{passphrase:"",passphraseRepeat:""}})),o=ei()(r,2),c=o[0],a=o[1],d=c.passphrase,u=Object(U.useState)(!1),h=ei()(u,2),p=h[0],g=h[1],f=Object(U.useState)(!1),y=ei()(f,2),m=y[0],v=y[1],b=Object(U.useCallback)((function(e){var t=e.target,i=t.value,n=t.name;a((function(e){return Object.assign(Object.assign({},e),zn()({},n,i))})),g(!0)}),[a]),w=Object(U.useCallback)((function(){return jn(void 0,void 0,void 0,ii.a.mark((function e(){return ii.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return v(!0),e.prev=1,e.next=4,_n(n,s,d);case 4:t(),e.next=14;break;case 7:throw e.prev=7,e.t0=e.catch(1),console.error(e.t0),console.warn("Error while setting passphrase"),En.a.error(i("SecurityStepOIDC.passphrase.error-setting-passphrase")),v(!1),e.t0;case 14:case"end":return e.stop()}}),e,null,[[1,7]])})))}),[n,s,d,t,i]),O=c.passphrase===c.passphraseRepeat;return N.a.createElement(gi.a,{spacing:"xs"},N.a.createElement(Un.a,{name:"passphrase",autoComplete:"new-password",id:"new-passphrase",placeholder:i("SecurityStepOIDC.passphrase.placeholder"),value:c.passphrase,onChange:b,showStrength:!0,error:p&&!O}),N.a.createElement(Un.a,{name:"passphraseRepeat",autoComplete:"new-password",id:"new-passphrase-repeat",placeholder:i("SecurityStepOIDC.passphrase.confirmationPlaceholder"),value:c.passphraseRepeat,onChange:b,error:p&&!O}),N.a.createElement(pi.c,{theme:"primary",extension:"full",label:i("SecurityStepOIDC.next-step"),disabled:!O||""===c.passphrase,onClick:w,busy:m}))},Hn=function(e){var t=e.onSkip,i=Object(oi.e)().t;return N.a.createElement(cn,null,N.a.createElement(Qi,null,N.a.createElement(fn.a,null,N.a.createElement(gi.a,null,N.a.createElement("img",{src:bn,alt:"",width:204,height:137}),N.a.createElement(fi.b,null,i("SecurityStep.title")),N.a.createElement(gi.a,{spacing:"xxl"},N.a.createElement(fi.d,null,i("SecurityStep.description")),N.a.createElement(mn.a,null,N.a.createElement(vn.b,{className:"u-ta-left u-mv-0"},N.a.createElement(vn.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(i("SecurityStep.advices.strong_passphrase"))}}),N.a.createElement(vn.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(i("SecurityStep.advices.memorize"))}}),N.a.createElement(vn.a,null,N.a.createElement("span",{dangerouslySetInnerHTML:{__html:Object(gn.a)(i("SecurityStep.advices.our_tip"))}}),N.a.createElement(yn.a,{color:!1,password:i("SecurityStep.password-example")})))),N.a.createElement(gi.a,{spacing:"xs"},N.a.createElement(An,{label:i("SecurityStep.enhance-password"),successRoute:"#/installation/configureExtension",cancelRoute:"#/installation/hint",extension:"full"}),N.a.createElement(pi.c,{tag:pn.b,onClick:t,label:i("SecurityStep.keep-password"),theme:"secondary",className:"u-mt-half",extension:"full"})))))))},Wn=function(e){var t=e.onNext,i=Object(oi.e)().t,n=N.a.useContext(Cn).isVaultConfigured,s=null===h()("passwords.force-vault-configured")?n:h()("passwords.force-vault-configured");return N.a.createElement(cn,null,N.a.createElement(Qi,null,N.a.createElement(fn.a,null,N.a.createElement(gi.a,null,N.a.createElement("img",{src:bn,alt:"",width:204,height:137}),N.a.createElement(fi.b,null,i(s?"SecurityStepOIDC.title-configured":"SecurityStepOIDC.title")),N.a.createElement(gi.a,{spacing:"xl"},N.a.createElement(fi.d,null,i(s?"SecurityStepOIDC.description-configured":"SecurityStepOIDC.description")),s?N.a.createElement("div",null,N.a.createElement(An,{extension:"full",theme:"secondary",label:i("UpdateCozyPassPassword"),successRoute:"#/installation/configureExtension",cancelRoute:"#/installation/configureExtension"})):N.a.createElement(N.a.Fragment,null,N.a.createElement(Kn,{onSuccess:t}),N.a.createElement(mn.a,null,N.a.createElement(vn.b,{className:"u-ta-left u-mv-0"},N.a.createElement(vn.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(i("SecurityStep.advices.strong_passphrase"))}}),N.a.createElement(vn.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(i("SecurityStep.advices.memorize"))}}),N.a.createElement(vn.a,null,N.a.createElement("span",{dangerouslySetInnerHTML:{__html:Object(gn.a)(i("SecurityStep.advices.our_tip"))}}),N.a.createElement(yn.a,{color:!1,password:i("SecurityStep.password-example")}))))))))))},qn=function(e){var t=Object(l.useClient)();return Sn(t)?N.a.createElement(Wn,e):N.a.createElement(Hn,e)},Gn=i(194),Jn=i.p+"images/password-clue.svg",Yn=i(146),$n=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))},Xn=Object(l.withClient)((function(e){var t=Object(l.useClient)(),i=e.goToNextStep,n=Object(oi.e)().t,s=Object(U.useState)(""),r=ei()(s,2),o=r[0],c=r[1],a=Object(U.useState)(!1),d=ei()(a,2),u=d[0],h=d[1];return N.a.createElement(cn,null,N.a.createElement(Oi,null,n("Nav.installation")),N.a.createElement(Qi,null,N.a.createElement(fn.a,null,N.a.createElement(gi.a,{spacing:"xxl",tag:"form",onSubmit:function(e){return $n(void 0,void 0,void 0,ii.a.mark((function s(){return ii.a.wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return e.preventDefault(),h(!0),s.prev=2,s.next=5,t.getStackClient().fetchJSON("PUT","/settings/hint",{hint:o});case 5:i(),s.next=12;break;case 8:s.prev=8,s.t0=s.catch(2),En.a.error(n("HintStep.error")),console.error(s.t0);case 12:return s.prev=12,h(!1),s.finish(12);case 15:case"end":return s.stop()}}),s,null,[[2,8,12,15]])})))}},N.a.createElement(gi.a,{spacing:"m"},N.a.createElement("img",{src:Jn,alt:"",height:137}),N.a.createElement(fi.b,{className:"u-mt-1"},n("HintStep.title")),N.a.createElement(fi.d,null,null===e.hasHint?N.a.createElement(Yn.a,{size:"small"}):!1===e.hasHint?n("HintStep.please-configure-hint"):n("HintStep.hint-configured"))),N.a.createElement(gi.a,{spacing:"m"},N.a.createElement(Gn.a,{placeholder:n("HintStep.placeholder"),value:o,onChange:function(e){return c(e.target.value)}}),N.a.createElement(fi.d,null,n("HintStep.description"))),N.a.createElement(pi.c,{label:n("HintStep.submit"),disabled:u||""===o,busy:u,extension:"full",className:"u-mt-2"}),e.hasHint?N.a.createElement(pi.c,{label:n("HintStep.skip"),disabled:u,extension:"full",onClick:e.onSkip,theme:"secondary",className:"u-mt-half"}):null))))})),Zn="installed",es="not-installed",ts="connected",is=function(){var e=Object(U.useState)(es),t=ei()(e,2),i=t[0],n=t[1];return Object(U.useEffect)((function(){var e=function(){var e=document.createEvent("Event");e.initEvent("cozy.passwordextension.check-status"),document.dispatchEvent(e)},t=function(){n(Zn)},i=function(){n(ts),r()};document.addEventListener("cozy.passwordextension.installed",t),document.addEventListener("cozy.passwordextension.connected",i),e();var s=setInterval(e,1e3),r=function(){clearInterval(s),document.removeEventListener("extensioninstalled",t),document.removeEventListener("extensionconnected",i)};return r}),[!1]),i},ns=i(332),ss=i(100),rs=i.p+"images/browser-extension.svg",os=i(555),cs=i(544),as={insert:"head",singleton:!1},ls=(Ii()(cs.a,as),cs.a.locals,i(815)),ds=function(e){return N.a.createElement(mi.a,Ui()({icon:ls.a,size:16,color:"var(--charcoalGrey)",className:"CloudIcon"},e))},us=i(545),hs={insert:"head",singleton:!1},ps=(Ii()(us.a,hs),us.a.locals,function(e){return N.a.createElement(os.c,{className:"u-inline-flex"},N.a.createElement(os.b,null,N.a.createElement(ds,null)),N.a.createElement(os.a,{className:"u-ml-half"},N.a.createElement(fi.a,Ui()({tag:"strong"},e,{className:"WithCozyIcon__text"}))))}),gs=i(321),fs=i.n(gs),ys=i(1372),ms=i(816),vs=i.p+"images/google-play-badge-en.png",bs=i.p+"images/google-play-badge-fr.png",ws=i.p+"images/app-store-badge-en.png",Os=i.p+"images/app-store-badge-fr.png",Ss=i(546),Cs={insert:"head",singleton:!1},Ps=(Ii()(Ss.a,Cs),Ss.a.locals,{en:vs,fr:bs}),xs={en:ws,fr:Os},ks=function(e){var t=Object(oi.e)().lang,i=xs[t]||xs.en;return N.a.createElement("a",Ui()({},e,{className:hi()(e.className,"StoreButton")}),N.a.createElement("img",{src:i,className:"StoreButton__Image"}))},Ts=function(e){var t=Object(oi.e)().lang,i=Ps[t]||Ps.en;return N.a.createElement("a",Ui()({},e,{className:hi()(e.className,"StoreButton")}),N.a.createElement("img",{src:i,className:"StoreButton__Image"}))},Is=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i},Ds=function(e){var t=e.icon,i=Is(e,["icon"]),n="primary"===e.theme?"var(--white)":"var(--slateGrey)";return N.a.createElement(pi.b,Ui()({icon:N.a.createElement(mi.a,{icon:t,size:16,color:n}),theme:"secondary",className:"u-mb-half"},i))},As=fs()(Object.values(Vi).filter((function(e){return e.os})),"os"),Ms=function(e){var t=Object(U.useState)(!1),i=ei()(t,2),n=i[0],s=i[1],r=Object(ss.isAndroid)()?"android":Object(ss.isIOS)()?"ios":null,o=Object(U.useCallback)((function(){s(!0)}),[s]),c=Object(U.useCallback)((function(){s(!1)}),[s]);return N.a.createElement(N.a.Fragment,null,N.a.createElement(Ds,Ui()({icon:ms.a,href:null!==r?As[r].storeUrl:null,onClick:null===r?o:null},e)),n?N.a.createElement(ys.a,{open:n,onClose:c,content:N.a.createElement("div",{className:"u-flex u-flex-column u-flex-justify-center"},N.a.createElement("div",{className:"u-ta-center"},N.a.createElement(ks,{href:As.ios.storeUrl}),N.a.createElement(Ts,{href:As.android.storeUrl})))}):null)},zs=Object(_i.a)(),Es=function(e){var t=e.onExtensionInstalled,i=e.onSkipExtension,n=Object(l.useClient)(),s=Object(oi.e)().t,r=Object(U.useState)(!1),o=ei()(r,2),c=o[0],a=o[1],d=new URL(n.getStackClient().uri),u=(Li()[zs.name]||{}).storeUrl,h=Object(ss.isMobile)(),p=is();Object(U.useEffect)((function(){p==Zn&&t&&t()}),[p,t]);return N.a.createElement(cn,null,N.a.createElement(Oi,null,s("Nav.installation")),N.a.createElement(Qi,null,N.a.createElement(fn.a,null,h?N.a.createElement(gi.a,{spacing:"m"},N.a.createElement(fi.b,null,s("InstallationStepMobile.title")),N.a.createElement(fi.d,null,s("InstallationStepMobile.description")),N.a.createElement(Ms,{label:s("InstallationStepMobile.installApp"),theme:"primary"})):N.a.createElement(gi.a,{spacing:"xxl"},N.a.createElement(gi.a,{spacing:"m"},N.a.createElement("img",{src:rs,alt:"",width:230,height:115}),N.a.createElement(fi.b,null,s("InstallationStep.title")),N.a.createElement(fi.d,null,N.a.createElement("span",{dangerouslySetInnerHTML:{__html:Object(gn.a)(s("InstallationStep.descriptionStart",{address:d.host}))}})," ",N.a.createElement(ps,null,s("InstallationStep.cozyExtension"))," ",N.a.createElement("span",{dangerouslySetInnerHTML:{__html:Object(gn.a)(s("InstallationStep.descriptionEnd",{address:d.host}))}}))),N.a.createElement(mn.a,{className:"u-ta-left"},N.a.createElement(ns.b,{className:"u-mv-0"},N.a.createElement(ns.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(s("InstallationStep.step1.".concat(zs.name)))}}),N.a.createElement(ns.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(s("InstallationStep.step2.".concat(zs.name)))}}),N.a.createElement(ns.a,{dangerouslySetInnerHTML:{__html:Object(gn.a)(Sn(n)?s("InstallationStep.step3-oidc",{address:d.host}):s("InstallationStep.step3",{address:d.host}))}}))),N.a.createElement(pi.b,{href:u,target:"_blank",label:s("InstallationStep.cta"),extension:"full",className:"u-mt-2-half",onClick:function(){a(!0)}}),N.a.createElement(pi.a,{label:s(c?"InstallationStep.login":"InstallationStep.skip"),extension:"full",onClick:i,theme:"secondary",className:"u-mt-half"})))))},Us=function(e){e.onConnected;var t=e.onSkipExtension;is();return N.a.createElement(Es,{onSkipExtension:t})},Ns=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))},Rs=function(e){return Ns(void 0,void 0,void 0,ii.a.mark((function t(){return ii.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!h()("passwords.force-no-hint")){t.next=2;break}return t.abrupt("return",!1);case 2:return t.prev=2,t.next=5,e.getStackClient().collection("io.cozy.settings").get("hint");case 5:return t.abrupt("return",!0);case 8:return t.prev=8,t.t0=t.catch(2),t.abrupt("return",!1);case 11:case"end":return t.stop()}}),t,null,[[2,8]])})))},Fs=i(547),Qs={insert:"head",singleton:!1},Vs=(Ii()(Fs.a,Qs),Fs.a.locals,function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))});var Bs={presentation:0,security:1,hint:2,configureExtension:3};var Ls=function(e){var t=this,i=e.onSkipExtension,n=Object(ri.d)(),s=Object(oi.e)().t,r=Object(U.useContext)(si),o=r&&r.extension_installed,c=Object(U.useState)(n.step?Bs[n.step]:o?Bs.configureExtension:Bs.presentation),a=ei()(c,2),d=a[0],u=a[1],h=Object(l.useClient)(),p=Sn(h),g=function(e,t){return[e("Nav.presentation"),e(t?"InstallationStep.steps.choose-pass-password":"InstallationStep.steps.improve-password"),e("InstallationStep.steps.leave-hint"),Object(ss.isMobile)()?e("InstallationStep.steps.install-app"):e("InstallationStep.steps.install-extension")]}(s,p),f=Object(U.useState)(null),y=ei()(f,2),m=y[0],v=y[1];Object(U.useEffect)((function(){Vs(t,void 0,void 0,ii.a.mark((function e(){var t;return ii.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Rs(h);case 2:t=e.sent,v(t);case 4:case"end":return e.stop()}}),e)})))}),[d,h]);var b=Object(U.useMemo)((function(){return{hasHint:m,isVaultConfigured:o,canAuthWithOIDC:p}}),[m,o,p]),w=!p||o;return N.a.createElement(Pn.Provider,{value:b},N.a.createElement("div",{className:"InstallationPage"},N.a.createElement(Oi,null,s("Nav.installation")),N.a.createElement(ci.a,{alternativeLabel:!0,nonLinear:w,activeStep:d},g.map((function(e,t){var i={error:t===Bs.hint&&o&&!1===m};return N.a.createElement(ai.a,{disabled:!0,key:e,onClick:w?function(){return u(t)}:null},N.a.createElement(li.a,null,N.a.createElement(di.a,i,e)))}))),function(e,t,i){var n=i.hasHint,s=i.onSkipExtension;switch(e){case Bs.presentation:return N.a.createElement(hn,{onLetsGo:function(){return t(Bs.security)}});case Bs.security:return N.a.createElement(qn,{onNext:function(){return t(Bs.hint)},onSkip:function(){return t(Bs.hint)}});case Bs.hint:return N.a.createElement(Xn,{hasHint:n,onSkip:function(){return t(Bs.configureExtension)},goToNextStep:function(){return t(Bs.configureExtension)}});case Bs.configureExtension:return N.a.createElement(Us,{onSkipExtension:s})}}(d,u,{hasHint:m,onSkipExtension:i})))},_s=i(1368),js=i(1380),Ks=i(456),Hs=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i},Ws=Xt.a.shape({extension_installed:Xt.a.bool.isRequired}),qs=Xt.a.shape({apiService:Xt.a.object.isRequired,environmentService:Xt.a.object.isRequired,authService:Xt.a.object.isRequired,syncService:Xt.a.object.isRequired,cryptoService:Xt.a.object.isRequired,cipherService:Xt.a.object.isRequired,userService:Xt.a.object.isRequired,collectionService:Xt.a.object.isRequired,passwordGenerationService:Xt.a.object.isRequired,vaultTimeoutService:Xt.a.object.isRequired,containerService:Xt.a.object.isRequired,importService:Xt.a.object.isRequired,utils:Xt.a.func.isRequired}),Gs=Xt.a.shape({client:Xt.a.object.isRequired,bitwardenData:Ws.isRequired,vaultData:qs.isRequired}),Js=Object(_s.a)({disableGlobal:!0}),Ys=function(e){var t,n=e.reactWrapperProps,s=Hs(e,["reactWrapperProps"]),r=n.client,o=n.bitwardenData,c=n.vaultData,a=null!==(t=r.getInstanceOptions().locale)&&void 0!==t?t:"en";return N.a.createElement(js.b,{generateClassName:Js},N.a.createElement(oi.b,{lang:a,dictRequire:function(e){return i(1238)("./".concat(e,".json"))}},N.a.createElement(l.CozyProvider,{client:r},N.a.createElement(Nn.a,{instance:r.getStackClient().uri,vaultData:c},N.a.createElement(si.Provider,{value:o},N.a.createElement(vi.a,null,N.a.createElement(Ks.a,null,N.a.createElement(pn.a,null,s.children))))))))};Ys.propTypes={reactWrapperProps:Gs.isRequired};var $s=Ys,Xs=function(e){var t=e.reactWrapperProps,i=e.onSkipExtension;return N.a.createElement($s,{reactWrapperProps:t},N.a.createElement(Ls,{onSkipExtension:i}))};Xs.propTypes={reactWrapperProps:Gs.isRequired,onSkipExtension:Xt.a.func.isRequired};var Zs=Xs,er=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class tr extends Jt{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g,f){super(e,t,i,n,s,r,o,c,a,l,d,u,h,p),this.clientService=e,this.apiService=t,this.environmentService=i,this.authService=n,this.syncService=s,this.cryptoService=r,this.cipherService=o,this.userService=c,this.collectionService=a,this.passwordGenerationService=l,this.vaultTimeoutService=d,this.folderService=u,this.i18nService=h,this.platformUtilsService=p,this.vaultInstallationService=g,this.messagingService=f}onSkipExtension(){this.vaultInstallationService.setIsInstalled(),this.messagingService.send("installed")}getProps(){return er(this,void 0,void 0,(function*(){return{reactWrapperProps:yield this.getReactWrapperProps(!0),onSkipExtension:this.onSkipExtension.bind(this)}}))}renderReact(){return er(this,void 0,void 0,(function*(){R.render(U.createElement(Zs,yield this.getProps()),this.getRootDomNode())}))}}tr.ɵfac=function(e){return new(e||tr)(n.cc(y),n.cc(O),n.cc(k),n.cc(S),n.cc(M),n.cc(x.a),n.cc(C),n.cc(z.a),n.cc(P),n.cc(D),n.cc(E.a),n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(v),n.cc(a.a))},tr.ɵcmp=n.Wb({type:tr,selectors:[["app-installation-page"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(tr,[{type:n.l,args:[{selector:"app-installation-page",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],(function(){return[{type:y},{type:O},{type:k},{type:S},{type:M},{type:x.a},{type:C},{type:z.a},{type:P},{type:D},{type:E.a},{type:T},{type:I.a},{type:A.a},{type:v},{type:a.a}]}),null);var ir=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class nr{constructor(e,t,i){this.vaultTimeoutService=e,this.userService=t,this.router=i}canActivate(){return ir(this,void 0,void 0,(function*(){if(!(yield this.vaultTimeoutService.isLocked())){return(yield this.userService.isAuthenticated())?this.router.navigate(["vault"]):this.router.navigate(["login"]),!1}return!0}))}}nr.ɵfac=function(e){return new(e||nr)(n.lc(E.a),n.lc(z.a),n.lc(c.b))},nr.ɵprov=n.Yb({token:nr,factory:nr.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(nr,[{type:n.A}],(function(){return[{type:E.a},{type:z.a},{type:c.b}]}),null);var sr=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class rr{constructor(e,t,i){this.vaultTimeoutService=e,this.userService=t,this.router=i}canActivate(){return sr(this,void 0,void 0,(function*(){if(yield this.userService.isAuthenticated()){return(yield this.vaultTimeoutService.isLocked())?this.router.navigate(["lock"]):this.router.navigate(["vault"]),!1}return!0}))}}rr.ɵfac=function(e){return new(e||rr)(n.lc(E.a),n.lc(z.a),n.lc(c.b))},rr.ɵprov=n.Yb({token:rr,factory:rr.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(rr,[{type:n.A}],(function(){return[{type:E.a},{type:z.a},{type:c.b}]}),null);var or=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class cr{constructor(e,t,i,n){this.vaultTimeoutService=e,this.userService=t,this.router=i,this.messagingService=n}canActivate(e,t){return or(this,void 0,void 0,(function*(){if(!(yield this.userService.isAuthenticated()))return this.messagingService.send("authBlocked",{url:t.url}),!1;return!(yield this.vaultTimeoutService.isLocked())||(null!=t&&this.messagingService.send("lockedUrl",{url:t.url}),this.router.navigate(["lock"],{queryParams:{promptBiometric:!0}}),!1)}))}}cr.ɵfac=function(e){return new(e||cr)(n.lc(E.a),n.lc(z.a),n.lc(c.b),n.lc(a.a))},cr.ɵprov=n.Yb({token:cr,factory:cr.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(cr,[{type:n.A}],(function(){return[{type:E.a},{type:z.a},{type:c.b},{type:a.a}]}),null);class ar{constructor(e){this.email=e}}var lr=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var dr=i(16);class ur{constructor(e,t){this.i18nService=e,this.platformUtilsService=t}showError(e){const t=this.i18nService.t("unexpectedError");let i=[];return null!=e&&"string"==typeof e?i.push(e):null==e||"object"!=typeof e?i.push(t):null!=e.validationErrors?i=i.concat(e.getAllMessages()):i.push(e.message?e.message:t),1===i.length?this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),i[0]):i.length>1&&this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),i,{timeout:5e3*i.length}),i}}ur.ɵfac=function(e){return new(e||ur)(n.lc(I.a),n.lc(A.a))},ur.ɵprov=n.Yb({token:ur,factory:ur.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ur,[{type:n.A}],(function(){return[{type:I.a},{type:A.a}]}),null);class hr{constructor(e,t){this.el=e,this.validationService=t}ngOnChanges(e){null!=this.appApiAction&&null!=this.appApiAction.then&&(this.el.nativeElement.loading=!0,this.appApiAction.then(e=>{this.el.nativeElement.loading=!1},e=>{this.el.nativeElement.loading=!1,this.validationService.showError(e)}))}}hr.ɵfac=function(e){return new(e||hr)(n.cc(n.r),n.cc(ur))},hr.ɵdir=n.Xb({type:hr,selectors:[["","appApiAction",""]],inputs:{appApiAction:"appApiAction"},features:[n.Ob]}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(hr,[{type:n.q,args:[{selector:"[appApiAction]"}]}],(function(){return[{type:n.r},{type:ur}]}),{appApiAction:[{type:n.D}]});class pr{constructor(e){this.elRef=e,this.el=null,this.el=e.nativeElement}ngOnInit(){this.formEls=Array.from(this.el.querySelectorAll('input:not([type="hidden"]), select, textarea')),this.formEls.forEach(e=>{e.addEventListener("focus",e=>{this.el.classList.add("active")},!1),e.addEventListener("blur",e=>{this.el.classList.remove("active")},!1)})}onClick(e){const t=e.target;if((t===this.el||t.classList.contains("progress")||t.classList.contains("progress-bar"))&&this.formEls.length>0){const e=this.formEls[0];if("input"===e.tagName.toLowerCase()){const t=e;if(null!=t.type&&"checkbox"===t.type.toLowerCase())return void t.click()}e.focus()}}}pr.ɵfac=function(e){return new(e||pr)(n.cc(n.r))},pr.ɵdir=n.Xb({type:pr,selectors:[["","appBoxRow",""]],hostBindings:function(e,t){1&e&&n.oc("click",(function(e){return t.onClick(e)}))}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(pr,[{type:n.q,args:[{selector:"[appBoxRow]"}]}],(function(){return[{type:n.r}]}),{onClick:[{type:n.w,args:["click",["$event"]]}]});class gr{constructor(e){this.el=e}set appAutofocus(e){this.autofocus=""===e||!0===e}ngOnInit(){!Q.a.isMobileBrowser&&this.autofocus&&this.el.nativeElement.focus()}}gr.ɵfac=function(e){return new(e||gr)(n.cc(n.r))},gr.ɵdir=n.Xb({type:gr,selectors:[["","appAutofocus",""]],inputs:{appAutofocus:"appAutofocus"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(gr,[{type:n.q,args:[{selector:"[appAutofocus]"}]}],(function(){return[{type:n.r}]}),{appAutofocus:[{type:n.D}]});class fr{constructor(e){this.el=e}onClick(){this.el.nativeElement.blur()}}fr.ɵfac=function(e){return new(e||fr)(n.cc(n.r))},fr.ɵdir=n.Xb({type:fr,selectors:[["","appBlurClick",""]],hostBindings:function(e,t){1&e&&n.oc("click",(function(){return t.onClick()}))}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(fr,[{type:n.q,args:[{selector:"[appBlurClick]"}]}],(function(){return[{type:n.r}]}),{onClick:[{type:n.w,args:["click"]}]});var yr=i(47);class mr extends class{constructor(e,t,i,n){this.router=e,this.i18nService=t,this.apiService=i,this.platformUtilsService=n,this.email="",this.successRoute="login"}submit(){return lr(this,void 0,void 0,(function*(){if(null!=this.email&&""!==this.email)if(-1!==this.email.indexOf("@"))try{this.formPromise=this.apiService.postPasswordHint(new ar(this.email)),yield this.formPromise,this.platformUtilsService.showToast("success",null,this.i18nService.t("masterPassSent")),null!=this.onSuccessfulSubmit?this.onSuccessfulSubmit():null!=this.router&&this.router.navigate([this.successRoute])}catch(e){}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidEmail"));else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("emailRequired"))}))}}{constructor(e,t,i,n){super(e,i,n,t)}}mr.ɵfac=function(e){return new(e||mr)(n.cc(c.b),n.cc(A.a),n.cc(I.a),n.cc(O))},mr.ɵcmp=n.Wb({type:mr,selectors:[["app-hint"]],features:[n.Nb],decls:46,vars:20,consts:[["id","hint-page",3,"appApiAction","ngSubmit"],["form",""],[1,"content"],[1,"box","last"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","email"],["id","email","type","text","name","Email","required","","appAutofocus","",3,"ngModel","ngModelChange"],[1,"box-footer"],[1,"buttons"],["type","submit","appBlurClick","",1,"btn","primary","block",3,"disabled"],[3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"hidden"],["routerLink","/login",1,"btn","block"]],template:function(e,t){if(1&e&&(n.hc(0,"form",0,1),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.hc(5,"h1"),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.hc(9,"div",3),n.Oc(10," "),n.hc(11,"div",4),n.Oc(12," "),n.hc(13,"div",5),n.Oc(14," "),n.hc(15,"label",6),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",7),n.oc("ngModelChange",(function(e){return t.email=e})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.hc(23,"div",8),n.Oc(24),n.tc(25,"i18n"),n.gc(),n.Oc(26," "),n.gc(),n.Oc(27," "),n.hc(28,"div",9),n.Oc(29," "),n.hc(30,"button",10),n.Oc(31," "),n.hc(32,"b",11),n.Oc(33),n.tc(34,"i18n"),n.gc(),n.Oc(35," "),n.dc(36,"i",12),n.Oc(37," "),n.gc(),n.Oc(38," "),n.hc(39,"a",13),n.Oc(40),n.tc(41,"i18n"),n.gc(),n.Oc(42," "),n.gc(),n.Oc(43," "),n.gc(),n.Oc(44," "),n.gc(),n.Oc(45," ")),2&e){const e=n.Gc(1);n.zc("appApiAction",t.formPromise),n.Qb(6),n.Pc(n.uc(7,10,"passwordHint")),n.Qb(10),n.Pc(n.uc(17,12,"emailAddress")),n.Qb(3),n.zc("ngModel",t.email),n.Qb(5),n.Qc(" ",n.uc(25,14,"enterEmailToGetHint")," "),n.Qb(6),n.zc("disabled",e.loading),n.Qb(2),n.zc("hidden",e.loading),n.Qb(1),n.Pc(n.uc(34,16,"submit")),n.Qb(3),n.zc("hidden",!e.loading),n.Qb(4),n.Pc(n.uc(41,18,"cancel"))}},directives:[dr.p,dr.g,dr.h,hr,pr,dr.b,dr.n,gr,dr.f,dr.i,fr,c.d],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(mr,[{type:n.l,args:[{selector:"app-hint",templateUrl:"hint.component.html"}]}],(function(){return[{type:c.b},{type:A.a},{type:I.a},{type:O}]}),null);const vr=(e,...t)=>{throw new Error("ipcRenderer.invoke not implemented")};var br=i(41),wr=i(46);class Or{}class Sr extends class{constructor(){this.subscribers=new Map}send(e,t){null==t?this.subscribers.forEach(t=>{t(e)}):this.subscribers.has(t)&&this.subscribers.get(t)(e)}subscribe(e,t){this.subscribers.set(e,t)}unsubscribe(e){this.subscribers.has(e)&&this.subscribers.delete(e)}}{}Sr.ɵfac=function(e){return Cr(e||Sr)},Sr.ɵprov=n.Yb({token:Sr,factory:Sr.ɵfac});const Cr=n.jc(Sr);("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Sr,[{type:n.A}],null,null);var Pr=i(32);class xr{}var kr=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Tr{constructor(e,t,i,n,s,r,o,c,a,l,d){this.router=e,this.i18nService=t,this.platformUtilsService=i,this.messagingService=n,this.userService=s,this.cryptoService=r,this.storageService=o,this.vaultTimeoutService=c,this.environmentService=a,this.stateService=l,this.apiService=d,this.masterPassword="",this.pin="",this.showPassword=!1,this.pinLock=!1,this.webVaultHostname="",this.successRoute="vault",this.invalidPinAttempts=0}ngOnInit(){return kr(this,void 0,void 0,(function*(){this.pinSet=yield this.vaultTimeoutService.isPinLockSet(),this.pinLock=this.pinSet[0]&&null!=this.vaultTimeoutService.pinProtectedKey||this.pinSet[1],this.supportsBiometric=yield this.platformUtilsService.supportsBiometric(),this.biometricLock=(yield this.vaultTimeoutService.isBiometricLockSet())&&((yield this.cryptoService.hasKey())||!this.platformUtilsService.supportsSecureStorage()),this.biometricText=yield this.storageService.get(Pr.a.biometricText),this.email=yield this.userService.getEmail();let e=this.environmentService.getWebVaultUrl();null==e&&(e="https://bitwarden.com"),this.webVaultHostname=Q.a.getHostname(e)}))}submit(){return kr(this,void 0,void 0,(function*(){if(this.pinLock&&(null==this.pin||""===this.pin))return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("pinRequired"));if(!this.pinLock&&(null==this.masterPassword||""===this.masterPassword))return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassRequired"));const e=yield this.userService.getKdf(),t=yield this.userService.getKdfIterations();if(this.pinLock){let i=!0;try{if(this.pinSet[0]){const n=yield this.cryptoService.makeKeyFromPin(this.pin,this.email,e,t,this.vaultTimeoutService.pinProtectedKey),s=yield this.cryptoService.getEncKey(n),r=yield this.storageService.get(Pr.a.protectedPin);i=(yield this.cryptoService.decryptToUtf8(new me.a(r),s))!==this.pin,i||(yield this.setKeyAndContinue(n))}else{const n=yield this.cryptoService.makeKeyFromPin(this.pin,this.email,e,t);i=!1,yield this.setKeyAndContinue(n)}}catch(e){i=!0}if(i){if(this.invalidPinAttempts++,this.invalidPinAttempts>=5)return void this.messagingService.send("logout");this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidPin"))}}else{const i=yield this.cryptoService.makeKey(this.masterPassword,this.email,e,t),n=yield this.cryptoService.hashPassword(this.masterPassword,i);let s=!1;if(null!=n){const e=yield this.cryptoService.getKeyHash();if(null!=e)s=e===n;else{const e=new xr;e.masterPasswordHash=n;try{this.formPromise=this.apiService.postAccountVerifyPassword(e),yield this.formPromise,s=!0,yield this.cryptoService.setKeyHash(n)}catch(e){}}}if(s){if(this.pinSet[0]){const n=yield this.storageService.get(Pr.a.protectedPin),s=yield this.cryptoService.getEncKey(i),r=yield this.cryptoService.decryptToUtf8(new me.a(n),s),o=yield this.cryptoService.makePinKey(r,this.email,e,t);this.vaultTimeoutService.pinProtectedKey=yield this.cryptoService.encrypt(i.key,o)}this.setKeyAndContinue(i)}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidMasterPassword"))}}))}logOut(){return kr(this,void 0,void 0,(function*(){(yield this.platformUtilsService.showDialog(this.i18nService.t("logOutConfirmation"),this.i18nService.t("logOut"),this.i18nService.t("logOut"),this.i18nService.t("cancel")))&&this.messagingService.send("logout")}))}unlockBiometric(){return kr(this,void 0,void 0,(function*(){if(!this.biometricLock)return;(yield this.platformUtilsService.authenticateBiometric())&&(yield this.doContinue())}))}togglePassword(){this.showPassword=!this.showPassword,document.getElementById(this.pinLock?"pin":"masterPassword").focus()}setKeyAndContinue(e){return kr(this,void 0,void 0,(function*(){yield this.cryptoService.setKey(e),this.doContinue()}))}doContinue(){return kr(this,void 0,void 0,(function*(){this.vaultTimeoutService.biometricLocked=!1;const e=yield this.storageService.get(Pr.a.disableFaviconKey);yield this.stateService.save(Pr.a.disableFaviconKey,!!e),this.messagingService.send("unlocked"),null!=this.onSuccessfulSubmit?this.onSuccessfulSubmit():null!=this.router&&this.router.navigate([this.successRoute])}))}}Tr.ɵfac=function(e){return new(e||Tr)(n.cc(c.b),n.cc(I.a),n.cc(A.a),n.cc(a.a),n.cc(z.a),n.cc(x.a),n.cc(wr.a),n.cc(E.a),n.cc(k),n.cc(br.a),n.cc(O))},Tr.ɵdir=n.Xb({type:Tr}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Tr,[{type:n.q}],(function(){return[{type:c.b},{type:I.a},{type:A.a},{type:a.a},{type:z.a},{type:x.a},{type:wr.a},{type:E.a},{type:k},{type:br.a},{type:O}]}),null);var Ir=i(80),Dr=i(10);class Ar{onClick(e){e.preventDefault()}}Ar.ɵfac=function(e){return new(e||Ar)},Ar.ɵdir=n.Xb({type:Ar,selectors:[["","appStopClick",""]],hostBindings:function(e,t){1&e&&n.oc("click",(function(e){return t.onClick(e)}))}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ar,[{type:n.q,args:[{selector:"[appStopClick]"}]}],null,{onClick:[{type:n.w,args:["click",["$event"]]}]});class Mr{constructor(e,t){this.el=e,this.renderer=t}set appA11yTitle(e){this.title=e}ngOnInit(){this.el.nativeElement.hasAttribute("title")||this.renderer.setAttribute(this.el.nativeElement,"title",this.title),this.el.nativeElement.hasAttribute("aria-label")||this.renderer.setAttribute(this.el.nativeElement,"aria-label",this.title)}}Mr.ɵfac=function(e){return new(e||Mr)(n.cc(n.r),n.cc(n.S))},Mr.ɵdir=n.Xb({type:Mr,selectors:[["","appA11yTitle",""]],inputs:{appA11yTitle:"appA11yTitle"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Mr,[{type:n.q,args:[{selector:"[appA11yTitle]"}]}],(function(){return[{type:n.r},{type:n.S}]}),{appA11yTitle:[{type:n.D}]});var zr=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function Er(e,t){if(1&e){const e=n.ic();n.hc(0,"div",18),n.Oc(1," "),n.hc(2,"label",19),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"input",20),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().pin=t})),n.gc(),n.Oc(7," "),n.gc()}if(2&e){const e=n.sc();n.Qb(3),n.Pc(n.uc(4,3,"pin")),n.Qb(3),n.Ac("type",e.showPassword?"text":"password"),n.zc("ngModel",e.pin)}}function Ur(e,t){if(1&e){const e=n.ic();n.hc(0,"div",18),n.Oc(1," "),n.hc(2,"label",21),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"input",22),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().masterPassword=t})),n.gc(),n.Oc(7," "),n.gc()}if(2&e){const e=n.sc();n.Qb(3),n.Pc(n.uc(4,3,"masterPass")),n.Qb(3),n.Ac("type",e.showPassword?"text":"password"),n.zc("ngModel",e.masterPassword)}}function Nr(e,t){if(1&e){const e=n.ic();n.hc(0,"div",13),n.Oc(1," "),n.hc(2,"button",16),n.oc("click",(function(){n.Hc(e);return n.sc().unlockBiometric()})),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.gc()}if(2&e){const e=n.sc();n.Qb(3),n.Qc(" ",n.uc(4,1,e.biometricText)," ")}}const Rr=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}};class Fr extends Tr{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g,f){super(e,t,i,n,s,r,o,c,a,l,d),this.route=u,this.broadcasterService=h,this.ngZone=p,this.syncService=g,this.tokenService=f}ngOnInit(){const e=Object.create(null,{ngOnInit:{get:()=>super.ngOnInit}});return zr(this,void 0,void 0,(function*(){yield e.ngOnInit.call(this);const t=document.getElementById("cozy-app"),i=t?t.dataset.cozyDomain:null;if(i){this.email="me@"+i;const e=window.location?window.location.protocol:"https:";this.baseUrl=`${e}//${i}/`,this.environmentService.setUrls({base:this.baseUrl+"bitwarden"});const t=this.environmentService.getWebVaultUrl();this.webVaultHostname=Q.a.getHostname(t)}const n=t?t.dataset.cozyToken:null;n&&(yield this.storageService.save("accessToken",n));const s=t?t.dataset.cozyKeyHash:null;s&&(yield this.storageService.save("keyHash",s));const r=!(yield this.storageService.get(Ir.a.noAutoPromptBiometrics));this.route.queryParams.subscribe(e=>{this.supportsBiometric&&e.promptBiometric&&r&&setTimeout(()=>zr(this,void 0,void 0,(function*(){(yield vr("windowVisible"))&&this.unlockBiometric()})),1e3)}),this.broadcasterService.subscribe("LockComponent",e=>zr(this,void 0,void 0,(function*(){this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})})))}))}ngOnDestroy(){this.broadcasterService.unsubscribe("LockComponent")}onWindowHidden(){this.showPassword=!1}submit(){return zr(this,void 0,void 0,(function*(){const e=yield this.userService.getKdf(),t=yield this.userService.getKdfIterations(),i=yield this.cryptoService.makeKey(this.masterPassword,this.email,e,t),n=yield this.cryptoService.hashPassword(this.masterPassword,i);let s=!1;if(null!=n){const e=yield this.cryptoService.getKeyHash();null!=e&&(s=e===n),s=!0}s?(yield this.cryptoService.setKey(i),this.setKeyAndContinue2(i)):this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidMasterPassword"))}))}setKeyAndContinue2(e){return zr(this,void 0,void 0,(function*(){yield this.cryptoService.setKey(e);const t=this.tokenService.getUserId();this.storageService.save("userId",t),this.syncService.fullSync(!0),this.doContinue2()}))}doContinue2(){return zr(this,void 0,void 0,(function*(){this.vaultTimeoutService.biometricLocked=!1;const e=yield this.storageService.get(Pr.a.disableFaviconKey);yield this.stateService.save(Pr.a.disableFaviconKey,!!e),this.messagingService.send("unlocked"),null!=this.onSuccessfulSubmit?this.onSuccessfulSubmit():null!=this.router&&this.router.navigate([this.successRoute])}))}}Fr.ɵfac=function(e){return new(e||Fr)(n.cc(c.b),n.cc(I.a),n.cc(A.a),n.cc(a.a),n.cc(z.a),n.cc(x.a),n.cc(wr.a),n.cc(E.a),n.cc(k),n.cc(br.a),n.cc(O),n.cc(c.a),n.cc(Sr),n.cc(n.M),n.cc(M),n.cc(Or))},Fr.ɵcmp=n.Wb({type:Fr,selectors:[["app-lock"]],features:[n.Nb],decls:60,vars:24,consts:[["id","lock-page",3,"ngSubmit"],[1,"content"],["aria-hidden","true"],[1,"fa","fa-lock","fa-4x","text-muted"],[1,"box","last"],[1,"box-content"],["appBoxRow","",1,"box-content-row","box-content-row-flex"],["class","row-main",4,"ngIf"],[1,"action-buttons"],["href","#","appStopClick","","appBlurClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],[1,"box-footer"],[1,"buttons","with-rows"],[1,"buttons-row"],["type","submit","appBlurClick","",1,"btn","primary","block"],["aria-hidden","true",1,"fa","fa-unlock-alt"],["type","button","appBlurClick","",1,"btn","block",3,"click"],["class","buttons-row",4,"ngIf"],[1,"row-main"],["for","pin"],["id","pin","name","PIN","required","","appAutofocus","",1,"monospaced",3,"type","ngModel","ngModelChange"],["for","masterPassword"],["id","masterPassword","name","MasterPassword","required","","appAutofocus","",1,"monospaced",3,"type","ngModel","ngModelChange"]],template:function(e,t){1&e&&(n.hc(0,"form",0),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"p",2),n.dc(5,"i",3),n.gc(),n.Oc(6," "),n.hc(7,"p"),n.Oc(8),n.tc(9,"i18n"),n.gc(),n.Oc(10," "),n.hc(11,"div",4),n.Oc(12," "),n.hc(13,"div",5),n.Oc(14," "),n.hc(15,"div",6),n.Oc(16," "),n.Mc(17,Er,8,5,"div",7),n.Oc(18," "),n.Mc(19,Ur,8,5,"div",7),n.Oc(20," "),n.hc(21,"div",8),n.Oc(22," "),n.hc(23,"a",9),n.oc("click",(function(){return t.togglePassword()})),n.tc(24,"i18n"),n.Oc(25," "),n.dc(26,"i",10),n.Oc(27," "),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.gc(),n.Oc(31," "),n.hc(32,"div",11),n.Oc(33),n.tc(34,"i18n"),n.gc(),n.Oc(35," "),n.gc(),n.Oc(36," "),n.hc(37,"div",12),n.Oc(38," "),n.hc(39,"div",13),n.Oc(40," "),n.hc(41,"button",14),n.Oc(42," "),n.dc(43,"i",15),n.Oc(44," "),n.hc(45,"b"),n.Oc(46),n.tc(47,"i18n"),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.hc(50,"button",16),n.oc("click",(function(){return t.logOut()})),n.Oc(51),n.tc(52,"i18n"),n.gc(),n.Oc(53," "),n.gc(),n.Oc(54," "),n.Mc(55,Nr,6,3,"div",17),n.Oc(56," "),n.gc(),n.Oc(57," "),n.gc(),n.Oc(58," "),n.gc(),n.Oc(59," ")),2&e&&(n.Qb(8),n.Pc(n.uc(9,9,t.pinLock?"yourVaultIsLockedPinCode":"yourVaultIsLocked")),n.Qb(9),n.zc("ngIf",t.pinLock),n.Qb(2),n.zc("ngIf",!t.pinLock),n.Qb(4),n.Ac("appA11yTitle",n.uc(24,11,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(21,Rr,!t.showPassword,t.showPassword)),n.Qb(7),n.Qc(" ",n.wc(34,13,"loggedInAsOn",t.email,t.webVaultHostname)," "),n.Qb(13),n.Pc(n.uc(47,17,"unlock")),n.Qb(5),n.Qc(" ",n.uc(52,19,"logOut")," "),n.Qb(4),n.zc("ngIf",t.supportsBiometric&&t.biometricLock))},directives:[dr.p,dr.g,dr.h,pr,Dr.k,Ar,fr,Mr,Dr.i,dr.b,dr.n,gr,dr.f,dr.i],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Fr,[{type:n.l,args:[{selector:"app-lock",templateUrl:"lock.component.html"}]}],(function(){return[{type:c.b},{type:I.a},{type:A.a},{type:a.a},{type:z.a},{type:x.a},{type:wr.a},{type:E.a},{type:k},{type:br.a},{type:O},{type:c.a},{type:Sr},{type:n.M},{type:M},{type:Or}]}),null);var Qr=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Vr{constructor(e,t,i){this.platformUtilsService=e,this.environmentService=t,this.i18nService=i,this.onSaved=new n.t,this.showCustom=!1,this.baseUrl=t.baseUrl||"",this.webVaultUrl=t.webVaultUrl||"",this.apiUrl=t.apiUrl||"",this.identityUrl=t.identityUrl||"",this.iconsUrl=t.iconsUrl||"",this.notificationsUrl=t.notificationsUrl||"",this.enterpriseUrl=t.enterpriseUrl||""}submit(){return Qr(this,void 0,void 0,(function*(){const e=yield this.environmentService.setUrls({base:this.baseUrl,api:this.apiUrl,identity:this.identityUrl,webVault:this.webVaultUrl,icons:this.iconsUrl,notifications:this.notificationsUrl,enterprise:this.enterpriseUrl});this.baseUrl=e.base,this.apiUrl=e.api,this.identityUrl=e.identity,this.webVaultUrl=e.webVault,this.iconsUrl=e.icons,this.notificationsUrl=e.notifications,this.enterpriseUrl=e.enterprise,this.platformUtilsService.showToast("success",null,this.i18nService.t("environmentSaved")),this.saved()}))}toggleCustom(){this.showCustom=!this.showCustom}saved(){this.onSaved.emit()}}Vr.ɵfac=function(e){return new(e||Vr)(n.cc(A.a),n.cc(k),n.cc(I.a))},Vr.ɵdir=n.Xb({type:Vr,outputs:{onSaved:"onSaved"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Vr,[{type:n.q}],(function(){return[{type:A.a},{type:k},{type:I.a}]}),{onSaved:[{type:n.O}]});class Br extends Vr{constructor(e,t,i){super(e,t,i)}}Br.ɵfac=function(e){return new(e||Br)(n.cc(A.a),n.cc(k),n.cc(I.a))},Br.ɵcmp=n.Wb({type:Br,selectors:[["app-environment"]],features:[n.Nb],decls:117,vars:55,consts:[["tabindex","-1","role","dialog","aria-modal","true",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content",3,"ngSubmit"],[1,"modal-body"],[1,"box"],[1,"box-header"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","baseUrl"],["id","baseUrl","type","text","name","BaseUrl",3,"ngModel","placeholder","ngModelChange"],[1,"box-footer"],["type","button",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-plus-square-o",3,"hidden"],["aria-hidden","true",1,"fa","fa-minus-square-o",3,"hidden"],[1,"box-content",3,"hidden"],["for","webVaultUrl"],["id","webVaultUrl","type","text","name","WebVaultUrl",3,"ngModel","ngModelChange"],["for","apiUrl"],["id","apiUrl","type","text","name","ApiUrl",3,"ngModel","ngModelChange"],["for","identityUrl"],["id","identityUrl","type","text","name","IdentityUrl",3,"ngModel","ngModelChange"],["for","notificationsUrl"],["id","notificationsUrl","type","text","name","NotificationsUrl",3,"ngModel","ngModelChange"],["for","iconsUrl"],["id","iconsUrl","type","text","name","IconsUrl",3,"ngModel","ngModelChange"],[1,"box-footer",3,"hidden"],[1,"modal-footer"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw"],["type","button","data-dismiss","modal"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.tc(1,"i18n"),n.Oc(2," "),n.hc(3,"div",1),n.Oc(4," "),n.hc(5,"form",2),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",3),n.Oc(8," "),n.hc(9,"div",4),n.Oc(10," "),n.hc(11,"div",5),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.hc(15,"div",6),n.Oc(16," "),n.hc(17,"div",7),n.Oc(18," "),n.hc(19,"label",8),n.Oc(20),n.tc(21,"i18n"),n.gc(),n.Oc(22," "),n.hc(23,"input",9),n.oc("ngModelChange",(function(e){return t.baseUrl=e})),n.tc(24,"i18n"),n.gc(),n.Oc(25," "),n.gc(),n.Oc(26," "),n.gc(),n.Oc(27," "),n.hc(28,"div",10),n.Oc(29),n.tc(30,"i18n"),n.gc(),n.Oc(31," "),n.gc(),n.Oc(32," "),n.hc(33,"div",4),n.Oc(34," "),n.hc(35,"div",5),n.Oc(36," "),n.hc(37,"button",11),n.oc("click",(function(){return t.toggleCustom()})),n.tc(38,"i18n"),n.Oc(39," "),n.dc(40,"i",12),n.Oc(41," "),n.dc(42,"i",13),n.Oc(43),n.tc(44,"i18n"),n.gc(),n.Oc(45," "),n.gc(),n.Oc(46," "),n.hc(47,"div",14),n.Oc(48," "),n.hc(49,"div",7),n.Oc(50," "),n.hc(51,"label",15),n.Oc(52),n.tc(53,"i18n"),n.gc(),n.Oc(54," "),n.hc(55,"input",16),n.oc("ngModelChange",(function(e){return t.webVaultUrl=e})),n.gc(),n.Oc(56," "),n.gc(),n.Oc(57," "),n.hc(58,"div",7),n.Oc(59," "),n.hc(60,"label",17),n.Oc(61),n.tc(62,"i18n"),n.gc(),n.Oc(63," "),n.hc(64,"input",18),n.oc("ngModelChange",(function(e){return t.apiUrl=e})),n.gc(),n.Oc(65," "),n.gc(),n.Oc(66," "),n.hc(67,"div",7),n.Oc(68," "),n.hc(69,"label",19),n.Oc(70),n.tc(71,"i18n"),n.gc(),n.Oc(72," "),n.hc(73,"input",20),n.oc("ngModelChange",(function(e){return t.identityUrl=e})),n.gc(),n.Oc(74," "),n.gc(),n.Oc(75," "),n.hc(76,"div",7),n.Oc(77," "),n.hc(78,"label",21),n.Oc(79),n.tc(80,"i18n"),n.gc(),n.Oc(81," "),n.hc(82,"input",22),n.oc("ngModelChange",(function(e){return t.notificationsUrl=e})),n.gc(),n.Oc(83," "),n.gc(),n.Oc(84," "),n.hc(85,"div",7),n.Oc(86," "),n.hc(87,"label",23),n.Oc(88),n.tc(89,"i18n"),n.gc(),n.Oc(90," "),n.hc(91,"input",24),n.oc("ngModelChange",(function(e){return t.iconsUrl=e})),n.gc(),n.Oc(92," "),n.gc(),n.Oc(93," "),n.gc(),n.Oc(94," "),n.hc(95,"div",25),n.Oc(96),n.tc(97,"i18n"),n.gc(),n.Oc(98," "),n.gc(),n.Oc(99," "),n.gc(),n.Oc(100," "),n.hc(101,"div",26),n.Oc(102," "),n.hc(103,"button",27),n.tc(104,"i18n"),n.Oc(105," "),n.dc(106,"i",28),n.Oc(107," "),n.gc(),n.Oc(108," "),n.hc(109,"button",29),n.Oc(110),n.tc(111,"i18n"),n.gc(),n.Oc(112," "),n.gc(),n.Oc(113," "),n.gc(),n.Oc(114," "),n.gc(),n.Oc(115," "),n.gc(),n.Oc(116," ")),2&e&&(n.Rb("aria-label",n.uc(1,25,"settings")),n.Qb(12),n.Qc(" ",n.uc(13,27,"selfHostedEnvironment")," "),n.Qb(8),n.Qc("",n.uc(21,29,"baseUrl")," 'https://fqdn.mycozy.cloud/bitwarden'"),n.Qb(3),n.Bc("placeholder","",n.uc(24,31,"ex")," https://bitwarden.company.com"),n.zc("ngModel",t.baseUrl),n.Qb(6),n.Qc(" ",n.uc(30,33,"selfHostedEnvironmentFooter")," "),n.Qb(8),n.Ac("appA11yTitle",n.uc(38,35,"toggleVisibility")),n.Qb(3),n.zc("hidden",t.showCustom),n.Qb(2),n.zc("hidden",!t.showCustom),n.Qb(1),n.Qc(" ",n.uc(44,37,"customEnvironment")," "),n.Qb(4),n.zc("hidden",!t.showCustom),n.Qb(5),n.Pc(n.uc(53,39,"webVaultUrl")),n.Qb(3),n.zc("ngModel",t.webVaultUrl),n.Qb(6),n.Pc(n.uc(62,41,"apiUrl")),n.Qb(3),n.zc("ngModel",t.apiUrl),n.Qb(6),n.Pc(n.uc(71,43,"identityUrl")),n.Qb(3),n.zc("ngModel",t.identityUrl),n.Qb(6),n.Pc(n.uc(80,45,"notificationsUrl")),n.Qb(3),n.zc("ngModel",t.notificationsUrl),n.Qb(6),n.Pc(n.uc(89,47,"iconsUrl")),n.Qb(3),n.zc("ngModel",t.iconsUrl),n.Qb(4),n.zc("hidden",!t.showCustom),n.Qb(1),n.Qc(" ",n.uc(97,49,"customEnvironmentFooter")," "),n.Qb(7),n.Ac("appA11yTitle",n.uc(104,51,"save")),n.Qb(7),n.Pc(n.uc(111,53,"close")))},directives:[dr.p,dr.g,dr.h,pr,dr.b,dr.f,dr.i,Mr,fr],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Br,[{type:n.l,args:[{selector:"app-environment",templateUrl:"environment.component.html"}]}],(function(){return[{type:A.a},{type:k},{type:I.a}]}),null);class Lr{}var _r=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const jr="rememberedEmail",Kr="rememberEmail";class Hr{constructor(e,t,i,n,s,r,o,c,a){this.authService=e,this.router=t,this.platformUtilsService=i,this.i18nService=n,this.stateService=s,this.environmentService=r,this.passwordGenerationService=o,this.cryptoFunctionService=c,this.storageService=a,this.email="",this.rememberEmail=!0,this.masterPassword="",this.showPassword=!1,this.twoFactorRoute="2fa",this.successRoute="vault"}ngOnInit(){return _r(this,void 0,void 0,(function*(){null!=this.email&&""!==this.email||(this.email=yield this.storageService.get(jr),null==this.email&&(this.email="")),this.rememberEmail=yield this.storageService.get(Kr),null==this.rememberEmail&&(this.rememberEmail=!0),Q.a.isBrowser&&document.getElementById(null==this.email||""===this.email?"email":"masterPassword").focus()}))}submit(){return _r(this,void 0,void 0,(function*(){if(null!=this.email&&""!==this.email)if(-1!==this.email.indexOf("@"))if(null!=this.masterPassword&&""!==this.masterPassword)try{this.formPromise=this.authService.logIn(this.email,this.masterPassword);const e=yield this.formPromise;if(yield this.storageService.save(Kr,this.rememberEmail),this.rememberEmail?yield this.storageService.save(jr,this.email):yield this.storageService.remove(jr),e.twoFactor)null!=this.onSuccessfulLoginTwoFactorNavigate?this.onSuccessfulLoginTwoFactorNavigate():this.router.navigate([this.twoFactorRoute]);else{const e=yield this.storageService.get(Pr.a.disableFaviconKey);yield this.stateService.save(Pr.a.disableFaviconKey,!!e),null!=this.onSuccessfulLogin&&this.onSuccessfulLogin(),null!=this.onSuccessfulLoginNavigate?this.onSuccessfulLoginNavigate():this.router.navigate([this.successRoute])}}catch(e){}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassRequired"));else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidEmail"));else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("emailRequired"))}))}togglePassword(){this.showPassword=!this.showPassword,document.getElementById("masterPassword").focus()}launchSsoBrowser(e,t){return _r(this,void 0,void 0,(function*(){const i={type:"password",length:64,uppercase:!0,lowercase:!0,numbers:!0,special:!1},n=yield this.passwordGenerationService.generatePassword(i),s=yield this.passwordGenerationService.generatePassword(i),r=yield this.cryptoFunctionService.hash(s,"sha256"),o=Q.a.fromBufferToUrlB64(r);yield this.storageService.save(Pr.a.ssoStateKey,n),yield this.storageService.save(Pr.a.ssoCodeVerifierKey,s);const c=null==this.environmentService.getWebVaultUrl()?"https://vault.bitwarden.com":this.environmentService.getWebVaultUrl();this.platformUtilsService.launchUri(c+"/#/sso?clientId="+e+"&redirectUri="+encodeURIComponent(t)+"&state="+n+"&codeChallenge="+o)}))}}Hr.ɵfac=function(e){return new(e||Hr)(n.cc(S),n.cc(c.b),n.cc(A.a),n.cc(I.a),n.cc(br.a),n.cc(k),n.cc(D),n.cc(Lr),n.cc(wr.a))},Hr.ɵdir=n.Xb({type:Hr,inputs:{email:"email",rememberEmail:"rememberEmail"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Hr,[{type:n.q}],(function(){return[{type:S},{type:c.b},{type:A.a},{type:I.a},{type:br.a},{type:k},{type:D},{type:Lr},{type:wr.a}]}),{email:[{type:n.D}],rememberEmail:[{type:n.D}]});const Wr=["container"];function qr(e,t){}class Gr{constructor(e,t){this.componentFactoryResolver=e,this.messagingService=t,this.onClose=new n.t,this.onClosed=new n.t,this.onShow=new n.t,this.onShown=new n.t,this.parentContainer=null,this.fade=!0}ngOnDestroy(){document.body.classList.remove("modal-open"),document.body.removeChild(document.querySelector(".modal-backdrop"))}show(e,t,i=!0,n=null){this.onShow.emit(),this.messagingService.send("modalShow"),this.parentContainer=t,this.fade=i,document.body.classList.add("modal-open");const s=document.createElement("div");s.className="modal-backdrop"+(this.fade?" fade":""),document.body.appendChild(s);const r=this.componentFactoryResolver.resolveComponentFactory(e),o=this.container.createComponent(r);null!=n&&n(o.instance),document.querySelector(".modal-dialog").addEventListener("click",e=>{e.stopPropagation()});const c=Array.from(document.querySelectorAll('.modal, .modal *[data-dismiss="modal"]'));for(const e of c)e.addEventListener("click",e=>{this.close()});return this.onShown.emit(),this.messagingService.send("modalShown"),o.instance}close(){this.onClose.emit(),this.messagingService.send("modalClose"),this.onClosed.emit(),this.messagingService.send("modalClosed"),null!=this.parentContainer&&this.parentContainer.clear()}}Gr.ɵfac=function(e){return new(e||Gr)(n.cc(n.m),n.cc(a.a))},Gr.ɵcmp=n.Wb({type:Gr,selectors:[["app-modal"]],viewQuery:function(e,t){if(1&e&&n.Sc(Wr,3,n.fb),2&e){let e;n.Fc(e=n.pc())&&(t.container=e.first)}},outputs:{onClose:"onClose",onClosed:"onClosed",onShow:"onShow",onShown:"onShown"},decls:2,vars:0,consts:[["container",""]],template:function(e,t){1&e&&n.Mc(0,qr,0,0,"ng-template",null,0,n.Nc)},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Gr,[{type:n.l,args:[{selector:"app-modal",template:"<ng-template #container></ng-template>"}]}],(function(){return[{type:n.m},{type:a.a}]}),{onClose:[{type:n.O}],onClosed:[{type:n.O}],onShow:[{type:n.O}],onShown:[{type:n.O}],container:[{type:n.eb,args:["container",{read:n.fb,static:!0}]}]});var Jr=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Yr=["environment"],$r=["masterPwdContainer"];function Xr(e,t){1&e&&(n.rc(),n.hc(0,"svg",27),n.dc(1,"path",28),n.gc())}function Zr(e,t){if(1&e&&n.dc(0,"img",29),2&e){const e=n.sc();n.zc("src",e.appIconForOIDC,n.Jc)}}function eo(e,t){if(1&e){const e=n.ic();n.hc(0,"div",30),n.Oc(1," "),n.hc(2,"label",31),n.Oc(3,'email address (required only when executed outside a Cozy app "me@fqdn.mycozy.cloud")'),n.gc(),n.Oc(4," "),n.hc(5,"input",32),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().email=t})),n.gc(),n.Oc(6," "),n.gc()}if(2&e){const e=n.sc();n.Qb(5),n.zc("ngModel",e.email)}}function to(e,t){if(1&e){const e=n.ic();n.hc(0,"a",33),n.oc("click",(function(){n.Hc(e);return n.sc().settings()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",34),n.hc(4,"span",35),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.gc()}2&e&&(n.Rb("aria-label",n.uc(1,2,"settings")),n.Qb(5),n.Qc(" ",n.uc(6,4,"settings"),""))}function io(e,t){}const no="rememberedEmail",so="rememberEmail";class ro extends Hr{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g){super(e,t,r,i,o,c,a,l,d),this.componentFactoryResolver=s,this.localStorageService=d,this.broadcasterService=u,this.ngZone=h,this.clientService=p,this.route=g,this.showingModal=!1,this.isInCozyApp=!1,this.canAuthWithOIDC=!1,this.appIconForOIDC="images/icons-login.svg",this.queryParamsSub=void 0,super.onSuccessfulLogin=()=>n.fullSync(!0)}ngOnInit(){const e=Object.create(null,{ngOnInit:{get:()=>super.ngOnInit}});return Jr(this,void 0,void 0,(function*(){const{domain:t}=this.clientService.GetClient().getInstanceOptions(),i=t&&t.split(":")[0];if(t){this.isInCozyApp=!0,this.email="me@"+i;const e=window.location?window.location.protocol:"https:";this.baseUrl=`${e}//${t}/`,this.environmentService.setUrls({base:this.baseUrl+"bitwarden"})}yield this.checkIfClientCanAuthWithOIDC(),yield e.ngOnInit.call(this),this.broadcasterService.subscribe("LoginComponent",e=>Jr(this,void 0,void 0,(function*(){this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})}))),this.queryParamsSub=this.route.queryParams.subscribe(e=>Jr(this,void 0,void 0,(function*(){null!=e.redirectUri&&(this.redirectUri=e.redirectUri,this.successRoute=this.redirectUri)})))}))}checkIfClientCanAuthWithOIDC(){var e;return Jr(this,void 0,void 0,(function*(){this.canAuthWithOIDC=null===(e=this.clientService.GetClient().capabilities)||void 0===e?void 0:e.can_auth_with_oidc}))}ngAfterViewInit(){const e=this.masterPwdContainer.nativeElement,t=this.canAuthWithOIDC?this.i18nService.t("masterPass-oidc"):this.i18nService.t("masterPass");this._turnIntoMaterialInput(e,t)}ngOnDestroy(){var e;this.broadcasterService.unsubscribe("LoginComponent"),null===(e=this.queryParamsSub)||void 0===e||e.unsubscribe()}settings(){const e=this.componentFactoryResolver.resolveComponentFactory(Gr),t=this.environmentModal.createComponent(e).instance;t.onShown.subscribe(()=>{this.showingModal=!0}),t.onClosed.subscribe(()=>{this.showingModal=!1,t.onShown.unsubscribe(),t.onClosed.unsubscribe()});t.show(Br,this.environmentModal).onSaved.subscribe(()=>{t.close()})}onWindowHidden(){this.showPassword=!1}openHint(){window.open(this.baseUrl+"auth/passphrase_reset")}_turnIntoMaterialInput(e,t){const i=e.querySelector("input");e.querySelectorAll("label").forEach(e=>{e.textContent=t}),e.addEventListener("click",()=>{i.focus()});let n=!1;const s=i.placeholder;i.value&&(e.classList.add("focused-or-filled"),i.placeholder=s,n=!0),i.addEventListener("focus",()=>{e.classList.add("focused-or-filled"),setTimeout(()=>{i.placeholder=s},100),n=!0}),i.addEventListener("blur",()=>{i.value||(e.classList.remove("focused-or-filled"),i.placeholder="",n=!1)}),i.addEventListener("input",()=>{!n&&i.value&&(e.classList.add("focused-or-filled"),i.placeholder=s,n=!0)});const r=e.querySelector(".visibility-btn");if(!r)return;const o=this;r.addEventListener("click",()=>{o.showPassword?(i.type="password",r.firstElementChild.classList.replace("fa-eye-slash","fa-eye")):(i.type="text",r.firstElementChild.classList.replace("fa-eye","fa-eye-slash")),o.showPassword=!o.showPassword})}submit(){return Jr(this,void 0,void 0,(function*(){if(null!=this.email&&""!==this.email)if(-1!==this.email.indexOf("@"))if(null!=this.masterPassword&&""!==this.masterPassword)try{this.formPromise=this.authService.logIn(this.email,this.masterPassword);const e=yield this.formPromise;if(yield this.localStorageService.save(so,this.rememberEmail),this.rememberEmail?yield this.localStorageService.save(no,this.email):yield this.localStorageService.remove(no),e.twoFactor)null!=this.onSuccessfulLoginTwoFactorNavigate?this.onSuccessfulLoginTwoFactorNavigate():this.router.navigate([this.twoFactorRoute]);else{const e=yield this.localStorageService.get(Pr.a.disableFaviconKey);yield this.stateService.save(Pr.a.disableFaviconKey,!!e),null!=this.onSuccessfulLogin&&this.onSuccessfulLogin(),null!=this.onSuccessfulLoginNavigate?this.onSuccessfulLoginNavigate():this.router.navigateByUrl(this.successRoute)}}catch(e){}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassRequired"));else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidEmail"));else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("emailRequired"))}))}}ro.ɵfac=function(e){return new(e||ro)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(M),n.cc(n.m),n.cc(A.a),n.cc(br.a),n.cc(k),n.cc(D),n.cc(Lr),n.cc(wr.a),n.cc(Sr),n.cc(n.M),n.cc(y),n.cc(c.a))},ro.ɵcmp=n.Wb({type:ro,selectors:[["app-login"]],viewQuery:function(e,t){if(1&e&&(n.Sc(Yr,3,n.fb),n.Sc($r,1)),2&e){let e;n.Fc(e=n.pc())&&(t.environmentModal=e.first),n.Fc(e=n.pc())&&(t.masterPwdContainer=e.first)}},features:[n.Nb],decls:80,vars:25,consts:[["id","login-page",3,"appApiAction","ngSubmit"],["form",""],[1,"content"],["alt","Bitwarden",1,"logo-image"],[1,"lead"],[1,"box","last"],[1,"box-content"],["width","96","height","64","class","u-mb-half",4,"ngIf"],["width","96","height","64","class","u-mb-half",3,"src",4,"ngIf"],["class","box-content-row","appBoxRow","",4,"ngIf"],[1,"row","material-input","eyed"],["masterPwdContainer",""],[1,"visible-label"],[1,"shadow-placeholder"],[1,"box-labeled-input"],[1,"shadow-label"],[1,"box-input"],["id","masterPassword","inputmode","url","name","MasterPassword","placeholder","","type","password","required","",3,"ngModel","ngModelChange"],["id","visi-pwd-btn",1,"visibility-btn"],[1,"fa","fa-mg","fa-eye"],[3,"click"],[1,"buttons-row"],["type","submit","appBlurClick","",1,"btn","primary","block",3,"disabled"],[3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"hidden"],["href","#","appStopClick","","class","settings-icon",3,"click",4,"ngIf"],["environment",""],["width","96","height","64",1,"u-mb-half"],["fill","#FFF","fill-rule","evenodd","d","M80 32c8.837 0 16 7.163 16 16s-7.163 16-16 16-16-7.163-16-16 7.163-16 16-16zm0 8c-2.206 0-4 1.794-4 4v2h-1c-.552 0-1 .456-1 .995v8.01c0 .55.456.995 1.002.995h9.996c.553 0 1.002-.456 1.002-.995v-8.01A.995.995 0 0085 46h-1v-2c0-2.206-1.795-4-4-4zm0 8.5c.826 0 1.5.672 1.5 1.5 0 .552-.305 1.032-.75 1.29v2.46a.751.751 0 01-1.5 0v-2.46A1.49 1.49 0 0178.5 50a1.5 1.5 0 011.5-1.5zM47.755 0c4.455 0 8.665 1.689 11.85 4.762 2.779 2.679 4.507 6.147 4.97 9.9 8.201.724 14.74 7.229 15.374 15.339L80 30c-9.941 0-18 8.059-18 18H32.946C23.6 48 16 40.507 16 31.297c0-4.393 1.716-8.542 4.833-11.681a16.942 16.942 0 0110.096-4.903c.452-3.772 2.185-7.26 4.975-9.95C39.09 1.689 43.298 0 47.754 0zM80 42c1.103 0 2 1.121 2 2.5V46h-4v-1.5c0-1.379.897-2.5 2-2.5zM55.386 28a1.132 1.132 0 00-1.113 1.154c.011.203.02.3.056.51.04.227.096.46.172.692-3.7 3.16-9.297 3.168-13.007.023.165-.49.233-.942.233-1.234a1.13 1.13 0 00-1.104-1.143 1.136 1.136 0 00-1.157 1.1c0 .11-.04.36-.135.618-.153.419-.41.771-.802 1.017a1.136 1.136 0 00-.333 1.597 1.127 1.127 0 001.538.323 4.21 4.21 0 00.505-.375C42.426 34.054 45.163 35 47.986 35c2.83 0 5.573-.95 7.764-2.73.16.141.332.27.517.387a1.134 1.134 0 001.307-1.848l-.101-.073-.077-.048a1.9 1.9 0 01-.546-.589 2.312 2.312 0 01-.316-1.003A1.128 1.128 0 0055.386 28z"],["width","96","height","64",1,"u-mb-half",3,"src"],["appBoxRow","",1,"box-content-row"],["for","email"],["id","email","type","text","name","Email","required","",3,"ngModel","ngModelChange"],["href","#","appStopClick","",1,"settings-icon",3,"click"],["aria-hidden","true",1,"fa","fa-cog","fa-lg"],["aria-hidden","true"]],template:function(e,t){if(1&e&&(n.hc(0,"form",0,1),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.dc(5,"img",3),n.Oc(6," "),n.hc(7,"p",4),n.Oc(8),n.tc(9,"i18n"),n.gc(),n.Oc(10," "),n.hc(11,"div",5),n.Oc(12," "),n.hc(13,"div",6),n.Oc(14," "),n.Mc(15,Xr,2,0,"svg",7),n.Oc(16," "),n.Mc(17,Zr,1,1,"img",8),n.Oc(18," "),n.hc(19,"h1"),n.Oc(20),n.tc(21,"i18n"),n.gc(),n.Oc(22," "),n.hc(23,"p"),n.Oc(24),n.tc(25,"i18n"),n.gc(),n.Oc(26," "),n.Mc(27,eo,7,1,"div",9),n.Oc(28," "),n.hc(29,"div",10,11),n.Oc(31," "),n.hc(32,"div",12),n.Oc(33," "),n.dc(34,"label"),n.Oc(35," "),n.gc(),n.Oc(36," "),n.dc(37,"label",13),n.Oc(38," "),n.hc(39,"div",14),n.Oc(40," "),n.dc(41,"label",15),n.Oc(42," "),n.hc(43,"div",16),n.Oc(44," "),n.hc(45,"input",17),n.oc("ngModelChange",(function(e){return t.masterPassword=e})),n.gc(),n.Oc(46," "),n.hc(47,"div",18),n.Oc(48," "),n.dc(49,"i",19),n.Oc(50," "),n.gc(),n.Oc(51," "),n.gc(),n.Oc(52," "),n.gc(),n.Oc(53," "),n.gc(),n.Oc(54," "),n.hc(55,"a",20),n.oc("click",(function(){return t.openHint()})),n.Oc(56),n.tc(57,"i18n"),n.gc(),n.Oc(58," "),n.hc(59,"div",21),n.Oc(60," "),n.hc(61,"button",22),n.Oc(62," "),n.hc(63,"b",23),n.Oc(64),n.tc(65,"i18n"),n.gc(),n.Oc(66," "),n.dc(67,"i",24),n.Oc(68," "),n.gc(),n.Oc(69," "),n.gc(),n.Oc(70," "),n.gc(),n.Oc(71," "),n.gc(),n.Oc(72," "),n.Mc(73,to,8,6,"a",25),n.Oc(74," "),n.gc(),n.Oc(75," "),n.gc(),n.Oc(76," "),n.Mc(77,io,0,0,"ng-template",null,26,n.Nc),n.Oc(79," ")),2&e){const e=n.Gc(1);n.zc("appApiAction",t.formPromise),n.Rb("aria-hidden",t.showingModal),n.Qb(8),n.Pc(n.uc(9,15,"loginOrCreateNewAccount")),n.Qb(7),n.zc("ngIf",!t.canAuthWithOIDC),n.Qb(2),n.zc("ngIf",t.canAuthWithOIDC),n.Qb(3),n.Pc(n.uc(21,17,t.canAuthWithOIDC?"authentification-oidc":"authentification")),n.Qb(4),n.Pc(n.uc(25,19,"confirmYourIdentity")),n.Qb(3),n.zc("ngIf",!t.isInCozyApp),n.Qb(18),n.zc("ngModel",t.masterPassword),n.Qb(11),n.Pc(n.uc(57,21,"getMasterPasswordHint")),n.Qb(5),n.zc("disabled",e.loading),n.Qb(2),n.zc("hidden",e.loading),n.Qb(1),n.Qc(" ",n.uc(65,23,"unlock")," "),n.Qb(3),n.zc("hidden",!e.loading),n.Qb(6),n.zc("ngIf",!t.isInCozyApp)}},directives:[dr.p,dr.g,dr.h,hr,Dr.k,dr.b,dr.n,dr.f,dr.i,fr,pr,Ar],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ro,[{type:n.l,args:[{selector:"app-login",templateUrl:"login.component.html"}]}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:M},{type:n.m},{type:A.a},{type:br.a},{type:k},{type:D},{type:Lr},{type:wr.a},{type:Sr},{type:n.M},{type:y},{type:c.a}]}),{environmentModal:[{type:n.eb,args:["environment",{read:n.fb,static:!0}]}],masterPwdContainer:[{type:n.eb,args:["masterPwdContainer"]}]});class oo{constructor(e,t){this.publicKey=e,this.encryptedPrivateKey=t}}class co{constructor(e,t,i,n,s,r,o,c){this.name=t,this.email=e,this.masterPasswordHash=i,this.masterPasswordHint=n||null,this.key=s,this.kdf=r,this.kdfIterations=o,this.referenceData=c}}var ao;!function(e){e[e.PBKDF2_SHA256=0]="PBKDF2_SHA256"}(ao||(ao={}));var lo=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var uo=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function ho(e,t){if(1&e&&(n.hc(0,"strong"),n.Oc(1),n.gc()),2&e){const e=n.sc();n.Tb("sub-label text-",e.masterPasswordScoreColor,""),n.Qb(1),n.Qc(" ",e.masterPasswordScoreText," ")}}function po(e,t){if(1&e){const e=n.ic();n.hc(0,"div",30),n.Oc(1," "),n.hc(2,"div",31),n.Oc(3," "),n.hc(4,"input",32),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().acceptPolicies=t})),n.gc(),n.Oc(5," "),n.hc(6,"label",33),n.Oc(7),n.tc(8,"i18n"),n.dc(9,"br"),n.Oc(10," "),n.hc(11,"a",34),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14,", "),n.hc(15,"a",35),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc()}if(2&e){const e=n.sc();n.Qb(4),n.zc("ngModel",e.acceptPolicies),n.Qb(3),n.Qc(" ",n.uc(8,4,"acceptPolicies"),""),n.Qb(5),n.Pc(n.uc(13,6,"termsOfService")),n.Qb(4),n.Pc(n.uc(17,8,"privacyPolicy"))}}const go=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}},fo=function(e){return{width:e}};class yo extends class{constructor(e,t,i,n,s,r,o,c){this.authService=e,this.router=t,this.i18nService=i,this.cryptoService=n,this.apiService=s,this.stateService=r,this.platformUtilsService=o,this.passwordGenerationService=c,this.name="",this.email="",this.masterPassword="",this.confirmMasterPassword="",this.hint="",this.showPassword=!1,this.showTerms=!0,this.acceptPolicies=!1,this.successRoute="login",this.showTerms=!o.isSelfHost()}get masterPasswordScoreWidth(){return null==this.masterPasswordScore?0:20*(this.masterPasswordScore+1)}get masterPasswordScoreColor(){switch(this.masterPasswordScore){case 4:return"success";case 3:return"primary";case 2:return"warning";default:return"danger"}}get masterPasswordScoreText(){switch(this.masterPasswordScore){case 4:return this.i18nService.t("strong");case 3:return this.i18nService.t("good");case 2:return this.i18nService.t("weak");default:return null!=this.masterPasswordScore?this.i18nService.t("weak"):null}}submit(){return lo(this,void 0,void 0,(function*(){if(!this.acceptPolicies&&this.showTerms)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("acceptPoliciesError"));if(null==this.email||""===this.email)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("emailRequired"));if(-1===this.email.indexOf("@"))return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("invalidEmail"));if(null==this.masterPassword||""===this.masterPassword)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassRequired"));if(this.masterPassword.length<8)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassLength"));if(this.masterPassword!==this.confirmMasterPassword)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassDoesntMatch"));const e=this.passwordGenerationService.passwordStrength(this.masterPassword,this.getPasswordStrengthUserInput());if(null!=e&&e.score<3){if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("weakMasterPasswordDesc"),this.i18nService.t("weakMasterPassword"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return}if(this.hint===this.masterPassword)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("hintEqualsPassword"));this.name=""===this.name?null:this.name,this.email=this.email.trim().toLowerCase();const t=ao.PBKDF2_SHA256,i=this.platformUtilsService.isIE()?1e4:1e5,n=yield this.cryptoService.makeKey(this.masterPassword,this.email,t,i),s=yield this.cryptoService.makeEncKey(n),r=yield this.cryptoService.hashPassword(this.masterPassword,n),o=yield this.cryptoService.makeKeyPair(s[0]),c=new co(this.email,this.name,r,this.hint,s[1].encryptedString,t,i,this.referenceData);c.keys=new oo(o[0],o[1].encryptedString);const a=yield this.stateService.get("orgInvitation");null!=a&&null!=a.token&&null!=a.organizationUserId&&(c.token=a.token,c.organizationUserId=a.organizationUserId);try{this.formPromise=this.apiService.postRegister(c),yield this.formPromise,this.platformUtilsService.showToast("success",null,this.i18nService.t("newAccountCreated")),this.router.navigate([this.successRoute],{queryParams:{email:this.email}})}catch(e){}}))}togglePassword(e){this.showPassword=!this.showPassword,document.getElementById(e?"masterPasswordRetype":"masterPassword").focus()}updatePasswordStrength(){null!=this.masterPasswordStrengthTimeout&&clearTimeout(this.masterPasswordStrengthTimeout),this.masterPasswordStrengthTimeout=setTimeout(()=>{const e=this.passwordGenerationService.passwordStrength(this.masterPassword,this.getPasswordStrengthUserInput());this.masterPasswordScore=null==e?null:e.score},300)}getPasswordStrengthUserInput(){let e=[];const t=this.email.indexOf("@");return t>-1&&(e=e.concat(this.email.substr(0,t).trim().toLowerCase().split(/[^A-Za-z0-9]/))),null!=this.name&&""!==this.name&&(e=e.concat(this.name.trim().toLowerCase().split(" "))),e}}{constructor(e,t,i,n,s,r,o,c,a,l){super(e,t,i,n,s,r,o,c),this.broadcasterService=a,this.ngZone=l}ngOnInit(){return uo(this,void 0,void 0,(function*(){this.broadcasterService.subscribe("RegisterComponent",e=>uo(this,void 0,void 0,(function*(){this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})})))}))}ngOnDestroy(){this.broadcasterService.unsubscribe("RegisterComponent")}onWindowHidden(){this.showPassword=!1}}yo.ɵfac=function(e){return new(e||yo)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(x.a),n.cc(O),n.cc(br.a),n.cc(A.a),n.cc(D),n.cc(Sr),n.cc(n.M))},yo.ɵcmp=n.Wb({type:yo,selectors:[["app-register"]],features:[n.Nb],decls:119,vars:62,consts:[["id","register-page",3,"appApiAction","ngSubmit"],["form",""],[1,"content"],[1,"box"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","email"],["id","email","type","text","name","Email","required","",3,"ngModel","appAutofocus","ngModelChange"],[1,"box-content-row-flex"],[1,"row-main"],["for","masterPassword"],[3,"class",4,"ngIf"],["id","masterPassword","name","MasterPassword","required","",1,"monospaced",3,"type","ngModel","appAutofocus","ngModelChange","input"],[1,"action-buttons"],["href","#","appStopClick","","appBlurClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],[1,"progress"],["role","progressbar","aria-valuenow","0","aria-valuemin","0","aria-valuemax","100",3,"ngStyle"],[1,"box-footer"],["appBoxRow","",1,"box-content-row","box-content-row-flex"],["for","masterPasswordRetype"],["id","masterPasswordRetype","name","MasterPasswordRetype","required","",1,"monospaced",3,"type","ngModel","ngModelChange"],["for","hint"],["id","hint","type","text","name","Hint",3,"ngModel","ngModelChange"],["class","box last",4,"ngIf"],[1,"buttons"],["type","submit","appBlurClick","",1,"btn","primary","block",3,"disabled"],[3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"hidden"],["routerLink","/login",1,"btn","block"],[1,"box","last"],[1,"box-footer","checkbox"],["type","checkbox","id","acceptPolicies","name","AcceptPolicies",3,"ngModel","ngModelChange"],["for","acceptPolicies"],["href","https://bitwarden.com/terms/","target","_blank","rel","noopener"],["href","https://bitwarden.com/privacy/","target","_blank","rel","noopener"]],template:function(e,t){if(1&e&&(n.hc(0,"form",0,1),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.hc(5,"h1"),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.hc(9,"div",3),n.Oc(10," "),n.hc(11,"div",4),n.Oc(12," "),n.hc(13,"div",5),n.Oc(14," "),n.hc(15,"label",6),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",7),n.oc("ngModelChange",(function(e){return t.email=e})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.hc(22,"div",5),n.Oc(23," "),n.hc(24,"div",8),n.Oc(25," "),n.hc(26,"div",9),n.Oc(27," "),n.hc(28,"label",10),n.Oc(29),n.tc(30,"i18n"),n.Mc(31,ho,2,4,"strong",11),n.Oc(32," "),n.gc(),n.Oc(33," "),n.hc(34,"input",12),n.oc("ngModelChange",(function(e){return t.masterPassword=e}))("input",(function(){return t.updatePasswordStrength()})),n.gc(),n.Oc(35," "),n.gc(),n.Oc(36," "),n.hc(37,"div",13),n.Oc(38," "),n.hc(39,"a",14),n.oc("click",(function(){return t.togglePassword(!1)})),n.tc(40,"i18n"),n.Oc(41," "),n.dc(42,"i",15),n.Oc(43," "),n.gc(),n.Oc(44," "),n.gc(),n.Oc(45," "),n.gc(),n.Oc(46," "),n.hc(47,"div",16),n.Oc(48," "),n.dc(49,"div",17),n.Oc(50," "),n.gc(),n.Oc(51," "),n.gc(),n.Oc(52," "),n.gc(),n.Oc(53," "),n.hc(54,"div",18),n.Oc(55),n.tc(56,"i18n"),n.gc(),n.Oc(57," "),n.gc(),n.Oc(58," "),n.hc(59,"div",3),n.Oc(60," "),n.hc(61,"div",4),n.Oc(62," "),n.hc(63,"div",19),n.Oc(64," "),n.hc(65,"div",9),n.Oc(66," "),n.hc(67,"label",20),n.Oc(68),n.tc(69,"i18n"),n.gc(),n.Oc(70," "),n.hc(71,"input",21),n.oc("ngModelChange",(function(e){return t.confirmMasterPassword=e})),n.gc(),n.Oc(72," "),n.gc(),n.Oc(73," "),n.hc(74,"div",13),n.Oc(75," "),n.hc(76,"a",14),n.oc("click",(function(){return t.togglePassword(!0)})),n.tc(77,"i18n"),n.Oc(78," "),n.dc(79,"i",15),n.Oc(80," "),n.gc(),n.Oc(81," "),n.gc(),n.Oc(82," "),n.gc(),n.Oc(83," "),n.hc(84,"div",5),n.Oc(85," "),n.hc(86,"label",22),n.Oc(87),n.tc(88,"i18n"),n.gc(),n.Oc(89," "),n.hc(90,"input",23),n.oc("ngModelChange",(function(e){return t.hint=e})),n.gc(),n.Oc(91," "),n.gc(),n.Oc(92," "),n.gc(),n.Oc(93," "),n.hc(94,"div",18),n.Oc(95),n.tc(96,"i18n"),n.gc(),n.Oc(97," "),n.gc(),n.Oc(98," "),n.Mc(99,po,21,10,"div",24),n.Oc(100," "),n.hc(101,"div",25),n.Oc(102," "),n.hc(103,"button",26),n.Oc(104," "),n.hc(105,"b",27),n.Oc(106),n.tc(107,"i18n"),n.gc(),n.Oc(108," "),n.dc(109,"i",28),n.Oc(110," "),n.gc(),n.Oc(111," "),n.hc(112,"a",29),n.Oc(113),n.tc(114,"i18n"),n.gc(),n.Oc(115," "),n.gc(),n.Oc(116," "),n.gc(),n.Oc(117," "),n.gc(),n.Oc(118," ")),2&e){const e=n.Gc(1);n.zc("appApiAction",t.formPromise),n.Qb(6),n.Pc(n.uc(7,32,"createAccount")),n.Qb(10),n.Pc(n.uc(17,34,"emailAddress")),n.Qb(3),n.zc("ngModel",t.email)("appAutofocus",""===t.email),n.Qb(10),n.Qc(" ",n.uc(30,36,"masterPass")," "),n.Qb(2),n.zc("ngIf",t.masterPasswordScoreText),n.Qb(3),n.Ac("type",t.showPassword?"text":"password"),n.zc("ngModel",t.masterPassword)("appAutofocus",""!==t.email),n.Qb(5),n.Ac("appA11yTitle",n.uc(40,38,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(54,go,!t.showPassword,t.showPassword)),n.Qb(7),n.Tb("progress-bar bg-",t.masterPasswordScoreColor,""),n.zc("ngStyle",n.Dc(57,fo,t.masterPasswordScoreWidth+"%")),n.Rb("aria-valuenow",t.masterPasswordScoreWidth),n.Qb(6),n.Qc(" ",n.uc(56,40,"masterPassDesc")," "),n.Qb(13),n.Pc(n.uc(69,42,"reTypeMasterPass")),n.Qb(3),n.Ac("type",t.showPassword?"text":"password"),n.zc("ngModel",t.confirmMasterPassword),n.Qb(5),n.Ac("appA11yTitle",n.uc(77,44,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(59,go,!t.showPassword,t.showPassword)),n.Qb(8),n.Pc(n.uc(88,46,"masterPassHint")),n.Qb(3),n.zc("ngModel",t.hint),n.Qb(5),n.Qc(" ",n.uc(96,48,"masterPassHintDesc")," "),n.Qb(4),n.zc("ngIf",t.showTerms),n.Qb(4),n.zc("disabled",e.loading),n.Qb(2),n.zc("hidden",e.loading),n.Qb(1),n.Pc(n.uc(107,50,"submit")),n.Qb(3),n.zc("hidden",!e.loading),n.Qb(4),n.Pc(n.uc(114,52,"cancel"))}},directives:[dr.p,dr.g,dr.h,hr,pr,dr.b,dr.n,dr.f,dr.i,gr,Dr.k,Ar,fr,Mr,Dr.i,Dr.l,c.d,dr.a],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(yo,[{type:n.l,args:[{selector:"app-register",templateUrl:"register.component.html"}]}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:x.a},{type:O},{type:br.a},{type:A.a},{type:D},{type:Sr},{type:n.M}]}),null);class mo{}class vo{}var bo=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class wo{constructor(e,t,i,n,s,r,o){this.i18nService=e,this.cryptoService=t,this.messagingService=i,this.userService=n,this.passwordGenerationService=s,this.platformUtilsService=r,this.policyService=o}ngOnInit(){return bo(this,void 0,void 0,(function*(){this.email=yield this.userService.getEmail(),this.enforcedPolicyOptions=yield this.policyService.getMasterPasswordPolicyOptions()}))}getPasswordScoreAlertDisplay(){if(null==this.enforcedPolicyOptions)return"";let e;switch(this.enforcedPolicyOptions.minComplexity){case 4:e=this.i18nService.t("strong");break;case 3:e=this.i18nService.t("good");break;default:e=this.i18nService.t("weak")}return e+" ("+this.enforcedPolicyOptions.minComplexity+")"}submit(){return bo(this,void 0,void 0,(function*(){if(!(yield this.strongPassword()))return;if(!(yield this.setupSubmitActions()))return;const e=yield this.userService.getEmail();null==this.kdf&&(this.kdf=yield this.userService.getKdf()),null==this.kdfIterations&&(this.kdfIterations=yield this.userService.getKdfIterations());const t=yield this.cryptoService.makeKey(this.masterPassword,e.trim().toLowerCase(),this.kdf,this.kdfIterations),i=yield this.cryptoService.hashPassword(this.masterPassword,t);let n=null;n=null==(yield this.cryptoService.getEncKey())?yield this.cryptoService.makeEncKey(t):yield this.cryptoService.remakeEncKey(t),yield this.performSubmitActions(i,t,n)}))}setupSubmitActions(){return bo(this,void 0,void 0,(function*(){return!0}))}performSubmitActions(e,t,i){return bo(this,void 0,void 0,(function*(){}))}strongPassword(){return bo(this,void 0,void 0,(function*(){if(null==this.masterPassword||""===this.masterPassword)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassRequired")),!1;if(this.masterPassword.length<8)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassLength")),!1;if(this.masterPassword!==this.masterPasswordRetype)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassDoesntMatch")),!1;const e=this.passwordGenerationService.passwordStrength(this.masterPassword,this.getPasswordStrengthUserInput());if(null!=this.enforcedPolicyOptions&&!this.policyService.evaluateMasterPassword(e.score,this.masterPassword,this.enforcedPolicyOptions))return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPasswordPolicyRequirementsNotMet")),!1;if(null!=e&&e.score<3){if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("weakMasterPasswordDesc"),this.i18nService.t("weakMasterPassword"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1}return!0}))}updatePasswordStrength(){null!=this.masterPasswordStrengthTimeout&&clearTimeout(this.masterPasswordStrengthTimeout),this.masterPasswordStrengthTimeout=setTimeout(()=>{const e=this.passwordGenerationService.passwordStrength(this.masterPassword,this.getPasswordStrengthUserInput());this.masterPasswordScore=null==e?null:e.score},300)}logOut(){return bo(this,void 0,void 0,(function*(){(yield this.platformUtilsService.showDialog(this.i18nService.t("logOutConfirmation"),this.i18nService.t("logOut"),this.i18nService.t("logOut"),this.i18nService.t("cancel")))&&this.messagingService.send("logout")}))}getPasswordStrengthUserInput(){let e=[];const t=this.email.indexOf("@");return t>-1&&(e=e.concat(this.email.substr(0,t).trim().toLowerCase().split(/[^A-Za-z0-9]/))),e}}wo.ɵfac=function(e){return new(e||wo)(n.cc(I.a),n.cc(x.a),n.cc(a.a),n.cc(z.a),n.cc(D),n.cc(A.a),n.cc(mo))},wo.ɵdir=n.Xb({type:wo}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(wo,[{type:n.q}],(function(){return[{type:I.a},{type:x.a},{type:a.a},{type:z.a},{type:D},{type:A.a},{type:mo}]}),null);var Oo=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class So extends wo{constructor(e,t,i,n,s,r,o,c,a,l,d){super(e,t,i,n,s,r,o),this.router=c,this.apiService=a,this.syncService=l,this.route=d,this.syncLoading=!0,this.showPassword=!1,this.hint="",this.identifier=null,this.successRoute="vault"}ngOnInit(){const e=Object.create(null,{ngOnInit:{get:()=>super.ngOnInit}});return Oo(this,void 0,void 0,(function*(){yield this.syncService.fullSync(!0),this.syncLoading=!1;const t=this.route.queryParams.subscribe(e=>Oo(this,void 0,void 0,(function*(){null!=e.identifier&&(this.identifier=e.identifier),null!=t&&t.unsubscribe()})));e.ngOnInit.call(this)}))}setupSubmitActions(){return Oo(this,void 0,void 0,(function*(){this.kdf=ao.PBKDF2_SHA256;const e=this.platformUtilsService.isIE();return this.kdfIterations=e?1e4:1e5,!0}))}performSubmitActions(e,t,i){return Oo(this,void 0,void 0,(function*(){const n=new vo;n.masterPasswordHash=e,n.key=i[1].encryptedString,n.masterPasswordHint=this.hint,n.kdf=this.kdf,n.kdfIterations=this.kdfIterations,n.orgIdentifier=this.identifier;const s=yield this.cryptoService.makeKeyPair(i[0]);n.keys=new oo(s[0],s[1].encryptedString);try{this.formPromise=this.apiService.setPassword(n),yield this.formPromise,yield this.userService.setInformation(yield this.userService.getUserId(),yield this.userService.getEmail(),this.kdf,this.kdfIterations),yield this.cryptoService.setKey(t),yield this.cryptoService.setKeyHash(e),yield this.cryptoService.setEncKey(i[1].encryptedString),yield this.cryptoService.setEncPrivateKey(s[1].encryptedString),null!=this.onSuccessfulChangePassword?this.onSuccessfulChangePassword():this.router.navigate([this.successRoute])}catch(e){this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred"))}}))}togglePassword(e){this.showPassword=!this.showPassword,document.getElementById(e?"masterPasswordRetype":"masterPassword").focus()}}function Co(e,t){if(1&e&&n.dc(0,"i",4),2&e){const e=n.sc(2);n.Tb("fa ",e.icon,"")}}function Po(e,t){if(1&e&&(n.hc(0,"h3",2),n.Oc(1," "),n.Mc(2,Co,1,3,"i",3),n.Oc(3),n.gc()),2&e){const e=n.sc();n.Qb(2),n.zc("ngIf",e.icon),n.Qb(1),n.Qc(" ",e.title," ")}}So.ɵfac=function(e){return new(e||So)(n.cc(I.a),n.cc(x.a),n.cc(a.a),n.cc(z.a),n.cc(D),n.cc(A.a),n.cc(mo),n.cc(c.b),n.cc(O),n.cc(M),n.cc(c.a))},So.ɵdir=n.Xb({type:So,features:[n.Nb]}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(So,[{type:n.q}],(function(){return[{type:I.a},{type:x.a},{type:a.a},{type:z.a},{type:D},{type:A.a},{type:mo},{type:c.b},{type:O},{type:M},{type:c.a}]}),null);const xo=function(e){return{clickable:e}};class ko{constructor(e){this.i18nService=e,this.type="info"}ngOnInit(){this.calloutStyle=this.type,"warning"===this.type||"danger"===this.type?("danger"===this.type&&(this.calloutStyle="danger"),void 0===this.title&&(this.title=this.i18nService.t("warning")),void 0===this.icon&&(this.icon="fa-warning")):"error"===this.type?(this.calloutStyle="danger",void 0===this.title&&(this.title=this.i18nService.t("error")),void 0===this.icon&&(this.icon="fa-bolt")):"tip"===this.type&&(this.calloutStyle="success",void 0===this.title&&(this.title=this.i18nService.t("tip")),void 0===this.icon&&(this.icon="fa-lightbulb-o"))}}ko.ɵfac=function(e){return new(e||ko)(n.cc(I.a))},ko.ɵcmp=n.Wb({type:ko,selectors:[["app-callout"]],inputs:{type:"type",icon:"icon",title:"title",clickable:"clickable"},ngContentSelectors:["*"],decls:7,vars:7,consts:[["role","alert",3,"ngClass"],["class","callout-heading",4,"ngIf"],[1,"callout-heading"],["aria-hidden","true",3,"class",4,"ngIf"],["aria-hidden","true"]],template:function(e,t){1&e&&(n.yc(),n.hc(0,"div",0),n.Oc(1," "),n.Mc(2,Po,4,2,"h3",1),n.Oc(3," "),n.xc(4),n.Oc(5," "),n.gc(),n.Oc(6," ")),2&e&&(n.Tb("callout callout-",t.calloutStyle,""),n.zc("ngClass",n.Dc(5,xo,t.clickable)),n.Qb(2),n.zc("ngIf",t.title))},directives:[Dr.i,Dr.k],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ko,[{type:n.l,args:[{selector:"app-callout",templateUrl:"callout.component.html"}]}],(function(){return[{type:I.a}]}),{type:[{type:n.D}],icon:[{type:n.D}],title:[{type:n.D}],clickable:[{type:n.D}]});var To=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function Io(e,t){1&e&&(n.hc(0,"div",7),n.Oc(1," "),n.dc(2,"i",8),n.tc(3,"i18n"),n.Oc(4),n.tc(5,"i18n"),n.gc()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"loading")),n.Qb(2),n.Qc(" ",n.uc(5,4,"loading")," "))}function Do(e,t){if(1&e&&(n.hc(0,"li"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e){const e=n.sc(3);n.Qb(1),n.Qc(" ",n.vc(2,1,"policyInEffectMinComplexity",e.getPasswordScoreAlertDisplay())," ")}}function Ao(e,t){if(1&e&&(n.hc(0,"li"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e){const e=n.sc(3);n.Qb(1),n.Qc(" ",n.vc(2,1,"policyInEffectMinLength",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.minLength.toString())," ")}}function Mo(e,t){1&e&&(n.hc(0,"li"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"policyInEffectUppercase")))}function zo(e,t){1&e&&(n.hc(0,"li"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"policyInEffectLowercase")))}function Eo(e,t){1&e&&(n.hc(0,"li"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"policyInEffectNumbers")))}function Uo(e,t){1&e&&(n.hc(0,"li"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.vc(2,1,"policyInEffectSpecial","!@#$%^&*")," "))}function No(e,t){if(1&e&&(n.hc(0,"app-callout",35),n.Oc(1),n.tc(2,"i18n"),n.hc(3,"ul"),n.Oc(4," "),n.Mc(5,Do,3,4,"li",6),n.Oc(6," "),n.Mc(7,Ao,3,4,"li",6),n.Oc(8," "),n.Mc(9,Mo,3,3,"li",6),n.Oc(10," "),n.Mc(11,zo,3,3,"li",6),n.Oc(12," "),n.Mc(13,Eo,3,3,"li",6),n.Oc(14," "),n.Mc(15,Uo,3,4,"li",6),n.Oc(16," "),n.gc(),n.Oc(17," "),n.gc()),2&e){const e=n.sc(2);n.Qb(1),n.Qc(" ",n.uc(2,7,"masterPasswordPolicyInEffect")," "),n.Qb(4),n.zc("ngIf",(null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.minComplexity)>0),n.Qb(2),n.zc("ngIf",(null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.minLength)>0),n.Qb(2),n.zc("ngIf",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.requireUpper),n.Qb(2),n.zc("ngIf",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.requireLower),n.Qb(2),n.zc("ngIf",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.requireNumbers),n.Qb(2),n.zc("ngIf",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.requireSpecial)}}function Ro(e,t){if(1&e&&(n.hc(0,"strong"),n.Oc(1),n.gc()),2&e){const e=n.sc(2);n.Tb("sub-label text-",e.masterPasswordScoreColor,""),n.Qb(1),n.Qc(" ",e.masterPasswordScoreText," ")}}function Fo(e,t){1&e&&(n.dc(0,"i",8),n.tc(1,"i18n")),2&e&&n.Ac("title",n.uc(1,1,"loading"))}const Qo=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}},Vo=function(e){return{width:e}};function Bo(e,t){if(1&e){const e=n.ic();n.hc(0,"div"),n.Oc(1," "),n.hc(2,"div",9),n.Oc(3," "),n.hc(4,"app-callout",10),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.Mc(8,No,18,9,"app-callout",11),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"form",12,1),n.oc("ngSubmit",(function(){n.Hc(e);return n.sc().submit()})),n.Oc(13," "),n.hc(14,"div",9),n.Oc(15," "),n.hc(16,"div",13),n.Oc(17," "),n.hc(18,"div",14),n.Oc(19," "),n.hc(20,"div",15),n.Oc(21," "),n.hc(22,"div",16),n.Oc(23," "),n.hc(24,"label",17),n.Oc(25),n.tc(26,"i18n"),n.Mc(27,Ro,2,4,"strong",18),n.Oc(28," "),n.gc(),n.Oc(29," "),n.hc(30,"input",19),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().masterPassword=t}))("input",(function(){n.Hc(e);return n.sc().updatePasswordStrength()})),n.gc(),n.Oc(31," "),n.gc(),n.Oc(32," "),n.hc(33,"div",20),n.Oc(34," "),n.hc(35,"a",21),n.oc("click",(function(){n.Hc(e);return n.sc().togglePassword(!1)})),n.tc(36,"i18n"),n.Oc(37," "),n.dc(38,"i",22),n.Oc(39," "),n.gc(),n.Oc(40," "),n.gc(),n.Oc(41," "),n.gc(),n.Oc(42," "),n.hc(43,"div",23),n.Oc(44," "),n.hc(45,"div",24),n.Oc(46," "),n.gc(),n.Oc(47," "),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.gc(),n.Oc(50," "),n.hc(51,"div",25),n.Oc(52),n.tc(53,"i18n"),n.gc(),n.Oc(54," "),n.gc(),n.Oc(55," "),n.hc(56,"div",9),n.Oc(57," "),n.hc(58,"div",13),n.Oc(59," "),n.hc(60,"div",14),n.Oc(61," "),n.hc(62,"div",15),n.Oc(63," "),n.hc(64,"div",16),n.Oc(65," "),n.hc(66,"label",26),n.Oc(67),n.tc(68,"i18n"),n.gc(),n.Oc(69," "),n.hc(70,"input",27),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().masterPasswordRetype=t})),n.gc(),n.Oc(71," "),n.gc(),n.Oc(72," "),n.hc(73,"div",20),n.Oc(74," "),n.hc(75,"a",21),n.oc("click",(function(){n.Hc(e);return n.sc().togglePassword(!0)})),n.tc(76,"i18n"),n.Oc(77," "),n.dc(78,"i",22),n.Oc(79," "),n.gc(),n.Oc(80," "),n.gc(),n.Oc(81," "),n.gc(),n.Oc(82," "),n.gc(),n.Oc(83," "),n.gc(),n.Oc(84," "),n.gc(),n.Oc(85," "),n.hc(86,"div",28),n.Oc(87," "),n.hc(88,"div",13),n.Oc(89," "),n.hc(90,"div",14),n.Oc(91," "),n.hc(92,"label",29),n.Oc(93),n.tc(94,"i18n"),n.gc(),n.Oc(95," "),n.hc(96,"input",30),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().hint=t})),n.gc(),n.Oc(97," "),n.gc(),n.Oc(98," "),n.gc(),n.Oc(99," "),n.hc(100,"div",25),n.Oc(101),n.tc(102,"i18n"),n.gc(),n.Oc(103," "),n.gc(),n.Oc(104," "),n.hc(105,"div",31),n.Oc(106," "),n.hc(107,"button",32),n.Oc(108," "),n.Mc(109,Fo,2,3,"i",33),n.Oc(110," "),n.hc(111,"span"),n.Oc(112),n.tc(113,"i18n"),n.gc(),n.Oc(114," "),n.gc(),n.Oc(115," "),n.hc(116,"button",34),n.oc("click",(function(){n.Hc(e);return n.sc().logOut()})),n.Oc(117," "),n.hc(118,"span"),n.Oc(119),n.tc(120,"i18n"),n.gc(),n.Oc(121," "),n.gc(),n.Oc(122," "),n.gc(),n.Oc(123," "),n.gc(),n.Oc(124," "),n.gc()}if(2&e){const e=n.Gc(12),t=n.sc();n.Qb(5),n.Pc(n.uc(6,26,"ssoCompleteRegistration")),n.Qb(3),n.zc("ngIf",t.enforcedPolicyOptions),n.Qb(3),n.zc("appApiAction",t.formPromise),n.Qb(14),n.Qc("",n.uc(26,28,"masterPass")," "),n.Qb(2),n.zc("ngIf",t.masterPasswordScoreText),n.Qb(3),n.Ac("type",t.showPassword?"text":"password"),n.zc("ngModel",t.masterPassword),n.Qb(5),n.Ac("appA11yTitle",n.uc(36,30,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(46,Qo,!t.showPassword,t.showPassword)),n.Qb(7),n.Tb("progress-bar bg-",t.masterPasswordScoreColor,""),n.zc("ngStyle",n.Dc(49,Vo,t.masterPasswordScoreWidth+"%")),n.Rb("aria-valuenow",t.masterPasswordScoreWidth),n.Qb(7),n.Qc(" ",n.uc(53,32,"masterPassDesc")," "),n.Qb(15),n.Pc(n.uc(68,34,"reTypeMasterPass")),n.Qb(3),n.zc("ngModel",t.masterPasswordRetype),n.Qb(5),n.Ac("appA11yTitle",n.uc(76,36,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(51,Qo,!t.showPassword,t.showPassword)),n.Qb(15),n.Pc(n.uc(94,38,"masterPassHint")),n.Qb(3),n.zc("ngModel",t.hint),n.Qb(5),n.Qc(" ",n.uc(102,40,"masterPassHintDesc")," "),n.Qb(6),n.zc("disabled",e.loading),n.Qb(2),n.zc("ngIf",e.loading),n.Qb(3),n.Pc(n.uc(113,42,"submit")),n.Qb(7),n.Pc(n.uc(120,44,"logOut"))}}class Lo extends So{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h){super(t,i,n,s,r,o,c,a,e,l,d),this.broadcasterService=u,this.ngZone=h}get masterPasswordScoreWidth(){return null==this.masterPasswordScore?0:20*(this.masterPasswordScore+1)}get masterPasswordScoreColor(){switch(this.masterPasswordScore){case 4:return"success";case 3:return"primary";case 2:return"warning";default:return"danger"}}get masterPasswordScoreText(){switch(this.masterPasswordScore){case 4:return this.i18nService.t("strong");case 3:return this.i18nService.t("good");case 2:return this.i18nService.t("weak");default:return null!=this.masterPasswordScore?this.i18nService.t("weak"):null}}ngOnInit(){const e=Object.create(null,{ngOnInit:{get:()=>super.ngOnInit}});return To(this,void 0,void 0,(function*(){yield e.ngOnInit.call(this),this.broadcasterService.subscribe("SetPasswordComponent",e=>To(this,void 0,void 0,(function*(){this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})})))}))}ngOnDestroy(){this.broadcasterService.unsubscribe("SetPasswordComponent")}onWindowHidden(){this.showPassword=!1}}Lo.ɵfac=function(e){return new(e||Lo)(n.cc(O),n.cc(I.a),n.cc(x.a),n.cc(a.a),n.cc(z.a),n.cc(D),n.cc(A.a),n.cc(mo),n.cc(c.b),n.cc(M),n.cc(c.a),n.cc(Sr),n.cc(n.M))},Lo.ɵcmp=n.Wb({type:Lo,selectors:[["app-set-password"]],features:[n.Nb],decls:17,vars:5,consts:[["id","set-password-page"],["form",""],[1,"content"],["alt","Bitwarden",1,"logo-image"],[1,"lead"],["class","box text-center",4,"ngIf"],[4,"ngIf"],[1,"box","text-center"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"title"],[1,"box"],["type","tip"],["type","info",4,"ngIf"],["ngNativeValidate","","autocomplete","off",3,"appApiAction","ngSubmit"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],[1,"box-content-row-flex"],[1,"row-main"],["for","masterPassword"],[3,"class",4,"ngIf"],["id","masterPassword","name","MasterPassword","required","","appInputVerbatim","",1,"monospaced",3,"type","ngModel","ngModelChange","input"],[1,"action-buttons"],["href","#","appStopClick","","appBlurClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],[1,"progress"],["role","progressbar","aria-valuenow","0","aria-valuemin","0","aria-valuemax","100",3,"ngStyle"],[1,"box-footer"],["for","masterPasswordRetype"],["id","masterPasswordRetype","type","password","name","MasterPasswordRetype","required","","appInputVerbatim","","autocomplete","new-password",1,"monospaced",3,"ngModel","ngModelChange"],[1,"box","last"],["for","hint"],["id","hint","type","text","name","Hint",3,"ngModel","ngModelChange"],[1,"buttons"],["type","submit",1,"btn","primary","block",3,"disabled"],["class","fa fa-spinner fa-spin","aria-hidden","true",3,"title",4,"ngIf"],[1,"btn","block",3,"click"],["type","info"]],template:function(e,t){1&e&&(n.hc(0,"form",0,1),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.dc(5,"img",3),n.Oc(6," "),n.hc(7,"p",4),n.Oc(8),n.tc(9,"i18n"),n.gc(),n.Oc(10," "),n.Mc(11,Io,6,6,"div",5),n.Oc(12," "),n.Mc(13,Bo,125,54,"div",6),n.Oc(14," "),n.gc(),n.Oc(15," "),n.gc(),n.Oc(16," ")),2&e&&(n.Qb(8),n.Pc(n.uc(9,3,"setMasterPassword")),n.Qb(3),n.zc("ngIf",t.syncLoading),n.Qb(2),n.zc("ngIf",!t.syncLoading))},directives:[dr.p,dr.g,dr.h,Dr.k,ko,hr,pr,dr.b,dr.n,dr.f,dr.i,Ar,fr,Mr,Dr.i,Dr.l],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Lo,[{type:n.l,args:[{selector:"app-set-password",templateUrl:"set-password.component.html"}]}],(function(){return[{type:O},{type:I.a},{type:x.a},{type:a.a},{type:z.a},{type:D},{type:A.a},{type:mo},{type:c.b},{type:M},{type:c.a},{type:Sr},{type:n.M}]}),null);var _o=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class jo{constructor(e,t,i,n,s,r,o,c,a,l){this.authService=e,this.router=t,this.i18nService=i,this.route=n,this.storageService=s,this.stateService=r,this.platformUtilsService=o,this.apiService=c,this.cryptoFunctionService=a,this.passwordGenerationService=l,this.loggingIn=!1,this.twoFactorRoute="2fa",this.successRoute="lock",this.changePasswordRoute="set-password"}ngOnInit(){return _o(this,void 0,void 0,(function*(){const e=this.route.queryParams.subscribe(t=>_o(this,void 0,void 0,(function*(){if(null!=t.code&&null!=t.state){const e=yield this.storageService.get(Pr.a.ssoCodeVerifierKey),i=yield this.storageService.get(Pr.a.ssoStateKey);yield this.storageService.remove(Pr.a.ssoCodeVerifierKey),yield this.storageService.remove(Pr.a.ssoStateKey),null!=t.code&&null!=e&&null!=i&&this.checkState(i,t.state)&&(yield this.logIn(t.code,e,this.getOrgIdentiferFromState(t.state)))}else null!=t.clientId&&null!=t.redirectUri&&null!=t.state&&null!=t.codeChallenge&&(this.redirectUri=t.redirectUri,this.state=t.state,this.codeChallenge=t.codeChallenge,this.clientId=t.clientId);null!=e&&e.unsubscribe()})))}))}submit(e,t){return _o(this,void 0,void 0,(function*(){if(this.initiateSsoFormPromise=this.preValidate(),yield this.initiateSsoFormPromise){const i=yield this.buildAuthorizeUrl(e,t);this.platformUtilsService.launchUri(i,{sameWindow:!0})}}))}preValidate(){return _o(this,void 0,void 0,(function*(){return null==this.identifier||""===this.identifier?(this.platformUtilsService.showToast("error",this.i18nService.t("ssoValidationFailed"),this.i18nService.t("ssoIdentifierRequired")),!1):yield this.apiService.preValidateSso(this.identifier)}))}buildAuthorizeUrl(e,t){return _o(this,void 0,void 0,(function*(){let i=this.codeChallenge,n=this.state;const s={type:"password",length:64,uppercase:!0,lowercase:!0,numbers:!0,special:!1};if(null==i){const e=yield this.passwordGenerationService.generatePassword(s),t=yield this.cryptoFunctionService.hash(e,"sha256");i=Q.a.fromBufferToUrlB64(t),yield this.storageService.save(Pr.a.ssoCodeVerifierKey,e)}null==n&&(n=yield this.passwordGenerationService.generatePassword(s),e&&(n+=`_returnUri='${e}'`)),n+="_identifier="+this.identifier,yield this.storageService.save(Pr.a.ssoStateKey,n);let r=this.apiService.identityBaseUrl+"/connect/authorize?client_id="+this.clientId+"&redirect_uri="+encodeURIComponent(this.redirectUri)+"&response_type=code&scope=api offline_access&state="+n+"&code_challenge="+i+"&code_challenge_method=S256&response_mode=query&domain_hint="+encodeURIComponent(this.identifier);if(t){const e=yield this.apiService.getSsoUserIdentifier();r+="&user_identifier="+encodeURIComponent(e)}return r}))}logIn(e,t,i){return _o(this,void 0,void 0,(function*(){this.loggingIn=!0;try{this.formPromise=this.authService.logInSso(e,t,this.redirectUri);const n=yield this.formPromise;if(n.twoFactor)null!=this.onSuccessfulLoginTwoFactorNavigate?this.onSuccessfulLoginTwoFactorNavigate():this.router.navigate([this.twoFactorRoute],{queryParams:{identifier:i,sso:"true"}});else if(n.resetMasterPassword)null!=this.onSuccessfulLoginChangePasswordNavigate?this.onSuccessfulLoginChangePasswordNavigate():this.router.navigate([this.changePasswordRoute],{queryParams:{identifier:i}});else{const e=yield this.storageService.get(Pr.a.disableFaviconKey);yield this.stateService.save(Pr.a.disableFaviconKey,!!e),null!=this.onSuccessfulLogin&&this.onSuccessfulLogin(),null!=this.onSuccessfulLoginNavigate?this.onSuccessfulLoginNavigate():this.router.navigate([this.successRoute])}}catch(e){}this.loggingIn=!1}))}getOrgIdentiferFromState(e){if(null==e)return null;const t=e.split("_identifier=");return t.length>1?t[1]:null}checkState(e,t){if(null==e)return!1;if(null==t)return!1;const i=e.split("_identifier="),n=t.split("_identifier=");return i[0]===n[0]}}jo.ɵfac=function(e){return new(e||jo)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(c.a),n.cc(wr.a),n.cc(br.a),n.cc(A.a),n.cc(O),n.cc(Lr),n.cc(D))},jo.ɵdir=n.Xb({type:jo}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(jo,[{type:n.q}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:c.a},{type:wr.a},{type:br.a},{type:A.a},{type:O},{type:Lr},{type:D}]}),null);class Ko extends jo{constructor(e,t,i,n,s,r,o,c,a,l,d){super(e,t,i,s,r,o,c,a,l,d),super.onSuccessfulLogin=()=>n.fullSync(!0),this.redirectUri="bitwarden://sso-callback",this.clientId="desktop"}}Ko.ɵfac=function(e){return new(e||Ko)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(M),n.cc(c.a),n.cc(wr.a),n.cc(br.a),n.cc(A.a),n.cc(O),n.cc(Lr),n.cc(D))},Ko.ɵcmp=n.Wb({type:Ko,selectors:[["app-sso"]],features:[n.Nb],decls:15,vars:6,consts:[["id","sso-page",3,"ngSubmit"],[1,"content"],["alt","Bitwarden",1,"logo-image"],[1,"box"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"title"]],template:function(e,t){1&e&&(n.hc(0,"form",0),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.dc(4,"img",2),n.Oc(5," "),n.hc(6,"div",3),n.Oc(7," "),n.dc(8,"i",4),n.tc(9,"i18n"),n.Oc(10),n.tc(11,"i18n"),n.gc(),n.Oc(12," "),n.gc(),n.Oc(13," "),n.gc(),n.Oc(14," ")),2&e&&(n.Qb(8),n.Ac("title",n.uc(9,2,"loading")),n.Qb(2),n.Qc(" ",n.uc(11,4,"loading")," "))},directives:[dr.p,dr.g,dr.h],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ko,[{type:n.l,args:[{selector:"app-sso",templateUrl:"sso.component.html"}]}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:M},{type:c.a},{type:wr.a},{type:br.a},{type:A.a},{type:O},{type:Lr},{type:D}]}),null);class Ho{constructor(e,t,i,s,r){this.authService=e,this.router=t,this.i18nService=i,this.platformUtilsService=s,this.win=r,this.onProviderSelected=new n.t,this.onRecoverSelected=new n.t,this.providers=[]}ngOnInit(){this.providers=this.authService.getSupportedTwoFactorProviders(this.win)}choose(e){this.onProviderSelected.emit(e.type)}recover(){this.platformUtilsService.launchUri("https://help.bitwarden.com/article/lost-two-step-device/"),this.onRecoverSelected.emit()}}function Wo(e,t){if(1&e){const e=n.ic();n.hc(0,"a",8),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc().choose(i)})),n.Oc(1," "),n.dc(2,"img",13),n.Oc(3," "),n.hc(4,"span",9),n.Oc(5),n.gc(),n.Oc(6," "),n.hc(7,"span",10),n.Oc(8),n.gc(),n.Oc(9," "),n.gc()}if(2&e){const e=t.$implicit;n.Qb(2),n.zc("src","images/two-factor/"+e.type+".png",n.Jc),n.Qb(3),n.Pc(e.name),n.Qb(3),n.Pc(e.description)}}Ho.ɵfac=function(e){return new(e||Ho)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(A.a),n.cc(Window))},Ho.ɵdir=n.Xb({type:Ho,outputs:{onProviderSelected:"onProviderSelected",onRecoverSelected:"onRecoverSelected"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ho,[{type:n.q}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:A.a},{type:Window}]}),{onProviderSelected:[{type:n.O}],onRecoverSelected:[{type:n.O}]});class qo extends Ho{constructor(e,t,i,n){super(e,t,i,n,window)}}qo.ɵfac=function(e){return new(e||qo)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(A.a))},qo.ɵcmp=n.Wb({type:qo,selectors:[["app-two-factor-options"]],features:[n.Nb],decls:42,vars:13,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","twoStepTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content"],[1,"modal-body"],[1,"box"],["id","twoStepTitle",1,"box-header"],[1,"box-content"],["href","#","appStopClick","","class","box-content-row",3,"click",4,"ngFor","ngForOf"],["href","#","appStopClick","",1,"box-content-row",3,"click"],[1,"text"],[1,"detail"],[1,"modal-footer"],["type","button","data-dismiss","modal"],["alt","",1,"img-right",3,"src"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"div",2),n.Oc(5," "),n.hc(6,"div",3),n.Oc(7," "),n.hc(8,"div",4),n.Oc(9," "),n.hc(10,"div",5),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.hc(14,"div",6),n.Oc(15," "),n.Mc(16,Wo,10,3,"a",7),n.Oc(17," "),n.hc(18,"a",8),n.oc("click",(function(){return t.recover()})),n.Oc(19," "),n.hc(20,"span",9),n.Oc(21),n.tc(22,"i18n"),n.gc(),n.Oc(23," "),n.hc(24,"span",10),n.Oc(25),n.tc(26,"i18n"),n.gc(),n.Oc(27," "),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.gc(),n.Oc(31," "),n.hc(32,"div",11),n.Oc(33," "),n.hc(34,"button",12),n.Oc(35),n.tc(36,"i18n"),n.gc(),n.Oc(37," "),n.gc(),n.Oc(38," "),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.gc(),n.Oc(41," ")),2&e&&(n.Qb(11),n.Qc(" ",n.uc(12,5,"twoStepOptions")," "),n.Qb(5),n.zc("ngForOf",t.providers),n.Qb(5),n.Pc(n.uc(22,7,"recoveryCodeTitle")),n.Qb(4),n.Pc(n.uc(26,9,"recoveryCodeDesc")),n.Qb(10),n.Pc(n.uc(36,11,"close")))},directives:[Dr.j,Ar],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(qo,[{type:n.l,args:[{selector:"app-two-factor-options",templateUrl:"two-factor-options.component.html"}]}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:A.a}]}),null);class Go extends xr{constructor(e,t){super(),this.masterPasswordHash=t,this.email=e}}class Jo{constructor(){this.twoFactor=!1,this.resetMasterPassword=!1,this.twoFactorProviders=null}}class Yo{constructor(e,t){this.type=t.getDevice(),this.name=t.getDeviceString(),this.identifier=e,this.pushToken=null}}class $o{constructor(e){this.email=e}}class Xo{constructor(e,t,i,n,s,r,o){null!=e&&e.length>1?(this.email=e[0],this.masterPasswordHash=e[1]):null!=t&&t.length>2?(this.code=t[0],this.codeVerifier=t[1],this.redirectUri=t[2]):null!=i&&i.length>1&&(this.clientId=i[0],this.clientSecret=i[1]),this.token=s,this.provider=n,this.remember=r,this.device=null!=o?o:null}toIdentityToken(e){const t={scope:"api offline_access",client_id:e};if(null!=this.clientSecret)t.scope="api",t.grant_type="client_credentials",t.client_secret=this.clientSecret;else if(null!=this.masterPasswordHash&&null!=this.email)t.grant_type="password",t.username=this.email,t.password=this.masterPasswordHash;else{if(null==this.code||null==this.codeVerifier||null==this.redirectUri)throw new Error("must provide credentials or codes");t.grant_type="authorization_code",t.code=this.code,t.code_verifier=this.codeVerifier,t.redirect_uri=this.redirectUri}return this.device&&(t.deviceType=this.device.type,t.deviceIdentifier=this.device.identifier,t.deviceName=this.device.name),this.token&&null!=this.provider&&(t.twoFactorToken=this.token,t.twoFactorProvider=this.provider,t.twoFactorRemember=this.remember?"1":"0"),t}}var Zo=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const ec={[Mt.Authenticator]:{type:Mt.Authenticator,name:null,description:null,priority:1,sort:1,premium:!1},[Mt.Yubikey]:{type:Mt.Yubikey,name:null,description:null,priority:3,sort:2,premium:!0},[Mt.Duo]:{type:Mt.Duo,name:"Duo",description:null,priority:2,sort:3,premium:!0},[Mt.OrganizationDuo]:{type:Mt.OrganizationDuo,name:"Duo (Organization)",description:null,priority:10,sort:4,premium:!1},[Mt.Email]:{type:Mt.Email,name:null,description:null,priority:0,sort:6,premium:!1},[Mt.WebAuthn]:{type:Mt.WebAuthn,name:null,description:null,priority:4,sort:5,premium:!0}};var tc=i(818);class ic{constructor(e,t,i,n,s,r,o,c){this.win=e,this.webVaultUrl=t,this.webAuthnNewTab=i,this.platformUtilsService=n,this.i18nService=s,this.successCallback=r,this.errorCallback=o,this.infoCallback=c,this.iframe=null,this.parseFunction=this.parseMessage.bind(this),this.connectorLink=e.document.createElement("a")}init(e){const t=new URLSearchParams({data:this.base64Encode(JSON.stringify(e)),parent:encodeURIComponent(this.win.document.location.href),btnText:encodeURIComponent(this.i18nService.t("webAuthnAuthenticate")),v:"1"});this.webAuthnNewTab?(t.append("locale",this.i18nService.translationLocale),this.platformUtilsService.launchUri(`${this.webVaultUrl}/webauthn-fallback-connector.html?${t}`)):(this.connectorLink.href=`${this.webVaultUrl}/webauthn-connector.html?${t}`,this.iframe=this.win.document.getElementById("webauthn_iframe"),this.iframe.allow="publickey-credentials-get "+new URL(this.webVaultUrl).origin,this.iframe.src=this.connectorLink.href,this.win.addEventListener("message",this.parseFunction,!1))}stop(){this.sendMessage("stop")}start(){this.sendMessage("start")}sendMessage(e){this.iframe&&this.iframe.src&&this.iframe.contentWindow&&this.iframe.contentWindow.postMessage(e,this.iframe.src)}base64Encode(e){return btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/g,(e,t)=>String.fromCharCode("0x"+t)))}cleanup(){this.win.removeEventListener("message",this.parseFunction,!1)}parseMessage(e){if(!this.validMessage(e))return;const t=e.data.split("|");"success"===t[0]&&this.successCallback?this.successCallback(t[1]):"error"===t[0]&&this.errorCallback?this.errorCallback(t[1]):"info"===t[0]&&this.infoCallback&&this.infoCallback(t[1])}validMessage(e){return null!=e.origin&&""!==e.origin&&e.origin===this.connectorLink.origin&&null!=e.data&&"string"==typeof e.data&&(0===e.data.indexOf("success|")||0===e.data.indexOf("error|")||0===e.data.indexOf("info|"))}}var nc=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class sc{constructor(e,t,i,n,s,r,o,c,a,l){this.authService=e,this.router=t,this.i18nService=i,this.apiService=n,this.platformUtilsService=s,this.win=r,this.environmentService=o,this.stateService=c,this.storageService=a,this.route=l,this.token="",this.remember=!1,this.webAuthnReady=!1,this.webAuthnNewTab=!1,this.providers=ec,this.providerType=Mt,this.selectedProviderType=Mt.Authenticator,this.webAuthnSupported=!1,this.webAuthn=null,this.title="",this.twoFactorEmail=null,this.identifier=null,this.loginRoute="login",this.successRoute="vault",this.webAuthnSupported=this.platformUtilsService.supportsWebAuthn(r)}ngOnInit(){return nc(this,void 0,void 0,(function*(){if(!this.authing||null==this.authService.twoFactorProvidersData)return void this.router.navigate([this.loginRoute]);const e=this.route.queryParams.subscribe(t=>nc(this,void 0,void 0,(function*(){null!=t.identifier&&(this.identifier=t.identifier),null!=e&&e.unsubscribe()})));if(this.needsLock&&(this.successRoute="lock"),null!=this.win&&this.webAuthnSupported){let e=this.environmentService.getWebVaultUrl();null==e&&(e="https://vault.bitwarden.com"),this.webAuthn=new ic(this.win,e,this.webAuthnNewTab,this.platformUtilsService,this.i18nService,e=>{this.token=e,this.submit()},e=>{this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),e)},e=>{"ready"===e&&(this.webAuthnReady=!0)})}this.selectedProviderType=this.authService.getDefaultTwoFactorProvider(this.webAuthnSupported),yield this.init()}))}ngOnDestroy(){this.cleanupWebAuthn(),this.webAuthn=null}init(){return nc(this,void 0,void 0,(function*(){if(null==this.selectedProviderType)return void(this.title=this.i18nService.t("loginUnavailable"));this.cleanupWebAuthn(),this.title=ec[this.selectedProviderType].name;const e=this.authService.twoFactorProvidersData.get(this.selectedProviderType);switch(this.selectedProviderType){case Mt.WebAuthn:if(!this.webAuthnSupported||null==this.webAuthn)break;setTimeout(()=>{this.webAuthn.init(e)},500);break;case Mt.Duo:case Mt.OrganizationDuo:setTimeout(()=>{tc.init({iframe:void 0,host:e.Host,sig_request:e.Signature,submit_callback:e=>nc(this,void 0,void 0,(function*(){const t=e.querySelector('input[name="sig_response"]');null!=t&&(this.token=t.value,yield this.submit())}))})},0);break;case Mt.Email:this.twoFactorEmail=e.Email,this.authService.twoFactorProvidersData.size>1&&(yield this.sendEmail(!1))}}))}submit(){return nc(this,void 0,void 0,(function*(){if(null!=this.token&&""!==this.token){if(this.selectedProviderType===Mt.WebAuthn){if(null==this.webAuthn)return;this.webAuthn.stop()}else this.selectedProviderType!==Mt.Email&&this.selectedProviderType!==Mt.Authenticator||(this.token=this.token.replace(" ","").trim());try{yield this.doSubmit()}catch(e){this.selectedProviderType===Mt.WebAuthn&&null!=this.webAuthn&&this.webAuthn.start()}}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("verificationCodeRequired"))}))}doSubmit(){return nc(this,void 0,void 0,(function*(){this.formPromise=this.authService.logInTwoFactor(this.selectedProviderType,this.token,this.remember);const e=yield this.formPromise,t=yield this.storageService.get(Pr.a.disableFaviconKey);yield this.stateService.save(Pr.a.disableFaviconKey,!!t),null!=this.onSuccessfulLogin&&this.onSuccessfulLogin(),e.resetMasterPassword&&(this.successRoute="set-password"),null!=this.onSuccessfulLoginNavigate?this.onSuccessfulLoginNavigate():this.router.navigate([this.successRoute],{queryParams:{identifier:this.identifier}})}))}sendEmail(e){return nc(this,void 0,void 0,(function*(){if(this.selectedProviderType===Mt.Email&&null==this.emailPromise){try{const t=new Go(this.authService.email,this.authService.masterPasswordHash);this.emailPromise=this.apiService.postTwoFactorEmail(t),yield this.emailPromise,e&&this.platformUtilsService.showToast("success",null,this.i18nService.t("verificationCodeEmailSent",this.twoFactorEmail))}catch(e){}this.emailPromise=null}}))}cleanupWebAuthn(){null!=this.webAuthn&&(this.webAuthn.stop(),this.webAuthn.cleanup())}get authing(){return this.authService.authingWithPassword()||this.authService.authingWithSso()||this.authService.authingWithApiKey()}get needsLock(){return this.authService.authingWithSso()||this.authService.authingWithApiKey()}}sc.ɵfac=function(e){return new(e||sc)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(O),n.cc(A.a),n.cc(Window),n.cc(k),n.cc(br.a),n.cc(wr.a),n.cc(c.a))},sc.ɵdir=n.Xb({type:sc}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(sc,[{type:n.q}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:O},{type:A.a},{type:Window},{type:k},{type:br.a},{type:wr.a},{type:c.a}]}),null);var rc=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const oc=["twoFactorOptions"];function cc(e,t){1&e&&(n.hc(0,"p"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"enterVerificationCodeApp")))}function ac(e,t){if(1&e&&(n.hc(0,"p"),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e){const e=n.sc();n.Qb(1),n.Qc(" ",n.vc(2,1,"enterVerificationCodeEmail",e.twoFactorEmail)," ")}}function lc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",12),n.Oc(1," "),n.hc(2,"div",13),n.Oc(3," "),n.hc(4,"div",14),n.Oc(5," "),n.hc(6,"label",15),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.hc(10,"input",16),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().token=t})),n.gc(),n.Oc(11," "),n.gc(),n.Oc(12," "),n.hc(13,"div",17),n.Oc(14," "),n.hc(15,"label",18),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",19),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().remember=t})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.gc()}if(2&e){const e=n.sc();n.Qb(7),n.Pc(n.uc(8,4,"verificationCode")),n.Qb(3),n.zc("ngModel",e.token),n.Qb(6),n.Pc(n.uc(17,6,"rememberMe")),n.Qb(3),n.zc("ngModel",e.remember)}}function dc(e,t){if(1&e){const e=n.ic();n.fc(0),n.Oc(1," "),n.hc(2,"p"),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.dc(6,"img",20),n.Oc(7," "),n.hc(8,"div",12),n.Oc(9," "),n.hc(10,"div",13),n.Oc(11," "),n.hc(12,"div",14),n.Oc(13," "),n.hc(14,"label",21),n.Oc(15),n.tc(16,"i18n"),n.gc(),n.Oc(17," "),n.hc(18,"input",22),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().token=t})),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.hc(21,"div",17),n.Oc(22," "),n.hc(23,"label",18),n.Oc(24),n.tc(25,"i18n"),n.gc(),n.Oc(26," "),n.hc(27,"input",19),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().remember=t})),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.gc(),n.Oc(31," "),n.ec()}if(2&e){const e=n.sc();n.Qb(3),n.Pc(n.uc(4,5,"insertYubiKey")),n.Qb(12),n.Pc(n.uc(16,7,"verificationCode")),n.Qb(3),n.zc("ngModel",e.token),n.Qb(6),n.Pc(n.uc(25,9,"rememberMe")),n.Qb(3),n.zc("ngModel",e.remember)}}function uc(e,t){if(1&e){const e=n.ic();n.fc(0),n.Oc(1," "),n.hc(2,"div",23),n.Oc(3," "),n.dc(4,"iframe",24),n.Oc(5," "),n.gc(),n.Oc(6," "),n.hc(7,"div",25),n.Oc(8," "),n.hc(9,"div",13),n.Oc(10," "),n.hc(11,"div",17),n.Oc(12," "),n.hc(13,"label",18),n.Oc(14),n.tc(15,"i18n"),n.gc(),n.Oc(16," "),n.hc(17,"input",19),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().remember=t})),n.gc(),n.Oc(18," "),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.ec()}if(2&e){const e=n.sc();n.Qb(14),n.Pc(n.uc(15,2,"rememberMe")),n.Qb(3),n.zc("ngModel",e.remember)}}function hc(e,t){if(1&e){const e=n.ic();n.fc(0),n.Oc(1," "),n.hc(2,"div",26),n.dc(3,"iframe",27),n.gc(),n.Oc(4," "),n.hc(5,"div",12),n.Oc(6," "),n.hc(7,"div",13),n.Oc(8," "),n.hc(9,"div",17),n.Oc(10," "),n.hc(11,"label",18),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.hc(15,"input",19),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().remember=t})),n.gc(),n.Oc(16," "),n.gc(),n.Oc(17," "),n.gc(),n.Oc(18," "),n.gc(),n.Oc(19," "),n.ec()}if(2&e){const e=n.sc();n.Qb(12),n.Pc(n.uc(13,2,"rememberMe")),n.Qb(3),n.zc("ngModel",e.remember)}}function pc(e,t){1&e&&(n.hc(0,"div",12),n.Oc(1," "),n.hc(2,"div",13),n.Oc(3," "),n.hc(4,"div",28),n.Oc(5," "),n.hc(6,"p"),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.hc(10,"p"),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.gc(),n.Oc(14," "),n.gc(),n.Oc(15," "),n.gc()),2&e&&(n.Qb(7),n.Pc(n.uc(8,2,"noTwoStepProviders")),n.Qb(4),n.Pc(n.uc(12,4,"noTwoStepProviders2")))}function gc(e,t){if(1&e&&(n.hc(0,"button",29),n.Oc(1," "),n.hc(2,"span",30),n.dc(3,"i",31),n.Oc(4),n.tc(5,"i18n"),n.gc(),n.Oc(6," "),n.dc(7,"i",32),n.Oc(8," "),n.gc()),2&e){n.sc();const e=n.Gc(1);n.zc("disabled",e.loading),n.Qb(2),n.zc("hidden",e.loading),n.Qb(2),n.Qc(" ",n.uc(5,4,"continue"),""),n.Qb(3),n.zc("hidden",!e.loading)}}function fc(e,t){if(1&e){const e=n.ic();n.hc(0,"a",33),n.oc("click",(function(){n.Hc(e);return n.sc().sendEmail(!0)})),n.Oc(1),n.tc(2,"i18n"),n.gc()}if(2&e){const e=n.sc();n.zc("appApiAction",e.emailPromise),n.Qb(1),n.Qc(" ",n.uc(2,2,"sendVerificationCodeEmailAgain")," ")}}function yc(e,t){}class mc extends sc{constructor(e,t,i,n,s,r,o,c,a,l,d){super(e,t,i,n,s,window,o,a,l,d),this.componentFactoryResolver=c,this.showingModal=!1,super.onSuccessfulLogin=()=>r.fullSync(!0)}anotherMethod(){const e=this.componentFactoryResolver.resolveComponentFactory(Gr),t=this.twoFactorOptionsModal.createComponent(e).instance;t.onShown.subscribe(()=>{this.showingModal=!0}),t.onClosed.subscribe(()=>{this.showingModal=!1,t.onShown.unsubscribe(),t.onClosed.unsubscribe()});const i=t.show(qo,this.twoFactorOptionsModal);i.onProviderSelected.subscribe(e=>rc(this,void 0,void 0,(function*(){t.close(),this.selectedProviderType=e,yield this.init()}))),i.onRecoverSelected.subscribe(()=>{t.close()})}}mc.ɵfac=function(e){return new(e||mc)(n.cc(S),n.cc(c.b),n.cc(I.a),n.cc(O),n.cc(A.a),n.cc(M),n.cc(k),n.cc(n.m),n.cc(br.a),n.cc(wr.a),n.cc(c.a))},mc.ɵcmp=n.Wb({type:mc,selectors:[["app-two-factor"]],viewQuery:function(e,t){if(1&e&&n.Sc(oc,3,n.fb),2&e){let e;n.Fc(e=n.pc())&&(t.twoFactorOptionsModal=e.first)}},features:[n.Nb],decls:45,vars:18,consts:[["id","two-factor-page",3,"appApiAction","ngSubmit"],["form",""],[1,"content"],[4,"ngIf"],["class","box last",4,"ngIf"],[1,"buttons"],["type","submit","class","btn primary block","appBlurClick","",3,"disabled",4,"ngIf"],["routerLink","/login",1,"btn","block"],[1,"sub-options"],["href","#","appStopClick","","role","button",3,"click"],["href","#","appStopClick","","role","button",3,"appApiAction","click",4,"ngIf"],["twoFactorOptions",""],[1,"box","last"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","code"],["id","code","type","text","name","Code","required","","appAutofocus","",3,"ngModel","ngModelChange"],["appBoxRow","",1,"box-content-row","box-content-row-checkbox"],["for","remember"],["id","remember","type","checkbox","name","Remember",3,"ngModel","ngModelChange"],["src","images/yubikey.jpg","alt",""],["for","code",1,"sr-only"],["id","code","type","password","name","Code","required","","appAutofocus","",3,"ngModel","ngModelChange"],["id","web-authn-frame"],["id","webauthn_iframe"],[1,"box","first"],["id","duo-frame"],["id","duo_iframe"],[1,"box-content-row"],["type","submit","appBlurClick","",1,"btn","primary","block",3,"disabled"],[3,"hidden"],["aria-hidden","true",1,"fa","fa-sign-in"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"hidden"],["href","#","appStopClick","","role","button",3,"appApiAction","click"]],template:function(e,t){1&e&&(n.hc(0,"form",0,1),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.hc(5,"h1"),n.Oc(6),n.gc(),n.Oc(7," "),n.Mc(8,cc,3,3,"p",3),n.Oc(9," "),n.Mc(10,ac,3,4,"p",3),n.Oc(11," "),n.Mc(12,lc,23,8,"div",4),n.Oc(13," "),n.Mc(14,dc,32,11,"ng-container",3),n.Oc(15," "),n.Mc(16,uc,22,4,"ng-container",3),n.Oc(17," "),n.Mc(18,hc,20,4,"ng-container",3),n.Oc(19," "),n.Mc(20,pc,16,6,"div",4),n.Oc(21," "),n.hc(22,"div",5),n.Oc(23," "),n.Mc(24,gc,9,6,"button",6),n.Oc(25," "),n.hc(26,"a",7),n.Oc(27),n.tc(28,"i18n"),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.hc(31,"div",8),n.Oc(32," "),n.hc(33,"a",9),n.oc("click",(function(){return t.anotherMethod()})),n.Oc(34),n.tc(35,"i18n"),n.gc(),n.Oc(36," "),n.Mc(37,fc,3,4,"a",10),n.Oc(38," "),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.gc(),n.Oc(41," "),n.Mc(42,yc,0,0,"ng-template",null,11,n.Nc),n.Oc(44," ")),2&e&&(n.zc("appApiAction",t.formPromise),n.Rb("aria-hidden",t.showingModal),n.Qb(6),n.Pc(t.title),n.Qb(2),n.zc("ngIf",t.selectedProviderType===t.providerType.Authenticator),n.Qb(2),n.zc("ngIf",t.selectedProviderType===t.providerType.Email),n.Qb(2),n.zc("ngIf",t.selectedProviderType===t.providerType.Email||t.selectedProviderType===t.providerType.Authenticator),n.Qb(2),n.zc("ngIf",t.selectedProviderType===t.providerType.Yubikey),n.Qb(2),n.zc("ngIf",t.selectedProviderType===t.providerType.WebAuthn),n.Qb(2),n.zc("ngIf",t.selectedProviderType===t.providerType.Duo||t.selectedProviderType===t.providerType.OrganizationDuo),n.Qb(2),n.zc("ngIf",null==t.selectedProviderType),n.Qb(4),n.zc("ngIf",null!=t.selectedProviderType&&t.selectedProviderType!==t.providerType.Duo&&t.selectedProviderType!==t.providerType.OrganizationDuo),n.Qb(3),n.Pc(n.uc(28,14,"cancel")),n.Qb(7),n.Pc(n.uc(35,16,"useAnotherTwoStepMethod")),n.Qb(3),n.zc("ngIf",t.selectedProviderType===t.providerType.Email))},directives:[dr.p,dr.g,dr.h,hr,Dr.k,c.d,Ar,pr,dr.b,dr.n,gr,dr.f,dr.i,dr.a,fr],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(mc,[{type:n.l,args:[{selector:"app-two-factor",templateUrl:"two-factor.component.html"}]}],(function(){return[{type:S},{type:c.b},{type:I.a},{type:O},{type:A.a},{type:M},{type:k},{type:n.m},{type:br.a},{type:wr.a},{type:c.a}]}),{twoFactorOptionsModal:[{type:n.eb,args:["twoFactorOptions",{read:n.fb,static:!0}]}]});class vc{constructor(){this.indexedEntityId=null}}class bc{}var wc,Oc;!function(e){e[e.Invited=0]="Invited",e[e.Accepted=1]="Accepted",e[e.Confirmed=2]="Confirmed"}(wc||(wc={})),function(e){e[e.TwoFactorAuthentication=0]="TwoFactorAuthentication",e[e.MasterPassword=1]="MasterPassword",e[e.PasswordGenerator=2]="PasswordGenerator",e[e.SingleOrg=3]="SingleOrg",e[e.RequireSso=4]="RequireSso",e[e.PersonalOwnership=5]="PersonalOwnership",e[e.DisableSend=6]="DisableSend",e[e.SendOptions=7]="SendOptions"}(Oc||(Oc={}));var Sc=i(88),Cc=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Pc{constructor(e,t,i,n,s,r,o,c){this.sendService=e,this.i18nService=t,this.platformUtilsService=i,this.environmentService=n,this.ngZone=s,this.searchService=r,this.policyService=o,this.userService=c,this.disableSend=!1,this.sendType=Sc.a,this.loaded=!1,this.loading=!0,this.refreshing=!1,this.expired=!1,this.type=null,this.sends=[],this.filteredSends=[],this.searchPending=!1,this.hasSearched=!1}ngOnInit(){return Cc(this,void 0,void 0,(function*(){const e=yield this.policyService.getAll(Oc.DisableSend),t=yield this.userService.getAllOrganizations();this.disableSend=t.some(t=>t.enabled&&t.status===wc.Confirmed&&t.usePolicies&&!t.canManagePolicies&&e.some(e=>e.organizationId===t.id&&e.enabled))}))}load(e=null){return Cc(this,void 0,void 0,(function*(){this.loading=!0;const e=yield this.sendService.getAllDecrypted();this.sends=e,null!=this.onSuccessfulLoad?yield this.onSuccessfulLoad():this.selectAll(),this.loading=!1,this.loaded=!0}))}reload(e=null){return Cc(this,void 0,void 0,(function*(){this.loaded=!1,this.sends=[],yield this.load(e)}))}refresh(){return Cc(this,void 0,void 0,(function*(){try{this.refreshing=!0,yield this.reload(this.filter)}finally{this.refreshing=!1}}))}applyFilter(e=null){return Cc(this,void 0,void 0,(function*(){this.filter=e,yield this.search(null)}))}search(e=null){return Cc(this,void 0,void 0,(function*(){if(this.searchPending=!1,null!=this.searchTimeout&&clearTimeout(this.searchTimeout),null==e)return this.hasSearched=this.searchService.isSearchable(this.searchText),this.filteredSends=this.sends.filter(e=>null==this.filter||this.filter(e)),void this.applyTextSearch();this.searchPending=!0,this.searchTimeout=setTimeout(()=>Cc(this,void 0,void 0,(function*(){this.hasSearched=this.searchService.isSearchable(this.searchText),this.filteredSends=this.sends.filter(e=>null==this.filter||this.filter(e)),this.applyTextSearch(),this.searchPending=!1})),e)}))}removePassword(e){return Cc(this,void 0,void 0,(function*(){if(null!=this.actionPromise||null==e.password)return;if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("removePasswordConfirmation"),this.i18nService.t("removePassword"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{this.actionPromise=this.sendService.removePasswordWithServer(e.id),yield this.actionPromise,null!=this.onSuccessfulRemovePassword?this.onSuccessfulRemovePassword():(this.platformUtilsService.showToast("success",null,this.i18nService.t("removedPassword")),yield this.load())}catch(e){}this.actionPromise=null}))}delete(e){return Cc(this,void 0,void 0,(function*(){if(null!=this.actionPromise)return!1;if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("deleteSendConfirmation"),this.i18nService.t("deleteSend"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{this.actionPromise=this.sendService.deleteWithServer(e.id),yield this.actionPromise,null!=this.onSuccessfulDelete?this.onSuccessfulDelete():(this.platformUtilsService.showToast("success",null,this.i18nService.t("deletedSend")),yield this.refresh())}catch(e){}return this.actionPromise=null,!0}))}copy(e){let t="https://send.bitwarden.com/#";const i=this.environmentService.getWebVaultUrl();null!=i&&(t=i+"/#/send/");const n=t+e.accessId+"/"+e.urlB64Key;this.platformUtilsService.copyToClipboard(n),this.platformUtilsService.showToast("success",null,this.i18nService.t("valueCopied",this.i18nService.t("sendLink")))}searchTextChanged(){this.search(200)}selectAll(){this.clearSelections(),this.selectedAll=!0,this.applyFilter(null)}selectType(e){this.clearSelections(),this.selectedType=e,this.applyFilter(t=>t.type===e)}clearSelections(){this.selectedAll=!1,this.selectedType=null}applyTextSearch(){null!=this.searchText&&(this.filteredSends=this.searchService.searchSends(this.filteredSends,this.searchText))}}Pc.ɵfac=function(e){return new(e||Pc)(n.cc(bc),n.cc(I.a),n.cc(A.a),n.cc(k),n.cc(n.M),n.cc(vc),n.cc(mo),n.cc(z.a))},Pc.ɵdir=n.Xb({type:Pc}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Pc,[{type:n.q}],(function(){return[{type:bc},{type:I.a},{type:A.a},{type:k},{type:n.M},{type:vc},{type:mo},{type:z.a}]}),null);var xc,kc=i(288),Tc=i(289),Ic=i(442),Dc=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};!function(e){e.DeletionDate="deletion",e.ExpriationDate="expiration"}(xc||(xc={}));class Ac{constructor(e,t,i,s,r,o,c,a){this.i18nService=e,this.platformUtilsService=t,this.environmentService=i,this.datePipe=s,this.sendService=r,this.userService=o,this.messagingService=c,this.policyService=a,this.onSavedSend=new n.t,this.onDeletedSend=new n.t,this.onCancelled=new n.t,this.copyLink=!1,this.disableSend=!1,this.disableHideEmail=!1,this.expirationDate=null,this.showPassword=!1,this.sendType=Sc.a,this.deletionDateSelect=168,this.expirationDateSelect=null,this.canAccessPremium=!0,this.emailVerified=!0,this.alertShown=!1,this.showOptions=!1,this.typeOptions=[{name:e.t("sendTypeFile"),value:Sc.a.File},{name:e.t("sendTypeText"),value:Sc.a.Text}],this.deletionDateOptions=this.expirationDateOptions=[{name:e.t("oneHour"),value:1},{name:e.t("oneDay"),value:24},{name:e.t("days","2"),value:48},{name:e.t("days","3"),value:72},{name:e.t("days","7"),value:168},{name:e.t("days","30"),value:720},{name:e.t("custom"),value:0}],this.expirationDateOptions=[{name:e.t("never"),value:null}].concat([...this.deletionDateOptions]);const l=this.environmentService.getWebVaultUrl();this.sendLinkBaseUrl=null==l?"https://send.bitwarden.com/#":l+"/#/send/"}get link(){return null!=this.send.id&&null!=this.send.accessId?this.sendLinkBaseUrl+this.send.accessId+"/"+this.send.urlB64Key:null}get isSafari(){return this.platformUtilsService.isSafari()}get isDateTimeLocalSupported(){return!(this.platformUtilsService.isFirefox()||this.platformUtilsService.isSafari())}ngOnInit(){return Dc(this,void 0,void 0,(function*(){yield this.load()}))}get editMode(){return null!=this.sendId}get title(){return this.i18nService.t(this.editMode?"editSend":"createSend")}get expirationDateTimeFallback(){return this.nullOrWhiteSpaceCount([this.expirationDateFallback,this.expirationTimeFallback])>0?null:`${this.formatDateFallbacks(this.expirationDateFallback)}T${this.expirationTimeFallback}`}get deletionDateTimeFallback(){return this.nullOrWhiteSpaceCount([this.deletionDateFallback,this.deletionTimeFallback])>0?null:`${this.formatDateFallbacks(this.deletionDateFallback)}T${this.deletionTimeFallback}`}load(){return Dc(this,void 0,void 0,(function*(){const e=yield this.policyService.getAll(Oc.DisableSend),t=yield this.userService.getAllOrganizations();this.disableSend=t.some(t=>t.enabled&&t.status===wc.Confirmed&&t.usePolicies&&!t.canManagePolicies&&e.some(e=>e.organizationId===t.id&&e.enabled));const i=yield this.policyService.getAll(Oc.SendOptions);if(this.disableHideEmail=yield t.some(e=>e.enabled&&e.status===wc.Confirmed&&e.usePolicies&&!e.canManagePolicies&&i.some(t=>t.organizationId===e.id&&t.enabled&&t.data.disableHideEmail)),this.canAccessPremium=yield this.userService.canAccessPremium(),this.emailVerified=yield this.userService.getEmailVerified(),this.canAccessPremium&&this.emailVerified||(this.type=Sc.a.Text),null==this.send)if(this.editMode){const e=yield this.loadSend();this.send=yield e.decrypt()}else this.send=new Ic.a,this.send.type=null==this.type?Sc.a.File:this.type,this.send.file=new kc.a,this.send.text=new Tc.a,this.send.deletionDate=new Date,this.send.deletionDate.setDate(this.send.deletionDate.getDate()+7);if(this.hasPassword=null!=this.send.password&&""!==this.send.password.trim(),this.isDateTimeLocalSupported)this.deletionDate=this.dateToString(this.send.deletionDate),this.expirationDate=this.dateToString(this.send.expirationDate);else{const e=this.dateToSplitString(this.send.deletionDate);void 0!==e&&e.length>0&&(this.deletionDateFallback=e[0],this.deletionTimeFallback=e[1],this.isSafari&&(this.safariDeletionTime=this.deletionTimeFallback));const t=this.dateToSplitString(this.send.expirationDate);void 0!==t&&t.length>0&&(this.expirationDateFallback=t[0],this.expirationTimeFallback=t[1],this.isSafari&&(this.safariExpirationTime=this.expirationTimeFallback))}this.isSafari&&(this.safariDeletionTimeOptions=this.safariTimeOptions(xc.DeletionDate),this.safariExpirationTimeOptions=this.safariTimeOptions(xc.ExpriationDate))}))}submit(){var e,t;return Dc(this,void 0,void 0,(function*(){if(!this.isDateTimeLocalSupported){if(this.isSafari&&(this.expirationTimeFallback=null!==(e=this.safariExpirationTime)&&void 0!==e?e:this.expirationTimeFallback,this.deletionTimeFallback=null!==(t=this.safariDeletionTime)&&void 0!==t?t:this.deletionTimeFallback),this.deletionDate=this.deletionDateTimeFallback,null!=this.expirationDateTimeFallback&&isNaN(Date.parse(this.expirationDateTimeFallback)))return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("expirationDateIsInvalid"));if(isNaN(Date.parse(this.deletionDateTimeFallback)))return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("deletionDateIsInvalid"));if(1===this.nullOrWhiteSpaceCount([this.expirationDateFallback,this.expirationTimeFallback]))return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("expirationDateAndTimeRequired"));(this.editMode||0===this.expirationDateSelect)&&(this.expirationDate=this.expirationDateTimeFallback)}if(this.disableSend)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("sendDisabledWarning")),!1;if(null==this.send.name||""===this.send.name)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("nameRequired")),!1;let i=null;if(this.send.type===Sc.a.File&&!this.editMode){const e=document.getElementById("file").files;if(null==e||0===e.length)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("selectFile"));if(i=e[0],e[0].size>524288e3)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("maxFileSize"))}if(!this.editMode){const e=new Date;if(this.deletionDateSelect>0){const t=new Date;t.setHours(e.getHours()+this.deletionDateSelect),this.deletionDate=this.dateToString(t)}if(null!=this.expirationDateSelect&&this.expirationDateSelect>0){const t=new Date;t.setHours(e.getHours()+this.expirationDateSelect),this.expirationDate=this.dateToString(t)}}null!=this.password&&""===this.password.trim()&&(this.password=null),this.formPromise=this.encryptSend(i).then(e=>Dc(this,void 0,void 0,(function*(){const t=this.sendService.saveWithServer(e);if(yield t,null==this.send.id&&(this.send.id=e[0].id),null==this.send.accessId&&(this.send.accessId=e[0].accessId),this.onSavedSend.emit(this.send),this.copyLink&&null!=this.link){const e=yield this.copyLinkToClipboard(this.link);null==e||e?this.platformUtilsService.showToast("success",null,this.i18nService.t(this.editMode?"editedSend":"createdSend")):(yield this.platformUtilsService.showDialog(this.i18nService.t(this.editMode?"editedSend":"createdSend"),null,this.i18nService.t("ok"),null,"success",null),yield this.copyLinkToClipboard(this.link))}})));try{return yield this.formPromise,!0}catch(e){}return!1}))}clearExpiration(){this.expirationDate=null,this.expirationDateFallback=null,this.expirationTimeFallback=null,this.safariExpirationTime=null}copyLinkToClipboard(e){return Dc(this,void 0,void 0,(function*(){return Promise.resolve(this.platformUtilsService.copyToClipboard(e))}))}delete(){return Dc(this,void 0,void 0,(function*(){if(null!=this.deletePromise)return!1;if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("deleteSendConfirmation"),this.i18nService.t("deleteSend"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{return this.deletePromise=this.sendService.deleteWithServer(this.send.id),yield this.deletePromise,this.platformUtilsService.showToast("success",null,this.i18nService.t("deletedSend")),yield this.load(),this.onDeletedSend.emit(this.send),!0}catch(e){}return!1}))}typeChanged(){this.send.type!==Sc.a.File||this.alertShown||(this.canAccessPremium?this.emailVerified||(this.alertShown=!0,this.messagingService.send("emailVerificationRequired")):(this.alertShown=!0,this.messagingService.send("premiumRequired")))}toggleOptions(){this.showOptions=!this.showOptions}expirationDateFallbackChanged(){var e,t;this.isSafari?this.safariExpirationTime=null!==(e=this.safariExpirationTime)&&void 0!==e?e:"00:00":this.expirationTimeFallback=null!==(t=this.expirationTimeFallback)&&void 0!==t?t:this.datePipe.transform(new Date,"HH:mm")}loadSend(){return Dc(this,void 0,void 0,(function*(){return this.sendService.get(this.sendId)}))}encryptSend(e){return Dc(this,void 0,void 0,(function*(){const t=yield this.sendService.encrypt(this.send,e,this.password,null);try{t[0].deletionDate=null==this.deletionDate?null:new Date(this.deletionDate)}catch(e){t[0].deletionDate=null}try{t[0].expirationDate=null==this.expirationDate?null:new Date(this.expirationDate)}catch(e){t[0].expirationDate=null}return t}))}dateToString(e){return null==e?null:this.datePipe.transform(e,"yyyy-MM-ddTHH:mm")}formatDateFallbacks(e){try{return this.isSafari||(e+=" 00:00"),this.datePipe.transform(new Date(e),"yyyy-MM-dd")}catch(e){this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("dateParsingError"))}}dateToSplitString(e){if(null!=e){return[this.isSafari?this.datePipe.transform(e,"MM/dd/yyyy"):this.datePipe.transform(e,"yyyy-MM-dd"),this.datePipe.transform(e,"HH:mm")]}}togglePasswordVisible(){this.showPassword=!this.showPassword,document.getElementById("password").focus()}nullOrWhiteSpaceCount(e){return e.filter(e=>null==e||""===e.trim()).length}safariTimeOptions(e){const t=[],i=[],n=[],s=[];for(let e=1;e<=12;e++)for(let r=0;r<60;r+=15){let o=e.toString(),c=r.toString();if(e<10&&(o="0"+o),r<10&&(c="0"+c),12===e){const e={standard:`${o}:${c} AM`,military:"00:"+c};i.push(e);const n={standard:`${o}:${c} PM`,military:`${o}:${c}`};t.push(n)}else{const t={standard:`${o}:${c} AM`,military:`${o}:${c}`};n.push(t);const i={standard:`${o}:${c} PM`,military:`${e+12}:${c}`};s.push(i)}}const r=[...i,...n,...t,...s];if(e===xc.ExpriationDate&&null!=this.expirationDateTimeFallback&&this.editMode){return[{standard:this.datePipe.transform(this.expirationDateTimeFallback,"hh:mm a"),military:this.datePipe.transform(this.expirationDateTimeFallback,"HH:mm")},{standard:null,military:null},...r]}if(e===xc.DeletionDate&&null!=this.deletionDateTimeFallback&&this.editMode){return[{standard:this.datePipe.transform(this.deletionDateTimeFallback,"hh:mm a"),military:this.datePipe.transform(this.deletionDateTimeFallback,"HH:mm")},...r]}return[{standard:null,military:null},...r]}}Ac.ɵfac=function(e){return new(e||Ac)(n.cc(I.a),n.cc(A.a),n.cc(k),n.cc(Dr.d),n.cc(bc),n.cc(z.a),n.cc(a.a),n.cc(mo))},Ac.ɵdir=n.Xb({type:Ac,inputs:{sendId:"sendId",type:"type"},outputs:{onSavedSend:"onSavedSend",onDeletedSend:"onDeletedSend",onCancelled:"onCancelled"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ac,[{type:n.q}],(function(){return[{type:I.a},{type:A.a},{type:k},{type:Dr.d},{type:bc},{type:z.a},{type:a.a},{type:mo}]}),{sendId:[{type:n.D}],type:[{type:n.D}],onSavedSend:[{type:n.O}],onDeletedSend:[{type:n.O}],onCancelled:[{type:n.O}]});var Mc=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function zc(e,t){1&e&&(n.hc(0,"app-callout"),n.Oc(1," "),n.hc(2,"span"),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.gc()),2&e&&(n.Qb(3),n.Pc(n.uc(4,1,"sendDisabledWarning")))}function Ec(e,t){1&e&&(n.hc(0,"app-callout",45),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"sendOptionsPolicyInEffect")," "))}function Uc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",49),n.Oc(1," "),n.hc(2,"input",50),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(3).send.type=t}))("change",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).typeChanged(i)})),n.gc(),n.Oc(3," "),n.hc(4,"label",51),n.Oc(5),n.gc(),n.Oc(6," "),n.gc()}if(2&e){const e=t.$implicit,i=n.sc(3);n.Qb(2),n.Bc("name","Type_",e.value,""),n.Bc("id","type_",e.value,""),n.zc("ngModel",i.send.type)("value",e.value)("checked",i.send.type===e.value)("disabled",i.disableSend),n.Qb(2),n.Bc("for","type_",e.value,""),n.Qb(1),n.Qc(" ",e.name," ")}}function Nc(e,t){if(1&e&&(n.hc(0,"div",46),n.Oc(1," "),n.hc(2,"label",47),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.Mc(6,Uc,7,8,"div",48),n.Oc(7," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,2,"whatTypeOfSend")),n.Qb(3),n.zc("ngForOf",e.typeOptions)}}function Rc(e,t){if(1&e&&(n.hc(0,"div",52),n.Oc(1," "),n.hc(2,"label",53),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.dc(6,"input",54),n.Oc(7," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,2,"file")),n.Qb(3),n.zc("disabled",e.disableSend)}}function Fc(e,t){if(1&e&&(n.hc(0,"div",52),n.Oc(1," "),n.hc(2,"label",53),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"div",31),n.Oc(7),n.gc(),n.Oc(8," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,3,"file")),n.Qb(4),n.Rc("",e.send.file.fileName," (",e.send.file.sizeName,")")}}function Qc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",16),n.Oc(1," "),n.hc(2,"label",55),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"textarea",56),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).send.text.text=t})),n.gc(),n.Oc(7," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,3,"text")),n.Qb(3),n.zc("ngModel",e.send.text.text)("readOnly",e.disableSend)}}function Vc(e,t){1&e&&(n.hc(0,"div",36),n.Oc(1),n.tc(2,"i18n"),n.tc(3,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Rc(" ",n.uc(2,2,"sendFileDesc")," ",n.uc(3,4,"maxFileSize")," "))}function Bc(e,t){1&e&&(n.hc(0,"div",36),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"sendTextDesc")," "))}function Lc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",11),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"div",38),n.Oc(5," "),n.hc(6,"label",57),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.hc(10,"input",58),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).send.text.hidden=t})),n.gc(),n.Oc(11," "),n.gc(),n.Oc(12," "),n.gc(),n.Oc(13," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(7),n.Pc(n.uc(8,3,"textHiddenByDefault")),n.Qb(3),n.zc("ngModel",e.send.text.hidden)("disabled",e.disableSend)}}function _c(e,t){if(1&e&&(n.hc(0,"option",63),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Qc("",e.name," ")}}function jc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",16),n.Oc(1," "),n.hc(2,"label",59),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"select",60),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).deletionDateSelect=t})),n.Oc(7," "),n.Mc(8,_c,2,2,"option",61),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"small",62),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,4,"deletionDate")),n.Qb(3),n.zc("ngModel",e.deletionDateSelect),n.Qb(2),n.zc("ngForOf",e.deletionDateOptions),n.Qb(4),n.Pc(n.uc(13,6,"deletionDateDesc"))}}function Kc(e,t){1&e&&(n.hc(0,"label",68),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"deletionDate")))}function Hc(e,t){1&e&&(n.hc(0,"small",62),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"deletionDateDesc")))}function Wc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",64),n.Oc(1," "),n.Mc(2,Kc,3,3,"label",65),n.Oc(3," "),n.hc(4,"input",66),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).deletionDate=t})),n.gc(),n.Oc(5," "),n.Mc(6,Hc,3,3,"small",67),n.Oc(7," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",e.editMode),n.Qb(2),n.zc("ngModel",e.deletionDate),n.Qb(2),n.zc("ngIf",e.editMode)}}function qc(e,t){if(1&e&&(n.hc(0,"option",63),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Qc("",e.name," ")}}function Gc(e,t){if(1&e){const e=n.ic();n.hc(0,"div",16),n.Oc(1," "),n.hc(2,"label",69),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"select",70),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).expirationDateSelect=t})),n.Oc(7," "),n.Mc(8,qc,2,2,"option",61),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"small",62),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,4,"expirationDate")),n.Qb(3),n.zc("ngModel",e.expirationDateSelect),n.Qb(2),n.zc("ngForOf",e.expirationDateOptions),n.Qb(4),n.Pc(n.uc(13,6,"expirationDateDesc"))}}function Jc(e,t){1&e&&(n.hc(0,"label",73),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"expirationDate")))}function Yc(e,t){1&e&&(n.hc(0,"small",62),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"expirationDateDesc")))}function $c(e,t){if(1&e){const e=n.ic();n.hc(0,"div",64),n.Oc(1," "),n.Mc(2,Jc,3,3,"label",71),n.Oc(3," "),n.hc(4,"input",72),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).expirationDate=t})),n.gc(),n.Oc(5," "),n.Mc(6,Yc,3,3,"small",67),n.Oc(7," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",e.editMode),n.Qb(2),n.zc("ngModel",e.expirationDate)("readOnly",e.disableSend),n.Qb(2),n.zc("ngIf",e.editMode)}}function Xc(e,t){1&e&&(n.hc(0,"div",36),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"maxAccessCountDesc")," "))}function Zc(e,t){if(1&e&&(n.hc(0,"div",36),n.Oc(1," "),n.hc(2,"p"),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.tc(6,"i18n"),n.hc(7,"strong"),n.Oc(8),n.gc(),n.Oc(9," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,3,"maxAccessCountDesc")),n.Qb(2),n.Qc(" ",n.uc(6,5,"currentAccessCount"),": "),n.Qb(3),n.Pc(e.send.accessCount)}}function ea(e,t){if(1&e&&(n.hc(0,"div",16),n.Oc(1," "),n.hc(2,"label",74),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.dc(6,"input",75),n.Oc(7," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,2,"sendLinkLabel")),n.Qb(3),n.zc("ngModel",e.link)}}const ta=function(e,t){return{"fa-chevron-down":e,"fa-chevron-up":t}},ia=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}};function na(e,t){if(1&e){const e=n.ic();n.hc(0,"div",10),n.Oc(1," "),n.hc(2,"div",11),n.Oc(3," "),n.Mc(4,zc,6,3,"app-callout",12),n.Oc(5," "),n.Mc(6,Ec,3,3,"app-callout",13),n.Oc(7," "),n.gc(),n.Oc(8," "),n.hc(9,"div",11),n.Oc(10," "),n.hc(11,"div",14),n.Oc(12),n.gc(),n.Oc(13," "),n.hc(14,"div",15),n.Oc(15," "),n.hc(16,"div",16),n.Oc(17," "),n.hc(18,"label",17),n.Oc(19),n.tc(20,"i18n"),n.gc(),n.Oc(21," "),n.hc(22,"input",18),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().send.name=t})),n.gc(),n.Oc(23," "),n.gc(),n.Oc(24," "),n.Mc(25,Nc,8,4,"div",19),n.Oc(26," "),n.Mc(27,Rc,8,4,"div",20),n.Oc(28," "),n.Mc(29,Fc,9,5,"div",20),n.Oc(30," "),n.Mc(31,Qc,8,5,"div",21),n.Oc(32," "),n.gc(),n.Oc(33," "),n.Mc(34,Vc,4,6,"div",22),n.Oc(35," "),n.Mc(36,Bc,3,3,"div",22),n.Oc(37," "),n.gc(),n.Oc(38," "),n.Mc(39,Lc,14,5,"div",23),n.Oc(40," "),n.hc(41,"div",11),n.Oc(42," "),n.hc(43,"div",14),n.Oc(44),n.tc(45,"i18n"),n.hc(46,"a",24),n.oc("click",(function(){n.Hc(e);return n.sc().toggleOptions()})),n.Oc(47," "),n.dc(48,"i",25),n.Oc(49," "),n.gc(),n.Oc(50," "),n.gc(),n.Oc(51," "),n.gc(),n.Oc(52," "),n.hc(53,"div",26),n.Oc(54," "),n.hc(55,"div",11),n.Oc(56," "),n.hc(57,"div",15),n.Oc(58," "),n.Mc(59,jc,15,8,"div",21),n.Oc(60," "),n.Mc(61,Wc,8,3,"div",27),n.Oc(62," "),n.Mc(63,Gc,15,8,"div",21),n.Oc(64," "),n.Mc(65,$c,8,4,"div",27),n.Oc(66," "),n.gc(),n.Oc(67," "),n.gc(),n.Oc(68," "),n.hc(69,"div",11),n.Oc(70," "),n.hc(71,"div",15),n.Oc(72," "),n.hc(73,"div",16),n.Oc(74," "),n.hc(75,"label",28),n.Oc(76),n.tc(77,"i18n"),n.gc(),n.Oc(78," "),n.hc(79,"input",29),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().send.maxAccessCount=t})),n.gc(),n.Oc(80," "),n.gc(),n.Oc(81," "),n.gc(),n.Oc(82," "),n.Mc(83,Xc,3,3,"div",22),n.Oc(84," "),n.Mc(85,Zc,10,7,"div",22),n.Oc(86," "),n.gc(),n.Oc(87," "),n.hc(88,"div",11),n.Oc(89," "),n.hc(90,"div",15),n.Oc(91," "),n.hc(92,"div",30),n.Oc(93," "),n.hc(94,"div",31),n.Oc(95," "),n.hc(96,"label",32),n.Oc(97),n.tc(98,"i18n"),n.gc(),n.Oc(99," "),n.hc(100,"input",33),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().password=t})),n.gc(),n.Oc(101," "),n.gc(),n.Oc(102," "),n.hc(103,"div",34),n.Oc(104," "),n.hc(105,"a",35),n.oc("click",(function(){n.Hc(e);return n.sc().togglePasswordVisible()})),n.tc(106,"i18n"),n.Oc(107," "),n.dc(108,"i",25),n.Oc(109," "),n.gc(),n.Oc(110," "),n.gc(),n.Oc(111," "),n.gc(),n.Oc(112," "),n.gc(),n.Oc(113," "),n.hc(114,"div",36),n.Oc(115),n.tc(116,"i18n"),n.gc(),n.Oc(117," "),n.gc(),n.Oc(118," "),n.hc(119,"div",11),n.Oc(120," "),n.hc(121,"div",14),n.Oc(122),n.tc(123,"i18n"),n.gc(),n.Oc(124," "),n.hc(125,"div",15),n.Oc(126," "),n.hc(127,"div",16),n.Oc(128," "),n.hc(129,"textarea",37),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().send.notes=t})),n.gc(),n.Oc(130," "),n.gc(),n.Oc(131," "),n.gc(),n.Oc(132," "),n.hc(133,"div",36),n.Oc(134),n.tc(135,"i18n"),n.gc(),n.Oc(136," "),n.gc(),n.Oc(137," "),n.hc(138,"div",11),n.Oc(139," "),n.hc(140,"div",15),n.Oc(141," "),n.hc(142,"div",38),n.Oc(143," "),n.hc(144,"label",39),n.Oc(145),n.tc(146,"i18n"),n.gc(),n.Oc(147," "),n.hc(148,"input",40),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().send.hideEmail=t})),n.gc(),n.Oc(149," "),n.gc(),n.Oc(150," "),n.gc(),n.Oc(151," "),n.gc(),n.Oc(152," "),n.hc(153,"div",11),n.Oc(154," "),n.hc(155,"div",15),n.Oc(156," "),n.hc(157,"div",38),n.Oc(158," "),n.hc(159,"label",41),n.Oc(160),n.tc(161,"i18n"),n.gc(),n.Oc(162," "),n.hc(163,"input",42),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().send.disabled=t})),n.gc(),n.Oc(164," "),n.gc(),n.Oc(165," "),n.gc(),n.Oc(166," "),n.gc(),n.Oc(167," "),n.gc(),n.Oc(168," "),n.hc(169,"div",11),n.Oc(170," "),n.hc(171,"div",14),n.Oc(172),n.tc(173,"i18n"),n.gc(),n.Oc(174," "),n.hc(175,"div",15),n.Oc(176," "),n.Mc(177,ea,8,4,"div",21),n.Oc(178," "),n.hc(179,"div",38),n.Oc(180," "),n.hc(181,"label",43),n.Oc(182),n.tc(183,"i18n"),n.gc(),n.Oc(184," "),n.hc(185,"input",44),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().copyLink=t})),n.gc(),n.Oc(186," "),n.gc(),n.Oc(187," "),n.gc(),n.Oc(188," "),n.gc(),n.Oc(189," "),n.gc()}if(2&e){const e=n.sc();n.Qb(4),n.zc("ngIf",e.disableSend),n.Qb(2),n.zc("ngIf",e.disableHideEmail&&!e.disableSend),n.Qb(6),n.Qc(" ",e.title," "),n.Qb(7),n.Pc(n.uc(20,48,"name")),n.Qb(3),n.zc("ngModel",e.send.name)("readOnly",e.disableSend),n.Qb(3),n.zc("ngIf",!e.editMode),n.Qb(2),n.zc("ngIf",!e.editMode&&e.send.type===e.sendType.File),n.Qb(2),n.zc("ngIf",e.editMode&&e.send.type===e.sendType.File),n.Qb(2),n.zc("ngIf",e.send.type===e.sendType.Text),n.Qb(3),n.zc("ngIf",!e.editMode&&e.send.type===e.sendType.File),n.Qb(2),n.zc("ngIf",e.send.type===e.sendType.Text),n.Qb(3),n.zc("ngIf",e.send.type===e.sendType.Text),n.Qb(5),n.Qc(" ",n.uc(45,50,"options")," "),n.Qb(4),n.zc("ngClass",n.Ec(72,ta,!e.showOptions,e.showOptions)),n.Qb(5),n.zc("hidden",!e.showOptions),n.Qb(6),n.zc("ngIf",!e.editMode),n.Qb(2),n.zc("ngIf",0===e.deletionDateSelect||e.editMode),n.Qb(2),n.zc("ngIf",!e.editMode),n.Qb(2),n.zc("ngIf",0===e.expirationDateSelect||e.editMode),n.Qb(11),n.Pc(n.uc(77,52,"maxAccessCount")),n.Qb(3),n.zc("ngModel",e.send.maxAccessCount)("readOnly",e.disableSend),n.Qb(4),n.zc("ngIf",!e.editMode),n.Qb(2),n.zc("ngIf",e.editMode),n.Qb(12),n.Pc(n.uc(98,54,e.hasPassword?"newPassword":"password")),n.Qb(3),n.Ac("type",e.showPassword?"text":"password"),n.zc("ngModel",e.password)("readOnly",e.disableSend),n.Qb(5),n.Ac("appA11yTitle",n.uc(106,56,"toggleVisibility")),n.zc("disabled",e.disableSend),n.Qb(3),n.zc("ngClass",n.Ec(75,ia,!e.showPassword,e.showPassword)),n.Qb(7),n.Qc(" ",n.uc(116,58,"sendPasswordDesc")," "),n.Qb(7),n.Qc(" ",n.uc(123,60,"notes")," "),n.Qb(7),n.zc("ngModel",e.send.notes)("readOnly",e.disableSend),n.Qb(5),n.Qc(" ",n.uc(135,62,"sendNotesDesc")," "),n.Qb(11),n.Pc(n.uc(146,64,"hideEmail")),n.Qb(3),n.zc("ngModel",e.send.hideEmail)("disabled",e.disableHideEmail&&!e.send.hideEmail||e.disableSend),n.Qb(12),n.Pc(n.uc(161,66,"disableSend")),n.Qb(3),n.zc("ngModel",e.send.disabled)("disabled",e.disableSend),n.Qb(9),n.Qc(" ",n.uc(173,68,"share")," "),n.Qb(5),n.zc("ngIf",e.editMode),n.Qb(5),n.Pc(n.uc(183,70,"copySendLinkOnSave")),n.Qb(3),n.zc("ngModel",e.copyLink)("disabled",e.disableSend)}}function sa(e,t){if(1&e&&(n.hc(0,"button",76),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",77),n.tc(4,"i18n"),n.Oc(5," "),n.hc(6,"span"),n.dc(7,"i",78),n.gc(),n.Oc(8," "),n.gc()),2&e){n.sc();const e=n.Gc(1);n.Ac("appA11yTitle",n.uc(1,3,"save")),n.zc("disabled",e.loading),n.Qb(3),n.Ac("title",n.uc(4,5,"loading"))}}function ra(e,t){if(1&e){const e=n.ic();n.hc(0,"button",79),n.oc("click",(function(){n.Hc(e);const t=n.sc();return t.copyLinkToClipboard(t.link)})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",80),n.Oc(4," "),n.gc()}2&e&&n.Ac("appA11yTitle",n.uc(1,1,"copySendLinkToClipboard"))}function oa(e,t){if(1&e){const e=n.ic();n.hc(0,"button",81,82),n.oc("click",(function(){n.Hc(e);return n.sc().delete()})),n.tc(2,"i18n"),n.Oc(3," "),n.dc(4,"i",83),n.Oc(5," "),n.dc(6,"i",84),n.Oc(7," "),n.gc()}if(2&e){const e=n.Gc(1);n.Ac("appA11yTitle",n.uc(2,3,"delete")),n.Qb(4),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading)}}class ca extends Ac{constructor(e,t,i,n,s,r,o,c){super(e,t,i,n,s,r,o,c)}refresh(){return Mc(this,void 0,void 0,(function*(){this.password=null;const e=yield this.loadSend();this.send=yield e.decrypt(),this.hasPassword=null!=this.send.password&&""!==this.send.password.trim(),this.deletionDate=this.dateToString(this.send.deletionDate),this.expirationDate=this.dateToString(this.send.expirationDate)}))}cancel(){this.onCancelled.emit(this.send)}copyLinkToClipboard(e){const t=Object.create(null,{copyLinkToClipboard:{get:()=>super.copyLinkToClipboard}});return Mc(this,void 0,void 0,(function*(){t.copyLinkToClipboard.call(this,e),this.platformUtilsService.showToast("success",null,this.i18nService.t("valueCopied",this.i18nService.t("sendLink")))}))}}function aa(e,t){if(1&e&&(n.fc(0),n.Oc(1," "),n.hc(2,"a",1),n.Oc(3," "),n.dc(4,"i",2),n.Oc(5),n.gc(),n.Oc(6," "),n.ec()),2&e){const e=t.$implicit;n.Qb(2),n.zc("routerLink",e.link)("title",e.label),n.Qb(2),n.zc("ngClass",e.icon),n.Qb(1),n.Qc("",e.label," ")}}ca.ɵfac=function(e){return new(e||ca)(n.cc(I.a),n.cc(A.a),n.cc(k),n.cc(Dr.d),n.cc(bc),n.cc(z.a),n.cc(a.a),n.cc(mo))},ca.ɵcmp=n.Wb({type:ca,selectors:[["app-send-add-edit"]],features:[n.Nb],decls:25,vars:9,consts:[[3,"appApiAction","ngSubmit"],["form",""],[1,"content"],["class","inner-content",4,"ngIf"],[1,"footer"],["appBlurClick","","type","submit","class","primary btn-submit",3,"appA11yTitle","disabled",4,"ngIf"],["appBlurClick","","type","button",3,"disabled","click"],[1,"right"],["appBlurClick","","type","button",3,"appA11yTitle","click",4,"ngIf"],["appBlurClick","","type","button","class","danger",3,"appA11yTitle","click",4,"ngIf"],[1,"inner-content"],[1,"box"],[4,"ngIf"],["type","info",4,"ngIf"],[1,"box-header"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","name"],["id","name","type","text","name","Name","appAutofocus","",3,"ngModel","readOnly","ngModelChange"],["class","box-content-row box-content-row-radio",4,"ngIf"],["class","box-content-row","appBowRow","",4,"ngIf"],["class","box-content-row","appBoxRow","",4,"ngIf"],["class","box-footer",4,"ngIf"],["class","box",4,"ngIf"],["href","#","appStopClick","","appBlurClick","","role","button",1,"toggle",3,"click"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],[3,"hidden"],["class","box-content-row",4,"ngIf"],["for","maxAccessCount"],["id","maxAccessCount","type","number","name","maxAccessCount",3,"ngModel","readOnly","ngModelChange"],["appBoxRow","",1,"box-content-row","box-content-row-flex"],[1,"row-main"],["for","password"],["id","password","name","password",3,"type","ngModel","readOnly","ngModelChange"],[1,"action-buttons"],["href","#","appStopClick","","appBlurClick","","role","button",1,"row-btn",3,"appA11yTitle","disabled","click"],[1,"box-footer"],["id","notes","name","notes","rows","6",3,"ngModel","readOnly","ngModelChange"],["appBoxRow","",1,"box-content-row","box-content-row-checkbox"],["for","hideEmail"],["id","hideEmail","type","checkbox","name","HideEmail",3,"ngModel","disabled","ngModelChange"],["for","disabled"],["id","disabled","type","checkbox","name","disabled",3,"ngModel","disabled","ngModelChange"],["for","copyLink"],["id","copyLink","name","copyLink","type","checkbox",3,"ngModel","disabled","ngModelChange"],["type","info"],[1,"box-content-row","box-content-row-radio"],[1,"radio-header"],["class","item",4,"ngFor","ngForOf"],[1,"item"],["type","radio",1,"radio",3,"ngModel","name","id","value","checked","disabled","ngModelChange","change"],[1,"unstyled",3,"for"],["appBowRow","",1,"box-content-row"],["for","file"],["type","file","id","file","name","file","required","",1,"form-control-file",3,"disabled"],["for","text"],["id","text","name","text","rows","6",3,"ngModel","readOnly","ngModelChange"],["for","hideText"],["id","hideText","name","hideText","type","checkbox",3,"ngModel","disabled","ngModelChange"],["for","deletionDate"],["id","deletionDate","name","DeletionDateSelect","required","",3,"ngModel","ngModelChange"],[3,"ngValue",4,"ngFor","ngForOf"],[1,"help-block"],[3,"ngValue"],[1,"box-content-row"],["for","deletionDateCustom",4,"ngIf"],["id","deletionDateCustom","type","datetime-local","name","deletionDate","required","","placeholder","MM/DD/YYYY HH:MM AM/PM",3,"ngModel","ngModelChange"],["class","help-block",4,"ngIf"],["for","deletionDateCustom"],["for","expirationDate"],["id","expirationDate","name","expirationDateSelect","required","",3,"ngModel","ngModelChange"],["for","expirationDateCustom",4,"ngIf"],["id","expirationDateCustom","type","datetime-local","name","expirationDate","required","","placeholder","MM/DD/YYYY HH:MM AM/PM",3,"ngModel","readOnly","ngModelChange"],["for","expirationDateCustom"],["for","link"],["id","link","name","link","readonly","readonly",3,"ngModel"],["appBlurClick","","type","submit",1,"primary","btn-submit",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin",3,"title"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw"],["appBlurClick","","type","button",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-copy","fa-lg","fa-fw"],["appBlurClick","","type","button",1,"danger",3,"appA11yTitle","click"],["deleteBtn",""],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"]],template:function(e,t){if(1&e&&(n.hc(0,"form",0,1),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.Mc(5,na,190,78,"div",3),n.Oc(6," "),n.gc(),n.Oc(7," "),n.hc(8,"div",4),n.Oc(9," "),n.Mc(10,sa,9,7,"button",5),n.Oc(11," "),n.hc(12,"button",6),n.oc("click",(function(){return t.cancel()})),n.Oc(13),n.tc(14,"i18n"),n.gc(),n.Oc(15," "),n.hc(16,"div",7),n.Oc(17," "),n.Mc(18,ra,5,3,"button",8),n.Oc(19," "),n.Mc(20,oa,8,5,"button",9),n.Oc(21," "),n.gc(),n.Oc(22," "),n.gc(),n.Oc(23," "),n.gc(),n.Oc(24," ")),2&e){const e=n.Gc(1);n.zc("appApiAction",t.formPromise),n.Qb(5),n.zc("ngIf",t.send),n.Qb(5),n.zc("ngIf",!t.disableSend),n.Qb(2),n.zc("disabled",e.loading),n.Qb(1),n.Qc(" ",n.uc(14,7,"cancel")," "),n.Qb(5),n.zc("ngIf",t.editMode),n.Qb(2),n.zc("ngIf",t.editMode)}},directives:[dr.p,dr.g,dr.h,hr,Dr.k,fr,pr,dr.b,gr,dr.f,dr.i,Ar,Dr.i,dr.k,Mr,dr.a,ko,Dr.j,dr.l,dr.o,dr.n,dr.j,dr.q],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ca,[{type:n.l,args:[{selector:"app-send-add-edit",templateUrl:"add-edit.component.html"}]}],(function(){return[{type:I.a},{type:A.a},{type:k},{type:Dr.d},{type:bc},{type:z.a},{type:a.a},{type:mo}]}),null);class la{constructor(e){this.i18nService=e,this.items=[{link:"/vault",icon:"fa-lock",label:this.i18nService.translate("myVault")},{link:"/send",icon:"fa-paper-plane",label:"Send"}]}}la.ɵfac=function(e){return new(e||la)(n.cc(I.a))},la.ɵcmp=n.Wb({type:la,selectors:[["app-nav"]],decls:2,vars:1,consts:[[4,"ngFor","ngForOf"],["routerLinkActive","active",1,"btn","primary",3,"routerLink","title"],[1,"fa",3,"ngClass"]],template:function(e,t){1&e&&(n.Mc(0,aa,7,4,"ng-container",0),n.Oc(1," ")),2&e&&n.zc("ngForOf",t.items)},directives:[Dr.j,c.d,c.c,Dr.i],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(la,[{type:n.l,args:[{selector:"app-nav",templateUrl:"nav.component.html"}]}],(function(){return[{type:I.a}]}),null);class da{onClick(e){e.stopPropagation()}}da.ɵfac=function(e){return new(e||da)},da.ɵdir=n.Xb({type:da,selectors:[["","appStopProp",""]],hostBindings:function(e,t){1&e&&n.oc("click",(function(e){return t.onClick(e)}))}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(da,[{type:n.q,args:[{selector:"[appStopProp]"}]}],null,{onClick:[{type:n.w,args:["click",["$event"]]}]});var ua=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function ha(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",34),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",5),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"disabled")),n.Qb(4),n.Pc(n.uc(7,4,"disabled")))}function pa(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",35),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",5),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"password")),n.Qb(4),n.Pc(n.uc(7,4,"password")))}function ga(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",36),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",5),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"maxAccessCountReached")),n.Qb(4),n.Pc(n.uc(7,4,"maxAccessCountReached")))}function fa(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",37),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",5),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"expired")),n.Qb(4),n.Pc(n.uc(7,4,"expired")))}function ya(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",38),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",5),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"pendingDeletion")),n.Qb(4),n.Pc(n.uc(7,4,"pendingDeletion")))}const ma=function(e){return{active:e}};function va(e,t){if(1&e){const e=n.ic();n.hc(0,"a",26),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(2).selectSend(i.id)}))("contextmenu",(function(){n.Hc(e);const i=t.$implicit;return n.sc(2).viewSendMenu(i)})),n.tc(1,"i18n"),n.Oc(2," "),n.hc(3,"div",27),n.Oc(4," "),n.dc(5,"i",28),n.Oc(6," "),n.gc(),n.Oc(7," "),n.hc(8,"div",29),n.Oc(9," "),n.hc(10,"div",30),n.Oc(11),n.hc(12,"span",31),n.Oc(13," "),n.Mc(14,ha,9,6,"ng-container",32),n.Oc(15," "),n.Mc(16,pa,9,6,"ng-container",32),n.Oc(17," "),n.Mc(18,ga,9,6,"ng-container",32),n.Oc(19," "),n.Mc(20,fa,9,6,"ng-container",32),n.Oc(21," "),n.Mc(22,ya,9,6,"ng-container",32),n.Oc(23," "),n.gc(),n.Oc(24," "),n.gc(),n.Oc(25," "),n.hc(26,"span",33),n.Oc(27),n.tc(28,"date"),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.gc()}if(2&e){const e=t.$implicit,i=n.sc(2);n.Ac("title",n.uc(1,10,"viewItem")),n.zc("ngClass",n.Dc(14,ma,e.id===i.sendId)),n.Qb(5),n.zc("ngClass",0==e.type?"fa-file-o":"fa-file-text-o"),n.Qb(6),n.Qc(" ",e.name," "),n.Qb(3),n.zc("ngIf",e.disabled),n.Qb(2),n.zc("ngIf",e.password),n.Qb(2),n.zc("ngIf",e.maxAccessCountReached),n.Qb(2),n.zc("ngIf",e.expired),n.Qb(2),n.zc("ngIf",e.pendingDelete),n.Qb(5),n.Pc(n.uc(28,12,e.deletionDate))}}function ba(e,t){if(1&e){const e=n.ic();n.hc(0,"div",24),n.oc("scrolled",(function(){n.Hc(e);return n.sc().loadMore()})),n.Oc(1," "),n.Mc(2,va,31,16,"a",25),n.Oc(3," "),n.gc()}if(2&e){const e=n.sc();n.zc("infiniteScrollDistance",1)("infiniteScrollContainer","#items .content")("fromRoot",!0),n.Qb(2),n.zc("ngForOf",e.filteredSends)}}function wa(e,t){1&e&&n.dc(0,"i",41)}function Oa(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",42),n.Oc(3," "),n.hc(4,"p"),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.ec()),2&e&&(n.Qb(5),n.Pc(n.uc(6,1,"noItemsInList")))}function Sa(e,t){if(1&e&&(n.hc(0,"div",39),n.Oc(1," "),n.Mc(2,wa,1,0,"i",40),n.Oc(3," "),n.Mc(4,Oa,8,3,"ng-container",32),n.Oc(5," "),n.gc()),2&e){const e=n.sc();n.Qb(2),n.zc("ngIf",!e.loaded),n.Qb(2),n.zc("ngIf",e.loaded)}}function Ca(e,t){if(1&e){const e=n.ic();n.hc(0,"app-send-add-edit",43),n.oc("onSavedSend",(function(t){n.Hc(e);return n.sc().savedSend(t)}))("onCancelled",(function(t){n.Hc(e);return n.sc().cancel(t)}))("onDeletedSend",(function(t){n.Hc(e);return n.sc().deletedSend(t)})),n.gc()}if(2&e){const e=n.sc();n.zc("sendId",e.sendId)("type",e.selectedSendType)}}function Pa(e,t){1&e&&(n.hc(0,"div",44),n.Oc(1," "),n.hc(2,"div",3),n.Oc(3," "),n.hc(4,"div",4),n.Oc(5," "),n.dc(6,"img",45),n.Oc(7," "),n.gc(),n.Oc(8," "),n.gc(),n.Oc(9," "),n.gc())}const xa=function(e){return{active:e}};var ka;!function(e){e.None="",e.Add="add",e.Edit="edit"}(ka||(ka={}));class Ta extends Pc{constructor(e,t,i,n,s,r,o,c,a){super(e,t,i,n,r,o,c,a),this.broadcasterService=s,this.action=ka.None}ngOnInit(){const e=Object.create(null,{ngOnInit:{get:()=>super.ngOnInit}});return ua(this,void 0,void 0,(function*(){e.ngOnInit.call(this),this.broadcasterService.subscribe("SendComponent",e=>{this.ngZone.run(()=>ua(this,void 0,void 0,(function*(){switch(e.command){case"syncCompleted":yield this.load()}})))}),yield this.load()}))}ngOnDestroy(){this.broadcasterService.unsubscribe("SendComponent")}addSend(){this.action=ka.Add,null!=this.addEditComponent&&(this.addEditComponent.sendId=null,this.addEditComponent.send=null,this.addEditComponent.load())}cancel(e){this.action=ka.None,this.sendId=null}deletedSend(e){return ua(this,void 0,void 0,(function*(){yield this.refresh(),this.action=ka.None,this.sendId=null}))}savedSend(e){return ua(this,void 0,void 0,(function*(){yield this.refresh(),this.selectSend(e.id)}))}selectSend(e){return ua(this,void 0,void 0,(function*(){e===this.sendId&&this.action===ka.Edit||(this.action=ka.Edit,this.sendId=e,null!=this.addEditComponent&&(this.addEditComponent.sendId=e,yield this.addEditComponent.refresh()))}))}get selectedSendType(){var e;return null===(e=this.sends.find(e=>e.id===this.sendId))||void 0===e?void 0:e.type}viewSendMenu(e){const t=[];t.push({label:this.i18nService.t("copyLink"),click:()=>this.copy(e)}),t.push({label:this.i18nService.t("delete"),click:()=>ua(this,void 0,void 0,(function*(){yield this.delete(e),yield this.deletedSend(e)}))}),Object(s.a)(t)}}Ta.ɵfac=function(e){return new(e||Ta)(n.cc(bc),n.cc(I.a),n.cc(A.a),n.cc(k),n.cc(Sr),n.cc(n.M),n.cc(vc),n.cc(mo),n.cc(z.a))},Ta.ɵcmp=n.Wb({type:Ta,selectors:[["app-send"]],viewQuery:function(e,t){if(1&e&&n.Sc(ca,1),2&e){let e;n.Fc(e=n.pc())&&(t.addEditComponent=e.first)}},features:[n.Nb],decls:94,vars:35,consts:[["id","sends",1,"vault"],[1,"groupings"],[1,"mac-bar"],[1,"content"],[1,"inner-content"],[1,"sr-only"],[3,"ngClass"],["href","#","appStopClick","","appBlurClick","",3,"click"],["aria-hidden","true",1,"fa","fa-fw","fa-th"],["aria-hidden","true",1,"fa","fa-fw","fa-file-text-o"],["aria-hidden","true",1,"fa","fa-fw","fa-file-o"],[1,"footer"],[1,"nav"],["id","items",1,"items"],[1,"header","header-search"],[1,"search"],["type","search","id","search","autocomplete","off","appAutofocus","",3,"placeholder","ngModel","ngModelChange","input"],["aria-hidden","true",1,"fa","fa-search"],["class","list","infiniteScroll","",3,"infiniteScrollDistance","infiniteScrollContainer","fromRoot","scrolled",4,"ngIf"],["class","no-items",4,"ngIf"],["appBlurClick","",1,"block","primary",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-plus","fa-lg"],["id","addEdit","class","details",3,"sendId","type","onSavedSend","onCancelled","onDeletedSend",4,"ngIf"],["class","logo",4,"ngIf"],["infiniteScroll","",1,"list",3,"infiniteScrollDistance","infiniteScrollContainer","fromRoot","scrolled"],["appStopClick","","class","flex-list-item",3,"title","ngClass","click","contextmenu",4,"ngFor","ngForOf"],["appStopClick","",1,"flex-list-item",3,"title","ngClass","click","contextmenu"],["aria-hidden","true",1,"item-icon"],[1,"fa","fa-fw","fa-lg",3,"ngClass"],[1,"item-content"],[1,"item-title"],[1,"title-badges"],[4,"ngIf"],[1,"item-details"],["appStopProp","","aria-hidden","true",1,"fa","fa-warning",3,"title"],["appStopProp","","aria-hidden","true",1,"fa","fa-key",3,"title"],["appStopProp","","aria-hidden","true",1,"fa","fa-ban",3,"title"],["appStopProp","","aria-hidden","true",1,"fa","fa-clock-o",3,"title"],["appStopProp","","aria-hidden","true",1,"fa","fa-trash",3,"title"],[1,"no-items"],["class","fa fa-spinner fa-spin fa-3x","aria-hidden","true",4,"ngIf"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-3x"],["aria-hidden","true",1,"fa","fa-frown-o","fa-4x"],["id","addEdit",1,"details",3,"sendId","type","onSavedSend","onCancelled","onDeletedSend"],[1,"logo"],["alt","Bitwarden","aria-hidden","true",1,"logo-image"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.dc(4,"div",2),n.Oc(5," "),n.hc(6,"div",3),n.Oc(7," "),n.hc(8,"div",4),n.Oc(9," "),n.hc(10,"h2",5),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.hc(14,"ul"),n.Oc(15," "),n.hc(16,"li",6),n.Oc(17," "),n.hc(18,"a",7),n.oc("click",(function(){return t.selectAll()})),n.Oc(19," "),n.dc(20,"i",8),n.Oc(21),n.tc(22,"i18n"),n.gc(),n.Oc(23," "),n.gc(),n.Oc(24," "),n.gc(),n.Oc(25," "),n.hc(26,"h2"),n.Oc(27),n.tc(28,"i18n"),n.gc(),n.Oc(29," "),n.hc(30,"ul"),n.Oc(31," "),n.hc(32,"li",6),n.Oc(33," "),n.hc(34,"a",7),n.oc("click",(function(){return t.selectType(t.sendType.Text)})),n.Oc(35," "),n.dc(36,"i",9),n.Oc(37),n.tc(38,"i18n"),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.hc(41,"li",6),n.Oc(42," "),n.hc(43,"a",7),n.oc("click",(function(){return t.selectType(t.sendType.File)})),n.Oc(44," "),n.dc(45,"i",10),n.Oc(46),n.tc(47,"i18n"),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.gc(),n.Oc(50," "),n.gc(),n.Oc(51," "),n.hc(52,"div",11),n.Oc(53," "),n.dc(54,"app-nav",12),n.Oc(55," "),n.gc(),n.Oc(56," "),n.gc(),n.Oc(57," "),n.gc(),n.Oc(58," "),n.hc(59,"div",13),n.Oc(60," "),n.hc(61,"div",14),n.Oc(62," "),n.hc(63,"div",15),n.Oc(64," "),n.hc(65,"input",16),n.oc("ngModelChange",(function(e){return t.searchText=e}))("input",(function(){return t.searchTextChanged()})),n.tc(66,"i18n"),n.gc(),n.Oc(67," "),n.dc(68,"i",17),n.Oc(69," "),n.gc(),n.Oc(70," "),n.gc(),n.Oc(71," "),n.hc(72,"div",3),n.Oc(73," "),n.Mc(74,ba,4,4,"div",18),n.Oc(75," "),n.Mc(76,Sa,6,2,"div",19),n.Oc(77," "),n.gc(),n.Oc(78," "),n.hc(79,"div",11),n.Oc(80," "),n.hc(81,"button",20),n.oc("click",(function(){return t.addSend()})),n.tc(82,"i18n"),n.Oc(83," "),n.dc(84,"i",21),n.Oc(85," "),n.gc(),n.Oc(86," "),n.gc(),n.Oc(87," "),n.gc(),n.Oc(88," "),n.Mc(89,Ca,1,2,"app-send-add-edit",22),n.Oc(90," "),n.Mc(91,Pa,10,0,"div",23),n.Oc(92," "),n.gc(),n.Oc(93," ")),2&e&&(n.Qb(11),n.Pc(n.uc(12,15,"filters")),n.Qb(5),n.zc("ngClass",n.Dc(29,xa,t.selectedAll)),n.Qb(5),n.Qc(" ",n.uc(22,17,"allSends")," "),n.Qb(6),n.Pc(n.uc(28,19,"types")),n.Qb(5),n.zc("ngClass",n.Dc(31,xa,t.selectedType===t.sendType.Text)),n.Qb(5),n.Qc(" ",n.uc(38,21,"sendTypeText")," "),n.Qb(4),n.zc("ngClass",n.Dc(33,xa,t.selectedType===t.sendType.File)),n.Qb(5),n.Qc(" ",n.uc(47,23,"sendTypeFile")," "),n.Qb(19),n.Ac("placeholder",n.uc(66,25,"searchSends")),n.zc("ngModel",t.searchText),n.Qb(9),n.zc("ngIf",t.filteredSends.length),n.Qb(2),n.zc("ngIf",!t.filteredSends.length),n.Qb(5),n.Ac("appA11yTitle",n.uc(82,27,"addItem")),n.Qb(8),n.zc("ngIf","add"==t.action||"edit"==t.action),n.Qb(2),n.zc("ngIf",!t.action))},directives:[Dr.i,Ar,fr,la,dr.b,gr,dr.f,dr.i,Dr.k,Mr,o.a,Dr.j,da,ca],pipes:[yr.a,Dr.d],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ta,[{type:n.l,args:[{selector:"app-send",templateUrl:"send.component.html"}]}],(function(){return[{type:bc},{type:I.a},{type:A.a},{type:k},{type:Sr},{type:n.M},{type:vc},{type:mo},{type:z.a}]}),{addEditComponent:[{type:n.eb,args:[ca]}]});class Ia{}class Da{}var Aa,Ma=i(179);!function(e){e[e.User_LoggedIn=1e3]="User_LoggedIn",e[e.User_ChangedPassword=1001]="User_ChangedPassword",e[e.User_Updated2fa=1002]="User_Updated2fa",e[e.User_Disabled2fa=1003]="User_Disabled2fa",e[e.User_Recovered2fa=1004]="User_Recovered2fa",e[e.User_FailedLogIn=1005]="User_FailedLogIn",e[e.User_FailedLogIn2fa=1006]="User_FailedLogIn2fa",e[e.User_ClientExportedVault=1007]="User_ClientExportedVault",e[e.Cipher_Created=1100]="Cipher_Created",e[e.Cipher_Updated=1101]="Cipher_Updated",e[e.Cipher_Deleted=1102]="Cipher_Deleted",e[e.Cipher_AttachmentCreated=1103]="Cipher_AttachmentCreated",e[e.Cipher_AttachmentDeleted=1104]="Cipher_AttachmentDeleted",e[e.Cipher_Shared=1105]="Cipher_Shared",e[e.Cipher_UpdatedCollections=1106]="Cipher_UpdatedCollections",e[e.Cipher_ClientViewed=1107]="Cipher_ClientViewed",e[e.Cipher_ClientToggledPasswordVisible=1108]="Cipher_ClientToggledPasswordVisible",e[e.Cipher_ClientToggledHiddenFieldVisible=1109]="Cipher_ClientToggledHiddenFieldVisible",e[e.Cipher_ClientToggledCardCodeVisible=1110]="Cipher_ClientToggledCardCodeVisible",e[e.Cipher_ClientCopiedPassword=1111]="Cipher_ClientCopiedPassword",e[e.Cipher_ClientCopiedHiddenField=1112]="Cipher_ClientCopiedHiddenField",e[e.Cipher_ClientCopiedCardCode=1113]="Cipher_ClientCopiedCardCode",e[e.Cipher_ClientAutofilled=1114]="Cipher_ClientAutofilled",e[e.Cipher_SoftDeleted=1115]="Cipher_SoftDeleted",e[e.Cipher_Restored=1116]="Cipher_Restored",e[e.Cipher_ClientToggledCardNumberVisible=1117]="Cipher_ClientToggledCardNumberVisible",e[e.Collection_Created=1300]="Collection_Created",e[e.Collection_Updated=1301]="Collection_Updated",e[e.Collection_Deleted=1302]="Collection_Deleted",e[e.Group_Created=1400]="Group_Created",e[e.Group_Updated=1401]="Group_Updated",e[e.Group_Deleted=1402]="Group_Deleted",e[e.OrganizationUser_Invited=1500]="OrganizationUser_Invited",e[e.OrganizationUser_Confirmed=1501]="OrganizationUser_Confirmed",e[e.OrganizationUser_Updated=1502]="OrganizationUser_Updated",e[e.OrganizationUser_Removed=1503]="OrganizationUser_Removed",e[e.OrganizationUser_UpdatedGroups=1504]="OrganizationUser_UpdatedGroups",e[e.OrganizationUser_UnlinkedSso=1505]="OrganizationUser_UnlinkedSso",e[e.OrganizationUser_ResetPassword_Enroll=1506]="OrganizationUser_ResetPassword_Enroll",e[e.OrganizationUser_ResetPassword_Withdraw=1507]="OrganizationUser_ResetPassword_Withdraw",e[e.Organization_Updated=1600]="Organization_Updated",e[e.Organization_PurgedVault=1601]="Organization_PurgedVault",e[e.Policy_Updated=1700]="Policy_Updated"}(Aa||(Aa={}));var za=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Ea{constructor(e,t,i,s,r,o,c,a,l,d,u){this.cipherService=e,this.folderService=t,this.i18nService=i,this.platformUtilsService=s,this.auditService=r,this.stateService=o,this.userService=c,this.collectionService=a,this.messagingService=l,this.eventService=d,this.policyService=u,this.cloneMode=!1,this.folderId=null,this.organizationId=null,this.onSavedCipher=new n.t,this.onDeletedCipher=new n.t,this.onRestoredCipher=new n.t,this.onCancelled=new n.t,this.onEditAttachments=new n.t,this.onShareCipher=new n.t,this.onEditCollections=new n.t,this.onGeneratePassword=new n.t,this.editMode=!1,this.collections=[],this.showPassword=!1,this.showCardNumber=!1,this.showCardCode=!1,this.cipherType=B.a,this.fieldType=oe.a,this.addFieldType=oe.a.Text,this.ownershipOptions=[],this.currentDate=new Date,this.allowPersonal=!0,this.reprompt=!1,this.typeOptions=[{name:i.t("typeLogin"),value:B.a.Login},{name:i.t("typeCard"),value:B.a.Card},{name:i.t("typeIdentity"),value:B.a.Identity},{name:i.t("typeSecureNote"),value:B.a.SecureNote}],this.cardBrandOptions=[{name:"-- "+i.t("select")+" --",value:null},{name:"Visa",value:"Visa"},{name:"Mastercard",value:"Mastercard"},{name:"American Express",value:"Amex"},{name:"Discover",value:"Discover"},{name:"Diners Club",value:"Diners Club"},{name:"JCB",value:"JCB"},{name:"Maestro",value:"Maestro"},{name:"UnionPay",value:"UnionPay"},{name:i.t("other"),value:"Other"}],this.cardExpMonthOptions=[{name:"-- "+i.t("select")+" --",value:null},{name:"01 - "+i.t("january"),value:"1"},{name:"02 - "+i.t("february"),value:"2"},{name:"03 - "+i.t("march"),value:"3"},{name:"04 - "+i.t("april"),value:"4"},{name:"05 - "+i.t("may"),value:"5"},{name:"06 - "+i.t("june"),value:"6"},{name:"07 - "+i.t("july"),value:"7"},{name:"08 - "+i.t("august"),value:"8"},{name:"09 - "+i.t("september"),value:"9"},{name:"10 - "+i.t("october"),value:"10"},{name:"11 - "+i.t("november"),value:"11"},{name:"12 - "+i.t("december"),value:"12"}],this.identityTitleOptions=[{name:"-- "+i.t("select")+" --",value:null},{name:i.t("mr"),value:i.t("mr")},{name:i.t("mrs"),value:i.t("mrs")},{name:i.t("ms"),value:i.t("ms")},{name:i.t("dr"),value:i.t("dr")}],this.addFieldTypeOptions=[{name:i.t("cfTypeText"),value:oe.a.Text},{name:i.t("cfTypeHidden"),value:oe.a.Hidden},{name:i.t("cfTypeBoolean"),value:oe.a.Boolean}],this.uriMatchOptions=[{name:i.t("defaultMatchDetection"),value:null},{name:i.t("baseDomain"),value:Ut.a.Domain},{name:i.t("host"),value:Ut.a.Host},{name:i.t("startsWith"),value:Ut.a.StartsWith},{name:i.t("regEx"),value:Ut.a.RegularExpression},{name:i.t("exact"),value:Ut.a.Exact},{name:i.t("never"),value:Ut.a.Never}],this.autofillOnPageLoadOptions=[{name:i.t("autoFillOnPageLoadUseDefault"),value:null},{name:i.t("autoFillOnPageLoadYes"),value:!0},{name:i.t("autoFillOnPageLoadNo"),value:!1}]}ngOnInit(){return za(this,void 0,void 0,(function*(){yield this.init()}))}init(){return za(this,void 0,void 0,(function*(){const e=yield this.policyService.getAll(Oc.PersonalOwnership),t=yield this.userService.getEmail();this.ownershipOptions.push({name:t,value:null});(yield this.userService.getAllOrganizations()).sort(Q.a.getSortFunction(this.i18nService,"name")).forEach(t=>{if(t.enabled&&t.status===wc.Confirmed&&(this.ownershipOptions.push({name:t.name,value:t.id}),null!=e&&t.usePolicies&&!t.canManagePolicies&&this.allowPersonal))for(const i of e)if(i.organizationId===t.id&&i.enabled){this.allowPersonal=!1,this.ownershipOptions.splice(0,1),null==this.organizationId&&(this.organizationId=t.id);break}}),this.writeableCollections=yield this.loadCollections()}))}load(){return za(this,void 0,void 0,(function*(){this.editMode=null!=this.cipherId,this.editMode?(this.editMode=!0,this.cloneMode?(this.cloneMode=!0,this.title=this.i18nService.t("addItem")):this.title=this.i18nService.t("editItem")):this.title=this.i18nService.t("addItem");const e=yield this.stateService.get("addEditCipherInfo");if(null!=e&&(this.cipher=e.cipher,this.collectionIds=e.collectionIds),yield this.stateService.remove("addEditCipherInfo"),null==this.cipher)if(this.editMode){const e=yield this.loadCipher();this.cipher=yield e.decrypt(),this.cloneMode&&(this.cipher.name+=" - "+this.i18nService.t("clone"),null!=this.cipher.organizationId||this.allowPersonal||(this.cipher.organizationId=this.organizationId))}else this.cipher=new J.a,this.cipher.organizationId=null==this.organizationId?null:this.organizationId,this.cipher.folderId=this.folderId,this.cipher.type=null==this.type?B.a.Login:this.type,this.cipher.login=new se.a,this.cipher.login.uris=[new Z.a],this.cipher.card=new be.a,this.cipher.identity=new Pe.a,this.cipher.secureNote=new re.a,this.cipher.secureNote.type=ie.Generic,this.cipher.reprompt=fe.a.None;null==this.cipher||this.editMode&&null==e&&!this.cloneMode||(yield this.organizationChanged(),null!=this.collectionIds&&this.collectionIds.length>0&&this.collections.length>0&&this.collections.forEach(e=>{this.collectionIds.indexOf(e.id)>-1&&(e.checked=!0)})),this.folders=yield this.folderService.getAllDecrypted(),this.editMode&&this.previousCipherId!==this.cipherId&&this.eventService.collect(Aa.Cipher_ClientViewed,this.cipherId),this.previousCipherId=this.cipherId,this.reprompt=this.cipher.reprompt!==fe.a.None}))}submit(){return za(this,void 0,void 0,(function*(){if(this.cipher.isDeleted)return this.restore();if(null==this.cipher.name||""===this.cipher.name)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("nameRequired")),!1;if((!this.editMode||this.cloneMode)&&!this.allowPersonal&&null==this.cipher.organizationId)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("personalOwnershipSubmitError")),!1;this.editMode&&!this.cloneMode||this.cipher.type!==B.a.Login||null==this.cipher.login.uris||1!==this.cipher.login.uris.length||null!=this.cipher.login.uris[0].uri&&""!==this.cipher.login.uris[0].uri||(this.cipher.login.uris=null),this.editMode&&!this.cloneMode||null==this.cipher.organizationId||(this.cipher.collectionIds=null==this.collections?[]:this.collections.filter(e=>e.checked).map(e=>e.id)),this.cloneMode&&(this.cipher.id=null);const e=yield this.encryptCipher();try{return this.formPromise=this.saveCipher(e),yield this.formPromise,this.cipher.id=e.id,this.platformUtilsService.showToast("success",null,this.i18nService.t(this.editMode&&!this.cloneMode?"editedItem":"addedItem")),this.onSavedCipher.emit(this.cipher),this.messagingService.send(this.editMode&&!this.cloneMode?"editedCipher":"addedCipher"),!0}catch(e){}return!1}))}addUri(){this.cipher.type===B.a.Login&&(null==this.cipher.login.uris&&(this.cipher.login.uris=[]),this.cipher.login.uris.push(new Z.a))}removeUri(e){if(this.cipher.type!==B.a.Login||null==this.cipher.login.uris)return;const t=this.cipher.login.uris.indexOf(e);t>-1&&this.cipher.login.uris.splice(t,1)}addField(){null==this.cipher.fields&&(this.cipher.fields=[]);const e=new ee.a;e.type=this.addFieldType,e.newField=!0,this.cipher.fields.push(e)}removeField(e){const t=this.cipher.fields.indexOf(e);t>-1&&this.cipher.fields.splice(t,1)}trackByFunction(e,t){return e}cancel(){this.onCancelled.emit(this.cipher)}attachments(){this.onEditAttachments.emit(this.cipher)}share(){this.onShareCipher.emit(this.cipher)}editCollections(){this.onEditCollections.emit(this.cipher)}delete(){return za(this,void 0,void 0,(function*(){if(!(yield this.platformUtilsService.showDialog(this.i18nService.t(this.cipher.isDeleted?"permanentlyDeleteItemConfirmation":"deleteItemConfirmation"),this.i18nService.t("deleteItem"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{this.deletePromise=this.deleteCipher(),yield this.deletePromise,this.platformUtilsService.showToast("success",null,this.i18nService.t(this.cipher.isDeleted?"permanentlyDeletedItem":"deletedItem")),this.onDeletedCipher.emit(this.cipher),this.messagingService.send(this.cipher.isDeleted?"permanentlyDeletedCipher":"deletedCipher")}catch(e){}return!0}))}restore(){return za(this,void 0,void 0,(function*(){if(!this.cipher.isDeleted)return!1;if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("restoreItemConfirmation"),this.i18nService.t("restoreItem"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{this.restorePromise=this.restoreCipher(),yield this.restorePromise,this.platformUtilsService.showToast("success",null,this.i18nService.t("restoredItem")),this.onRestoredCipher.emit(this.cipher),this.messagingService.send("restoredCipher")}catch(e){}return!0}))}generatePassword(){return za(this,void 0,void 0,(function*(){if(null!=this.cipher.login&&null!=this.cipher.login.password&&this.cipher.login.password.length){if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("overwritePasswordConfirmation"),this.i18nService.t("overwritePassword"),this.i18nService.t("yes"),this.i18nService.t("no"))))return!1}return this.onGeneratePassword.emit(),!0}))}togglePassword(){this.showPassword=!this.showPassword,document.getElementById("loginPassword").focus(),this.editMode&&this.showPassword&&this.eventService.collect(Aa.Cipher_ClientToggledPasswordVisible,this.cipherId)}toggleCardNumber(){return za(this,void 0,void 0,(function*(){this.showCardNumber=!this.showCardNumber,this.showCardNumber&&this.eventService.collect(Aa.Cipher_ClientToggledCardCodeVisible,this.cipherId)}))}toggleCardCode(){this.showCardCode=!this.showCardCode,document.getElementById("cardCode").focus(),this.editMode&&this.showCardCode&&this.eventService.collect(Aa.Cipher_ClientToggledCardCodeVisible,this.cipherId)}toggleFieldValue(e){const t=e;t.showValue=!t.showValue,this.editMode&&t.showValue&&this.eventService.collect(Aa.Cipher_ClientToggledHiddenFieldVisible,this.cipherId)}toggleUriOptions(e){const t=e;t.showOptions=(null!=t.showOptions||null==e.match)&&!t.showOptions}loginUriMatchChanged(e){const t=e;t.showOptions=null==t.showOptions||t.showOptions}drop(e){Object(Ma.e)(this.cipher.fields,e.previousIndex,e.currentIndex)}organizationChanged(){return za(this,void 0,void 0,(function*(){if(null!=this.writeableCollections&&this.writeableCollections.forEach(e=>e.checked=!1),null!=this.cipher.organizationId){this.collections=this.writeableCollections.filter(e=>e.organizationId===this.cipher.organizationId);const e=yield this.userService.getOrganization(this.cipher.organizationId);null!=e&&(this.cipher.organizationUseTotp=e.useTotp)}else this.collections=[]}))}checkPassword(){return za(this,void 0,void 0,(function*(){if(null!=this.checkPasswordPromise)return;if(null==this.cipher.login||null==this.cipher.login.password||""===this.cipher.login.password)return;this.checkPasswordPromise=this.auditService.passwordLeaked(this.cipher.login.password);const e=yield this.checkPasswordPromise;this.checkPasswordPromise=null,e>0?this.platformUtilsService.showToast("warning",null,this.i18nService.t("passwordExposed",e.toString())):this.platformUtilsService.showToast("success",null,this.i18nService.t("passwordSafe"))}))}repromptChanged(){this.reprompt=!this.reprompt,this.reprompt?this.cipher.reprompt=fe.a.Password:this.cipher.reprompt=fe.a.None}loadCollections(){return za(this,void 0,void 0,(function*(){return(yield this.collectionService.getAllDecrypted()).filter(e=>!e.readOnly)}))}loadCipher(){return this.cipherService.get(this.cipherId)}encryptCipher(){return this.cipherService.encrypt(this.cipher)}saveCipher(e){return this.cipherService.saveWithServer(e)}deleteCipher(){return this.cipher.isDeleted?this.cipherService.deleteWithServer(this.cipher.id):this.cipherService.softDeleteWithServer(this.cipher.id)}restoreCipher(){return this.cipherService.restoreWithServer(this.cipher.id)}}Ea.ɵfac=function(e){return new(e||Ea)(n.cc(C),n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(Ia),n.cc(br.a),n.cc(z.a),n.cc(P),n.cc(a.a),n.cc(Da),n.cc(mo))},Ea.ɵdir=n.Xb({type:Ea,inputs:{cloneMode:"cloneMode",folderId:"folderId",cipherId:"cipherId",type:"type",collectionIds:"collectionIds",organizationId:"organizationId"},outputs:{onSavedCipher:"onSavedCipher",onDeletedCipher:"onDeletedCipher",onRestoredCipher:"onRestoredCipher",onCancelled:"onCancelled",onEditAttachments:"onEditAttachments",onShareCipher:"onShareCipher",onEditCollections:"onEditCollections",onGeneratePassword:"onGeneratePassword"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ea,[{type:n.q}],(function(){return[{type:C},{type:T},{type:I.a},{type:A.a},{type:Ia},{type:br.a},{type:z.a},{type:P},{type:a.a},{type:Da},{type:mo}]}),{cloneMode:[{type:n.D}],folderId:[{type:n.D}],cipherId:[{type:n.D}],type:[{type:n.D}],collectionIds:[{type:n.D}],organizationId:[{type:n.D}],onSavedCipher:[{type:n.O}],onDeletedCipher:[{type:n.O}],onRestoredCipher:[{type:n.O}],onCancelled:[{type:n.O}],onEditAttachments:[{type:n.O}],onShareCipher:[{type:n.O}],onEditCollections:[{type:n.O}],onGeneratePassword:[{type:n.O}]});class Ua{constructor(e,t){this.templateRef=e,this.viewContainer=t,this.isFlagEnabled=!1,this.hasView=!1}set ifFlag(e){this.flagName=e,this.flagChanged()}ngOnDestroy(){h.a.store.removeListener("change",this.flagChanged.bind(this))}ngOnInit(){h.a.store.on("change",this.flagChanged.bind(this)),this.flagChanged()}flagChanged(){this.isFlagEnabled=h()(this.flagName),this.isFlagEnabled&&!this.hasView?(this.viewContainer.createEmbeddedView(this.templateRef),this.hasView=!0):!this.isFlagEnabled&&this.hasView&&(this.viewContainer.clear(),this.hasView=!1)}}Ua.ɵfac=function(e){return new(e||Ua)(n.cc(n.ab),n.cc(n.fb))},Ua.ɵdir=n.Xb({type:Ua,selectors:[["","ifFlag",""]],inputs:{ifFlag:"ifFlag"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ua,[{type:n.q,args:[{selector:"[ifFlag]"}]}],(function(){return[{type:n.ab},{type:n.fb}]}),{ifFlag:[{type:n.D}]});class Na{constructor(e,t){this.elementRef=e,this.renderer=t,this.trueValue=!0,this.falseValue=!1,this.propagateChange=e=>{}}onHostChange(e){this.propagateChange(e.target.checked?this.trueValue:this.falseValue)}writeValue(e){e===this.trueValue?this.renderer.setProperty(this.elementRef.nativeElement,"checked",!0):this.renderer.setProperty(this.elementRef.nativeElement,"checked",!1)}registerOnChange(e){this.propagateChange=e}registerOnTouched(e){}setDisabledState(e){}}Na.ɵfac=function(e){return new(e||Na)(n.cc(n.r),n.cc(n.S))},Na.ɵdir=n.Xb({type:Na,selectors:[["input","type","checkbox","appTrueFalseValue",""]],hostBindings:function(e,t){1&e&&n.oc("change",(function(e){return t.onHostChange(e)}))},inputs:{trueValue:"trueValue",falseValue:"falseValue"},features:[n.Pb([{provide:dr.e,useExisting:Object(n.jb)(()=>Na),multi:!0}])]}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Na,[{type:n.q,args:[{selector:"input[type=checkbox][appTrueFalseValue]",providers:[{provide:dr.e,useExisting:Object(n.jb)(()=>Na),multi:!0}]}]}],(function(){return[{type:n.r},{type:n.S}]}),{trueValue:[{type:n.D}],falseValue:[{type:n.D}],onHostChange:[{type:n.w,args:["change",["$event"]]}]});var Ra=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Fa=["form"];function Qa(e,t){1&e&&(n.hc(0,"app-callout",30),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"personalOwnershipPolicyInEffect")," "))}function Va(e,t){if(1&e&&(n.hc(0,"option",33),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function Ba(e,t){if(1&e){const e=n.ic();n.hc(0,"div",10),n.Oc(1," "),n.hc(2,"label",31),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"select",32),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.type=t})),n.Oc(7," "),n.Mc(8,Va,2,2,"option",20),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(3),n.Pc(n.uc(4,3,"type")),n.Qb(3),n.zc("ngModel",e.cipher.type),n.Qb(2),n.zc("ngForOf",e.typeOptions)}}const La=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}};function _a(e,t){if(1&e){const e=n.ic();n.hc(0,"div",41),n.Oc(1," "),n.hc(2,"button",42,43),n.oc("click",(function(){n.Hc(e);return n.sc(3).checkPassword()})),n.tc(4,"i18n"),n.Oc(5," "),n.dc(6,"i",44),n.Oc(7," "),n.dc(8,"i",45),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"a",46),n.oc("click",(function(){n.Hc(e);return n.sc(3).togglePassword()})),n.tc(12,"i18n"),n.Oc(13," "),n.dc(14,"i",47),n.Oc(15," "),n.gc(),n.Oc(16," "),n.hc(17,"a",46),n.oc("click",(function(){n.Hc(e);return n.sc(3).generatePassword()})),n.tc(18,"i18n"),n.Oc(19," "),n.dc(20,"i",48),n.Oc(21," "),n.gc(),n.Oc(22," "),n.gc()}if(2&e){const e=n.Gc(3),t=n.sc(3);n.Qb(2),n.Ac("appA11yTitle",n.uc(4,8,"checkPassword")),n.zc("appApiAction",t.checkPasswordPromise)("disabled",e.loading),n.Qb(4),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading),n.Qb(3),n.Ac("appA11yTitle",n.uc(12,10,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(14,La,!t.showPassword,t.showPassword)),n.Qb(3),n.Ac("appA11yTitle",n.uc(18,12,"generatePassword"))}}function ja(e,t){if(1&e){const e=n.ic();n.hc(0,"div"),n.Oc(1," "),n.hc(2,"div",10),n.Oc(3," "),n.hc(4,"label",34),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"input",35),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.login.username=t})),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"div",36),n.Oc(12," "),n.hc(13,"div",37),n.Oc(14," "),n.hc(15,"label",38),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",39),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.login.password=t})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.Mc(22,_a,23,17,"div",40),n.Oc(23," "),n.gc(),n.Oc(24," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(5),n.Pc(n.uc(6,7,"username")),n.Qb(3),n.zc("ngModel",e.cipher.login.username),n.Qb(8),n.Pc(n.uc(17,9,"password")),n.Qb(3),n.Ac("type",e.showPassword?"text":"password"),n.zc("ngModel",e.cipher.login.password)("disabled",!e.cipher.viewPassword),n.Qb(3),n.zc("ngIf",e.cipher.viewPassword)}}function Ka(e,t){if(1&e&&(n.hc(0,"option",33),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function Ha(e,t){if(1&e&&(n.hc(0,"option",33),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function Wa(e,t){if(1&e){const e=n.ic();n.hc(0,"div"),n.Oc(1," "),n.hc(2,"div",10),n.Oc(3," "),n.hc(4,"label",49),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"input",50),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.card.cardholderName=t})),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"div",36),n.Oc(12," "),n.hc(13,"div",37),n.Oc(14," "),n.hc(15,"label",51),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",52),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.card.number=t})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.hc(22,"div",41),n.Oc(23," "),n.hc(24,"a",46),n.oc("click",(function(){n.Hc(e);return n.sc(2).toggleCardNumber()})),n.tc(25,"i18n"),n.Oc(26," "),n.dc(27,"i",47),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.gc(),n.Oc(31," "),n.hc(32,"div",10),n.Oc(33," "),n.hc(34,"label",53),n.Oc(35),n.tc(36,"i18n"),n.gc(),n.Oc(37," "),n.hc(38,"select",54),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.card.brand=t})),n.Oc(39," "),n.Mc(40,Ka,2,2,"option",20),n.Oc(41," "),n.gc(),n.Oc(42," "),n.gc(),n.Oc(43," "),n.hc(44,"div",10),n.Oc(45," "),n.hc(46,"label",55),n.Oc(47),n.tc(48,"i18n"),n.gc(),n.Oc(49," "),n.hc(50,"select",56),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.card.expMonth=t})),n.Oc(51," "),n.Mc(52,Ha,2,2,"option",20),n.Oc(53," "),n.gc(),n.Oc(54," "),n.gc(),n.Oc(55," "),n.hc(56,"div",10),n.Oc(57," "),n.hc(58,"label",57),n.Oc(59),n.tc(60,"i18n"),n.gc(),n.Oc(61," "),n.hc(62,"input",58),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.card.expYear=t})),n.tc(63,"i18n"),n.tc(64,"date"),n.gc(),n.Oc(65," "),n.gc(),n.Oc(66," "),n.hc(67,"div",36),n.Oc(68," "),n.hc(69,"div",37),n.Oc(70," "),n.hc(71,"label",59),n.Oc(72),n.tc(73,"i18n"),n.gc(),n.Oc(74," "),n.hc(75,"input",60),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.card.code=t})),n.gc(),n.Oc(76," "),n.gc(),n.Oc(77," "),n.hc(78,"div",41),n.Oc(79," "),n.hc(80,"a",46),n.oc("click",(function(){n.Hc(e);return n.sc(2).toggleCardCode()})),n.tc(81,"i18n"),n.Oc(82," "),n.dc(83,"i",47),n.Oc(84," "),n.gc(),n.Oc(85," "),n.gc(),n.Oc(86," "),n.gc(),n.Oc(87," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(5),n.Pc(n.uc(6,22,"cardholderName")),n.Qb(3),n.zc("ngModel",e.cipher.card.cardholderName),n.Qb(8),n.Pc(n.uc(17,24,"number")),n.Qb(3),n.Ac("type",e.showCardNumber?"text":"password"),n.zc("ngModel",e.cipher.card.number),n.Qb(5),n.Ac("appA11yTitle",n.uc(25,26,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(43,La,!e.showCardNumber,e.showCardNumber)),n.Qb(8),n.Pc(n.uc(36,28,"brand")),n.Qb(3),n.zc("ngModel",e.cipher.card.brand),n.Qb(2),n.zc("ngForOf",e.cardBrandOptions),n.Qb(7),n.Pc(n.uc(48,30,"expirationMonth")),n.Qb(3),n.zc("ngModel",e.cipher.card.expMonth),n.Qb(2),n.zc("ngForOf",e.cardExpMonthOptions),n.Qb(7),n.Pc(n.uc(60,32,"expirationYear")),n.Qb(3),n.Cc("placeholder","",n.uc(63,34,"ex")," ",n.vc(64,36,e.currentDate,"yyyy"),""),n.zc("ngModel",e.cipher.card.expYear),n.Qb(10),n.Pc(n.uc(73,39,"securityCode")),n.Qb(3),n.Ac("type",e.showCardCode?"text":"password"),n.zc("ngModel",e.cipher.card.code),n.Qb(5),n.Ac("appA11yTitle",n.uc(81,41,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(46,La,!e.showCardCode,e.showCardCode))}}function qa(e,t){if(1&e&&(n.hc(0,"option",33),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function Ga(e,t){if(1&e){const e=n.ic();n.hc(0,"div"),n.Oc(1," "),n.hc(2,"div",10),n.Oc(3," "),n.hc(4,"label",61),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"select",62),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.title=t})),n.Oc(9," "),n.Mc(10,qa,2,2,"option",20),n.Oc(11," "),n.gc(),n.Oc(12," "),n.gc(),n.Oc(13," "),n.hc(14,"div",10),n.Oc(15," "),n.hc(16,"label",63),n.Oc(17),n.tc(18,"i18n"),n.gc(),n.Oc(19," "),n.hc(20,"input",64),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.firstName=t})),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.hc(23,"div",10),n.Oc(24," "),n.hc(25,"label",65),n.Oc(26),n.tc(27,"i18n"),n.gc(),n.Oc(28," "),n.hc(29,"input",66),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.middleName=t})),n.gc(),n.Oc(30," "),n.gc(),n.Oc(31," "),n.hc(32,"div",10),n.Oc(33," "),n.hc(34,"label",67),n.Oc(35),n.tc(36,"i18n"),n.gc(),n.Oc(37," "),n.hc(38,"input",68),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.lastName=t})),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.hc(41,"div",10),n.Oc(42," "),n.hc(43,"label",69),n.Oc(44),n.tc(45,"i18n"),n.gc(),n.Oc(46," "),n.hc(47,"input",70),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.username=t})),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.hc(50,"div",10),n.Oc(51," "),n.hc(52,"label",71),n.Oc(53),n.tc(54,"i18n"),n.gc(),n.Oc(55," "),n.hc(56,"input",72),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.company=t})),n.gc(),n.Oc(57," "),n.gc(),n.Oc(58," "),n.hc(59,"div",10),n.Oc(60," "),n.hc(61,"label",73),n.Oc(62),n.tc(63,"i18n"),n.gc(),n.Oc(64," "),n.hc(65,"input",74),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.ssn=t})),n.gc(),n.Oc(66," "),n.gc(),n.Oc(67," "),n.hc(68,"div",10),n.Oc(69," "),n.hc(70,"label",75),n.Oc(71),n.tc(72,"i18n"),n.gc(),n.Oc(73," "),n.hc(74,"input",76),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.passportNumber=t})),n.gc(),n.Oc(75," "),n.gc(),n.Oc(76," "),n.hc(77,"div",10),n.Oc(78," "),n.hc(79,"label",77),n.Oc(80),n.tc(81,"i18n"),n.gc(),n.Oc(82," "),n.hc(83,"input",78),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.licenseNumber=t})),n.gc(),n.Oc(84," "),n.gc(),n.Oc(85," "),n.hc(86,"div",10),n.Oc(87," "),n.hc(88,"label",79),n.Oc(89),n.tc(90,"i18n"),n.gc(),n.Oc(91," "),n.hc(92,"input",80),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.email=t})),n.gc(),n.Oc(93," "),n.gc(),n.Oc(94," "),n.hc(95,"div",10),n.Oc(96," "),n.hc(97,"label",81),n.Oc(98),n.tc(99,"i18n"),n.gc(),n.Oc(100," "),n.hc(101,"input",82),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.phone=t})),n.gc(),n.Oc(102," "),n.gc(),n.Oc(103," "),n.hc(104,"div",10),n.Oc(105," "),n.hc(106,"label",83),n.Oc(107),n.tc(108,"i18n"),n.gc(),n.Oc(109," "),n.hc(110,"input",84),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.address1=t})),n.gc(),n.Oc(111," "),n.gc(),n.Oc(112," "),n.hc(113,"div",10),n.Oc(114," "),n.hc(115,"label",85),n.Oc(116),n.tc(117,"i18n"),n.gc(),n.Oc(118," "),n.hc(119,"input",86),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.address2=t})),n.gc(),n.Oc(120," "),n.gc(),n.Oc(121," "),n.hc(122,"div",10),n.Oc(123," "),n.hc(124,"label",87),n.Oc(125),n.tc(126,"i18n"),n.gc(),n.Oc(127," "),n.hc(128,"input",88),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.address3=t})),n.gc(),n.Oc(129," "),n.gc(),n.Oc(130," "),n.hc(131,"div",10),n.Oc(132," "),n.hc(133,"label",89),n.Oc(134),n.tc(135,"i18n"),n.gc(),n.Oc(136," "),n.hc(137,"input",90),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.city=t})),n.gc(),n.Oc(138," "),n.gc(),n.Oc(139," "),n.hc(140,"div",10),n.Oc(141," "),n.hc(142,"label",91),n.Oc(143),n.tc(144,"i18n"),n.gc(),n.Oc(145," "),n.hc(146,"input",92),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.state=t})),n.gc(),n.Oc(147," "),n.gc(),n.Oc(148," "),n.hc(149,"div",10),n.Oc(150," "),n.hc(151,"label",93),n.Oc(152),n.tc(153,"i18n"),n.gc(),n.Oc(154," "),n.hc(155,"input",94),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.postalCode=t})),n.gc(),n.Oc(156," "),n.gc(),n.Oc(157," "),n.hc(158,"div",10),n.Oc(159," "),n.hc(160,"label",95),n.Oc(161),n.tc(162,"i18n"),n.gc(),n.Oc(163," "),n.hc(164,"input",96),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).cipher.identity.country=t})),n.gc(),n.Oc(165," "),n.gc(),n.Oc(166," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(5),n.Pc(n.uc(6,37,"title")),n.Qb(3),n.zc("ngModel",e.cipher.identity.title),n.Qb(2),n.zc("ngForOf",e.identityTitleOptions),n.Qb(7),n.Pc(n.uc(18,39,"firstName")),n.Qb(3),n.zc("ngModel",e.cipher.identity.firstName),n.Qb(6),n.Pc(n.uc(27,41,"middleName")),n.Qb(3),n.zc("ngModel",e.cipher.identity.middleName),n.Qb(6),n.Pc(n.uc(36,43,"lastName")),n.Qb(3),n.zc("ngModel",e.cipher.identity.lastName),n.Qb(6),n.Pc(n.uc(45,45,"username")),n.Qb(3),n.zc("ngModel",e.cipher.identity.username),n.Qb(6),n.Pc(n.uc(54,47,"company")),n.Qb(3),n.zc("ngModel",e.cipher.identity.company),n.Qb(6),n.Pc(n.uc(63,49,"ssn")),n.Qb(3),n.zc("ngModel",e.cipher.identity.ssn),n.Qb(6),n.Pc(n.uc(72,51,"passportNumber")),n.Qb(3),n.zc("ngModel",e.cipher.identity.passportNumber),n.Qb(6),n.Pc(n.uc(81,53,"licenseNumber")),n.Qb(3),n.zc("ngModel",e.cipher.identity.licenseNumber),n.Qb(6),n.Pc(n.uc(90,55,"email")),n.Qb(3),n.zc("ngModel",e.cipher.identity.email),n.Qb(6),n.Pc(n.uc(99,57,"phone")),n.Qb(3),n.zc("ngModel",e.cipher.identity.phone),n.Qb(6),n.Pc(n.uc(108,59,"address1")),n.Qb(3),n.zc("ngModel",e.cipher.identity.address1),n.Qb(6),n.Pc(n.uc(117,61,"address2")),n.Qb(3),n.zc("ngModel",e.cipher.identity.address2),n.Qb(6),n.Pc(n.uc(126,63,"address3")),n.Qb(3),n.zc("ngModel",e.cipher.identity.address3),n.Qb(6),n.Pc(n.uc(135,65,"cityTown")),n.Qb(3),n.zc("ngModel",e.cipher.identity.city),n.Qb(6),n.Pc(n.uc(144,67,"stateProvince")),n.Qb(3),n.zc("ngModel",e.cipher.identity.state),n.Qb(6),n.Pc(n.uc(153,69,"zipPostalCode")),n.Qb(3),n.zc("ngModel",e.cipher.identity.postalCode),n.Qb(6),n.Pc(n.uc(162,71,"country")),n.Qb(3),n.zc("ngModel",e.cipher.identity.country)}}function Ja(e,t){if(1&e&&(n.hc(0,"option",33),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function Ya(e,t){if(1&e){const e=n.ic();n.hc(0,"div",99),n.Oc(1," "),n.hc(2,"a",100),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(4).removeUri(i)})),n.tc(3,"i18n"),n.Oc(4," "),n.dc(5,"i",101),n.Oc(6," "),n.gc(),n.Oc(7," "),n.hc(8,"div",37),n.Oc(9," "),n.hc(10,"label",102),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.hc(14,"input",103),n.oc("ngModelChange",(function(e){return t.$implicit.uri=e})),n.tc(15,"i18n"),n.gc(),n.Oc(16," "),n.hc(17,"label",104),n.Oc(18),n.tc(19,"i18n"),n.gc(),n.Oc(20," "),n.hc(21,"select",105),n.oc("ngModelChange",(function(e){return t.$implicit.match=e}))("change",(function(){n.Hc(e);const i=t.$implicit;return n.sc(4).loginUriMatchChanged(i)})),n.Oc(22," "),n.Mc(23,Ja,2,2,"option",20),n.Oc(24," "),n.gc(),n.Oc(25," "),n.gc(),n.Oc(26," "),n.hc(27,"div",41),n.Oc(28," "),n.hc(29,"a",46),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(4).toggleUriOptions(i)})),n.tc(30,"i18n"),n.Oc(31," "),n.dc(32,"i",106),n.Oc(33," "),n.gc(),n.Oc(34," "),n.gc(),n.Oc(35," "),n.gc()}if(2&e){const e=t.$implicit,i=t.index,s=n.sc(4);n.Qb(2),n.Ac("appA11yTitle",n.uc(3,16,"remove")),n.Qb(8),n.Bc("for","loginUri",i,""),n.Qb(1),n.Pc(n.vc(12,18,"uriPosition",i+1)),n.Qb(3),n.Bc("id","loginUri",i,""),n.Bc("name","Login.Uris[",i,"].Uri"),n.Bc("placeholder","",n.uc(15,21,"ex")," https://google.com"),n.zc("ngModel",e.uri),n.Qb(3),n.Bc("for","loginUriMatch",i,""),n.Qb(1),n.Rc(" ",n.uc(19,23,"matchDetection")," ",i+1," "),n.Qb(3),n.Bc("id","loginUriMatch",i,""),n.Bc("name","Login.Uris[",i,"].Match"),n.zc("ngModel",e.match)("hidden",!1===e.showOptions||null==e.showOptions&&null==e.match),n.Qb(2),n.zc("ngForOf",s.uriMatchOptions),n.Qb(6),n.Ac("appA11yTitle",n.uc(30,25,"toggleOptions"))}}function $a(e,t){if(1&e&&(n.fc(0),n.Oc(1," "),n.Mc(2,Ya,36,27,"div",98),n.Oc(3," "),n.ec()),2&e){const e=n.sc(3);n.Qb(2),n.zc("ngForOf",e.cipher.login.uris)("ngForTrackBy",e.trackByFunction)}}function Xa(e,t){if(1&e){const e=n.ic();n.hc(0,"div",5),n.Oc(1," "),n.hc(2,"div",8),n.Oc(3," "),n.Mc(4,$a,4,2,"ng-container",13),n.Oc(5," "),n.hc(6,"a",97),n.oc("click",(function(){n.Hc(e);return n.sc(2).addUri()})),n.Oc(7," "),n.dc(8,"i",17),n.Oc(9),n.tc(10,"i18n"),n.gc(),n.Oc(11," "),n.gc(),n.Oc(12," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(4),n.zc("ngIf",e.cipher.login.hasUris),n.Qb(5),n.Qc(" ",n.uc(10,2,"newUri")," ")}}function Za(e,t){if(1&e){const e=n.ic();n.hc(0,"input",103),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().$implicit.value=t})),n.tc(1,"i18n"),n.gc()}if(2&e){const e=n.sc(),t=e.index,i=e.$implicit;n.Bc("id","fieldValue",t,""),n.Bc("name","Field.Value",t,""),n.Ac("placeholder",n.uc(1,4,"value")),n.zc("ngModel",i.value)}}function el(e,t){if(1&e){const e=n.ic();n.hc(0,"input",118),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().$implicit.value=t})),n.tc(1,"i18n"),n.gc()}if(2&e){const e=n.sc(),t=e.index,i=e.$implicit,s=n.sc(3);n.Bc("id","fieldValue",t,""),n.Ac("type",i.showValue?"text":"password"),n.Bc("name","Field.Value",t,""),n.Ac("placeholder",n.uc(1,6,"value")),n.zc("ngModel",i.value)("disabled",!s.cipher.viewPassword&&!i.newField)}}function tl(e,t){if(1&e){const e=n.ic();n.hc(0,"input",119),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().$implicit.value=t})),n.gc()}if(2&e){const e=n.sc(),t=e.index,i=e.$implicit;n.Bc("id","fieldValue",t,""),n.Bc("name","Field.Value",t,""),n.zc("ngModel",i.value)}}function il(e,t){if(1&e){const e=n.ic();n.hc(0,"div",41),n.Oc(1," "),n.hc(2,"a",46),n.oc("click",(function(){n.Hc(e);const t=n.sc().$implicit;return n.sc(3).toggleFieldValue(t)})),n.tc(3,"i18n"),n.Oc(4," "),n.dc(5,"i",47),n.Oc(6," "),n.gc(),n.Oc(7," "),n.gc()}if(2&e){const e=n.sc().$implicit;n.Qb(2),n.Ac("appA11yTitle",n.uc(3,2,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(4,La,!e.showValue,e.showValue))}}const nl=function(e){return{"box-content-row-checkbox":e}};function sl(e,t){if(1&e){const e=n.ic();n.hc(0,"div",109),n.Oc(1," "),n.hc(2,"a",110),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).removeField(i)})),n.tc(3,"i18n"),n.Oc(4," "),n.dc(5,"i",111),n.Oc(6," "),n.gc(),n.Oc(7," "),n.hc(8,"label",104),n.Oc(9),n.tc(10,"i18n"),n.gc(),n.Oc(11," "),n.hc(12,"label",104),n.Oc(13),n.tc(14,"i18n"),n.gc(),n.Oc(15," "),n.hc(16,"div",37),n.Oc(17," "),n.hc(18,"input",112),n.oc("ngModelChange",(function(e){return t.$implicit.name=e})),n.tc(19,"i18n"),n.gc(),n.Oc(20," "),n.Mc(21,Za,2,6,"input",113),n.Oc(22," "),n.Mc(23,el,2,8,"input",114),n.Oc(24," "),n.gc(),n.Oc(25," "),n.Mc(26,tl,1,3,"input",115),n.Oc(27," "),n.Mc(28,il,8,7,"div",40),n.Oc(29," "),n.hc(30,"div",116),n.tc(31,"i18n"),n.Oc(32," "),n.dc(33,"i",117),n.Oc(34," "),n.gc(),n.Oc(35," "),n.gc()}if(2&e){const e=t.$implicit,i=t.index,s=n.sc(3);n.zc("ngClass",n.Dc(25,nl,e.type===s.fieldType.Boolean)),n.Qb(2),n.Ac("appA11yTitle",n.uc(3,15,"remove")),n.Qb(6),n.Bc("for","fieldName",i,""),n.Qb(1),n.Pc(n.uc(10,17,"name")),n.Qb(3),n.Bc("for","fieldValue",i,""),n.Qb(1),n.Pc(n.uc(14,19,"value")),n.Qb(5),n.Bc("id","fieldName",i,""),n.Bc("name","Field.Name",i,""),n.Ac("placeholder",n.uc(19,21,"name")),n.zc("ngModel",e.name),n.Qb(3),n.zc("ngIf",e.type===s.fieldType.Text),n.Qb(2),n.zc("ngIf",e.type===s.fieldType.Hidden),n.Qb(3),n.zc("ngIf",e.type===s.fieldType.Boolean),n.Qb(2),n.zc("ngIf",e.type===s.fieldType.Hidden&&(s.cipher.viewPassword||e.newField)),n.Qb(2),n.Ac("appA11yTitle",n.uc(31,23,"dragToSort"))}}function rl(e,t){if(1&e){const e=n.ic();n.hc(0,"div",107),n.oc("cdkDropListDropped",(function(t){n.Hc(e);return n.sc(2).drop(t)})),n.Oc(1," "),n.Mc(2,sl,36,27,"div",108),n.Oc(3," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(2),n.zc("ngForOf",e.cipher.fields)("ngForTrackBy",e.trackByFunction)}}function ol(e,t){if(1&e&&(n.hc(0,"option",33),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function cl(e,t){1&e&&(n.hc(0,"div",8),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"noFolderInList")," "))}function al(e,t){if(1&e&&(n.hc(0,"div",122),n.Oc(1," "),n.hc(2,"label",102),n.Oc(3),n.gc(),n.Oc(4," "),n.hc(5,"input",123),n.oc("ngModelChange",(function(e){return t.$implicit.checked=e})),n.gc(),n.Oc(6," "),n.gc()),2&e){const e=t.$implicit,i=t.index;n.Qb(2),n.Bc("for","collection_",i,""),n.Qb(1),n.Pc(e.name),n.Qb(2),n.Bc("id","collection_",i,""),n.Bc("name","Collection[",i,"].Checked"),n.zc("ngModel",e.checked)}}function ll(e,t){if(1&e&&(n.hc(0,"div",8),n.Oc(1," "),n.Mc(2,al,7,5,"div",121),n.Oc(3," "),n.gc()),2&e){const e=n.sc(3);n.Qb(2),n.zc("ngForOf",e.collections)}}function dl(e,t){if(1&e&&(n.hc(0,"div",5),n.Oc(1," "),n.hc(2,"div",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.Mc(6,cl,3,3,"div",120),n.Oc(7," "),n.Mc(8,ll,4,1,"div",120),n.Oc(9," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Qc(" ",n.uc(4,3,"folder")," "),n.Qb(3),n.zc("ngIf",!e.collections||!e.collections.length),n.Qb(2),n.zc("ngIf",e.collections&&e.collections.length)}}function ul(e,t){if(1&e){const e=n.ic();n.hc(0,"button",125),n.oc("click",(function(){n.Hc(e);return n.sc(3).share()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",126),n.Oc(4," "),n.gc()}2&e&&n.Ac("appA11yTitle",n.uc(1,1,"shareItem"))}function hl(e,t){if(1&e&&(n.fc(0),n.Oc(1," "),n.Mc(2,ul,5,3,"button",124),n.Oc(3," "),n.ec()),2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",e.editMode&&e.cipher&&!e.cloneMode)}}function pl(e,t){if(1&e){const e=n.ic();n.hc(0,"button",127,128),n.oc("click",(function(){n.Hc(e);return n.sc(2).delete()})),n.tc(2,"i18n"),n.Oc(3," "),n.dc(4,"i",129),n.Oc(5," "),n.dc(6,"i",25),n.Oc(7," "),n.gc()}if(2&e){const e=n.Gc(1),t=n.sc(2);n.Ac("appA11yTitle",n.uc(2,5,"delete")),n.zc("disabled",e.loading)("appApiAction",t.deletePromise),n.Qb(4),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading)}}function gl(e,t){if(1&e){const e=n.ic();n.hc(0,"div",4),n.Oc(1," "),n.hc(2,"div",5),n.Oc(3," "),n.Mc(4,Qa,3,3,"app-callout",6),n.Oc(5," "),n.hc(6,"div",7),n.Oc(7),n.gc(),n.Oc(8," "),n.hc(9,"div",8),n.Oc(10," "),n.Mc(11,Ba,11,5,"div",9),n.Oc(12," "),n.hc(13,"div",10),n.Oc(14," "),n.hc(15,"label",11),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",12),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().cipher.name=t})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.Mc(22,ja,25,11,"div",13),n.Oc(23," "),n.Mc(24,Wa,88,49,"div",13),n.Oc(25," "),n.Mc(26,Ga,167,73,"div",13),n.Oc(27," "),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.Mc(30,Xa,13,4,"div",14),n.Oc(31," "),n.hc(32,"div",5),n.Oc(33," "),n.hc(34,"div",8),n.Oc(35," "),n.gc(),n.Oc(36," "),n.gc(),n.Oc(37," "),n.hc(38,"div",5),n.Oc(39," "),n.hc(40,"div",7),n.Oc(41),n.tc(42,"i18n"),n.gc(),n.Oc(43," "),n.hc(44,"div",8),n.Oc(45," "),n.Mc(46,rl,4,2,"div",15),n.Oc(47," "),n.hc(48,"div",10),n.Oc(49," "),n.hc(50,"a",16),n.oc("click",(function(){n.Hc(e);return n.sc().addField()})),n.Oc(51," "),n.dc(52,"i",17),n.Oc(53),n.tc(54,"i18n"),n.gc(),n.Oc(55," "),n.hc(56,"label",18),n.Oc(57),n.tc(58,"i18n"),n.gc(),n.Oc(59," "),n.hc(60,"select",19),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().addFieldType=t})),n.Oc(61," "),n.Mc(62,ol,2,2,"option",20),n.Oc(63," "),n.gc(),n.Oc(64," "),n.gc(),n.Oc(65," "),n.gc(),n.Oc(66," "),n.gc(),n.Oc(67," "),n.Mc(68,dl,10,5,"div",14),n.Oc(69," "),n.hc(70,"div",21),n.Oc(71," "),n.hc(72,"div",22),n.Oc(73," "),n.hc(74,"button",23),n.tc(75,"i18n"),n.Oc(76," "),n.dc(77,"i",24),n.Oc(78," "),n.dc(79,"i",25),n.Oc(80," "),n.gc(),n.Oc(81," "),n.hc(82,"button",26),n.oc("click",(function(){n.Hc(e);return n.sc().cancel()})),n.Oc(83),n.tc(84,"i18n"),n.gc(),n.Oc(85," "),n.hc(86,"div",27),n.Oc(87," "),n.Mc(88,hl,4,1,"ng-container",28),n.Oc(89," "),n.Mc(90,pl,8,7,"button",29),n.Oc(91," "),n.gc(),n.Oc(92," "),n.gc(),n.Oc(93," "),n.gc(),n.Oc(94," "),n.gc()}if(2&e){const e=n.sc(),t=n.Gc(1);n.Qb(4),n.zc("ngIf",e.allowOwnershipOptions()&&!e.allowPersonal),n.Qb(3),n.Qc(" ",e.title," "),n.Qb(4),n.zc("ngIf",!e.editMode),n.Qb(5),n.Pc(n.uc(17,24,"name")),n.Qb(3),n.zc("ngModel",e.cipher.name)("appAutofocus",!e.editMode),n.Qb(3),n.zc("ngIf",e.cipher.type===e.cipherType.Login),n.Qb(2),n.zc("ngIf",e.cipher.type===e.cipherType.Card),n.Qb(2),n.zc("ngIf",e.cipher.type===e.cipherType.Identity),n.Qb(4),n.zc("ngIf",e.cipher.type===e.cipherType.Login),n.Qb(11),n.Qc(" ",n.uc(42,26,"customFields")," "),n.Qb(5),n.zc("ngIf",e.cipher.hasFields),n.Qb(7),n.Qc(" ",n.uc(54,28,"newCustomField")," "),n.Qb(4),n.Pc(n.uc(58,30,"type")),n.Qb(3),n.zc("ngModel",e.addFieldType),n.Qb(2),n.zc("ngForOf",e.addFieldTypeOptions),n.Qb(6),n.zc("ngIf",(!e.editMode||e.cloneMode)&&e.cipher.organizationId),n.Qb(6),n.Ac("appA11yTitle",n.uc(75,32,"save")),n.zc("disabled",t.loading),n.Qb(3),n.zc("hidden",t.loading),n.Qb(2),n.zc("hidden",!t.loading),n.Qb(4),n.Qc(" ",n.uc(84,34,"cancel")," "),n.Qb(5),n.zc("ifFlag",e.CAN_SHARE_ORGANIZATION),n.Qb(2),n.zc("ngIf",e.editMode&&!e.cloneMode)}}class fl extends Ea{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h){super(e,t,i,n,s,r,o,c,a,l,d),this.broadcasterService=u,this.ngZone=h,this.CAN_SHARE_ORGANIZATION="passwords.can-share-organizations"}ngOnInit(){return Ra(this,void 0,void 0,(function*(){this.typeOptions.pop(),this.broadcasterService.subscribe("AddEditComponent",e=>Ra(this,void 0,void 0,(function*(){this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})})))}))}ngOnChanges(){const e=Object.create(null,{init:{get:()=>super.init}});return Ra(this,void 0,void 0,(function*(){yield e.init.call(this),yield this.load()}))}ngOnDestroy(){this.broadcasterService.unsubscribe("AddEditComponent")}load(){const e=Object.create(null,{load:{get:()=>super.load}});return Ra(this,void 0,void 0,(function*(){(0===document.querySelectorAll("app-vault-add-edit .ng-dirty").length||null!=this.cipher&&this.cipherId!==this.cipher.id)&&(this.cipher=null),e.load.call(this)}))}onWindowHidden(){this.showPassword=!1,this.showCardCode=!1,null!==this.cipher&&this.cipher.hasFields&&this.cipher.fields.forEach(e=>{e.showValue=!1})}allowOwnershipOptions(){return(!this.editMode||this.cloneMode)&&this.ownershipOptions&&(this.ownershipOptions.length>1||!this.allowPersonal)}markPasswordAsDirty(){this.form.controls["Login.Password"].markAsDirty()}}fl.ɵfac=function(e){return new(e||fl)(n.cc(C),n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(Ia),n.cc(br.a),n.cc(z.a),n.cc(P),n.cc(a.a),n.cc(Da),n.cc(mo),n.cc(Sr),n.cc(n.M))},fl.ɵcmp=n.Wb({type:fl,selectors:[["app-vault-add-edit"]],viewQuery:function(e,t){if(1&e&&n.Sc(Fa,1),2&e){let e;n.Fc(e=n.pc())&&(t.form=e.first)}},features:[n.Nb,n.Ob],decls:9,vars:2,consts:[[3,"appApiAction","ngSubmit"],["form","ngForm"],[1,"content"],["class","inner-content",4,"ngIf"],[1,"inner-content"],[1,"box"],["type","info",4,"ngIf"],[1,"box-header"],[1,"box-content"],["class","box-content-row","appBoxRow","",4,"ngIf"],["appBoxRow","",1,"box-content-row"],["for","name"],["id","name","type","text","name","Name",3,"ngModel","appAutofocus","ngModelChange"],[4,"ngIf"],["class","box",4,"ngIf"],["cdkDropList","",3,"cdkDropListDropped",4,"ngIf"],["href","#","appStopClick","","role","button",3,"click"],["aria-hidden","true",1,"fa","fa-plus-circle","fa-fw","fa-lg"],["for","addFieldType",1,"sr-only"],["id","addFieldType","name","AddFieldType",1,"field-type",3,"ngModel","ngModelChange"],[3,"ngValue",4,"ngFor","ngForOf"],[1,""],[1,"footer"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"],["appBlurClick","","type","button",3,"click"],[1,"right"],[4,"ifFlag"],["appBlurClick","","type","button","class","danger",3,"appA11yTitle","disabled","appApiAction","click",4,"ngIf"],["type","info"],["for","type"],["id","type","name","Type",3,"ngModel","ngModelChange"],[3,"ngValue"],["for","loginUsername"],["id","loginUsername","type","text","name","Login.Username",3,"ngModel","ngModelChange"],["appBoxRow","",1,"box-content-row","box-content-row-flex"],[1,"row-main"],["for","loginPassword"],["id","loginPassword","name","Login.Password",1,"monospaced",3,"type","ngModel","disabled","ngModelChange"],["class","action-buttons",4,"ngIf"],[1,"action-buttons"],["type","button","appBlurClick","",1,"row-btn","btn",3,"appA11yTitle","appApiAction","disabled","click"],["checkPasswordBtn",""],["aria-hidden","true",1,"fa","fa-lg","fa-check-circle",3,"hidden"],["aria-hidden","true",1,"fa","fa-lg","fa-spinner","fa-spin",3,"hidden"],["href","#","appStopClick","","appBlurClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],["aria-hidden","true",1,"fa","fa-lg","fa-refresh"],["for","cardCardholderName"],["id","cardCardholderName","type","text","name","Card.CardCardholderName",3,"ngModel","ngModelChange"],["for","cardNumber"],["id","cardNumber","name","Card.Number",1,"monospaced",3,"type","ngModel","ngModelChange"],["for","cardBrand"],["id","cardBrand","name","Card.Brand",3,"ngModel","ngModelChange"],["for","cardExpMonth"],["id","cardExpMonth","name","Card.ExpMonth",3,"ngModel","ngModelChange"],["for","cardExpYear"],["id","cardExpYear","type","text","name","Card.ExpYear",3,"ngModel","placeholder","ngModelChange"],["for","cardCode"],["id","cardCode","name","Card.Code",1,"monospaced",3,"type","ngModel","ngModelChange"],["for","idTitle"],["id","idTitle","name","Identity.Title",3,"ngModel","ngModelChange"],["for","idFirstName"],["id","idFirstName","type","text","name","Identity.FirstName",3,"ngModel","ngModelChange"],["for","idMiddleName"],["id","idMiddleName","type","text","name","Identity.MiddleName",3,"ngModel","ngModelChange"],["for","idLastName"],["id","idLastName","type","text","name","Identity.LastName",3,"ngModel","ngModelChange"],["for","idUsername"],["id","idUsername","type","text","name","Identity.Username",3,"ngModel","ngModelChange"],["for","idCompany"],["id","idCompany","type","text","name","Identity.Company",3,"ngModel","ngModelChange"],["for","idSsn"],["id","idSsn","type","text","name","Identity.SSN",3,"ngModel","ngModelChange"],["for","idPassportNumber"],["id","idPassportNumber","type","text","name","Identity.PassportNumber",3,"ngModel","ngModelChange"],["for","idLicenseNumber"],["id","idLicenseNumber","type","text","name","Identity.LicenseNumber",3,"ngModel","ngModelChange"],["for","idEmail"],["id","idEmail","type","text","name","Identity.Email",3,"ngModel","ngModelChange"],["for","idPhone"],["id","idPhone","type","text","name","Identity.Phone",3,"ngModel","ngModelChange"],["for","idAddress1"],["id","idAddress1","type","text","name","Identity.Address1",3,"ngModel","ngModelChange"],["for","idAddress2"],["id","idAddress2","type","text","name","Identity.Address2",3,"ngModel","ngModelChange"],["for","idAddress3"],["id","idAddress3","type","text","name","Identity.Address3",3,"ngModel","ngModelChange"],["for","idCity"],["id","idCity","type","text","name","Identity.City",3,"ngModel","ngModelChange"],["for","idState"],["id","idState","type","text","name","Identity.State",3,"ngModel","ngModelChange"],["for","idPostalCode"],["id","idPostalCode","type","text","name","Identity.PostalCode",3,"ngModel","ngModelChange"],["for","idCountry"],["id","idCountry","type","text","name","Identity.Country",3,"ngModel","ngModelChange"],["href","#","appStopClick","","appBlurClick","","role","button",1,"box-content-row",3,"click"],["class","box-content-row box-content-row-multi","appBoxRow","",4,"ngFor","ngForOf","ngForTrackBy"],["appBoxRow","",1,"box-content-row","box-content-row-multi"],["href","#","appStopClick","",3,"appA11yTitle","click"],["aria-hidden","true","role","button",1,"fa","fa-minus-circle","fa-lg"],[3,"for"],["type","text",3,"id","name","ngModel","placeholder","ngModelChange"],[1,"sr-only",3,"for"],[3,"id","name","ngModel","hidden","ngModelChange","change"],["aria-hidden","true",1,"fa","fa-lg","fa-cog"],["cdkDropList","",3,"cdkDropListDropped"],["class","box-content-row box-content-row-multi box-draggable-row","cdkDrag","",3,"ngClass",4,"ngFor","ngForOf","ngForTrackBy"],["cdkDrag","",1,"box-content-row","box-content-row-multi","box-draggable-row",3,"ngClass"],["href","#","appStopClick","","role","button",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-minus-circle","fa-lg"],["type","text",1,"row-label",3,"id","name","ngModel","placeholder","ngModelChange"],["type","text",3,"id","name","ngModel","placeholder","ngModelChange",4,"ngIf"],["class","monospaced",3,"id","type","name","ngModel","placeholder","disabled","ngModelChange",4,"ngIf"],["type","checkbox","appTrueFalseValue","","trueValue","true","falseValue","false",3,"id","name","ngModel","ngModelChange",4,"ngIf"],["cdkDragHandle","",1,"drag-handle",3,"appA11yTitle"],["aria-hidden","true",1,"fa","fa-bars"],[1,"monospaced",3,"id","type","name","ngModel","placeholder","disabled","ngModelChange"],["type","checkbox","appTrueFalseValue","","trueValue","true","falseValue","false",3,"id","name","ngModel","ngModelChange"],["class","box-content",4,"ngIf"],["class","box-content-row box-content-row-checkbox","appBoxRow","",4,"ngFor","ngForOf"],["appBoxRow","",1,"box-content-row","box-content-row-checkbox"],["type","checkbox","disabled","disabled",3,"id","ngModel","name","ngModelChange"],["appBlurClick","","type","button",3,"appA11yTitle","click",4,"ngIf"],["appBlurClick","","type","button",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-share-alt","fa-lg","fa-fw"],["appBlurClick","","type","button",1,"danger",3,"appA11yTitle","disabled","appApiAction","click"],["deleteBtn",""],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw",3,"hidden"]],template:function(e,t){1&e&&(n.hc(0,"form",0,1),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(2," "),n.hc(3,"div",2),n.Oc(4," "),n.Mc(5,gl,95,36,"div",3),n.Oc(6," "),n.gc(),n.Oc(7," "),n.gc(),n.Oc(8," ")),2&e&&(n.zc("appApiAction",t.formPromise),n.Qb(5),n.zc("ngIf",t.cipher))},directives:[dr.p,dr.g,dr.h,hr,Dr.k,pr,dr.b,dr.f,dr.i,gr,Ar,dr.o,Dr.j,fr,Mr,Ua,ko,dr.j,dr.q,Dr.i,Ma.c,Ma.a,Ma.b,Na,dr.a],pipes:[yr.a,Dr.d],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(fl,[{type:n.l,args:[{selector:"app-vault-add-edit",templateUrl:"add-edit.component.html"}]}],(function(){return[{type:C},{type:T},{type:I.a},{type:A.a},{type:Ia},{type:br.a},{type:z.a},{type:P},{type:a.a},{type:Da},{type:mo},{type:Sr},{type:n.M}]}),{form:[{type:n.eb,args:["form"]}]});var yl=i(23);class ml extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.url=this.getResponseProperty("Url"),this.fileName=this.getResponseProperty("FileName"),this.key=this.getResponseProperty("Key"),this.size=this.getResponseProperty("Size"),this.sizeName=this.getResponseProperty("SizeName")}}class vl extends yl.a{constructor(e){super(e),this.password=this.getResponseProperty("Password"),this.lastUsedDate=this.getResponseProperty("LastUsedDate")}}var bl=i(377),wl=i(378),Ol=i(379),Sl=i(380),Cl=i(382);class Pl extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.organizationId=this.getResponseProperty("OrganizationId"),this.folderId=this.getResponseProperty("FolderId")||null,this.type=this.getResponseProperty("Type"),this.name=this.getResponseProperty("Name"),this.notes=this.getResponseProperty("Notes"),this.favorite=this.getResponseProperty("Favorite")||!1,this.edit=!!this.getResponseProperty("Edit"),null==this.getResponseProperty("ViewPassword")?this.viewPassword=!0:this.viewPassword=this.getResponseProperty("ViewPassword"),this.organizationUseTotp=this.getResponseProperty("OrganizationUseTotp"),this.revisionDate=this.getResponseProperty("RevisionDate"),this.collectionIds=this.getResponseProperty("CollectionIds"),this.deletedDate=this.getResponseProperty("DeletedDate");const t=this.getResponseProperty("Login");null!=t&&(this.login=new Sl.a(t));const i=this.getResponseProperty("Card");null!=i&&(this.card=new bl.a(i));const n=this.getResponseProperty("Identity");null!=n&&(this.identity=new Ol.a(n));const s=this.getResponseProperty("SecureNote");null!=s&&(this.secureNote=new Cl.a(s));const r=this.getResponseProperty("Fields");null!=r&&(this.fields=r.map(e=>new wl.a(e)));const o=this.getResponseProperty("Attachments");null!=o&&(this.attachments=o.map(e=>new ml(e)));const c=this.getResponseProperty("PasswordHistory");null!=c&&(this.passwordHistory=c.map(e=>new vl(e))),this.reprompt=this.getResponseProperty("Reprompt")||fe.a.None}}class xl extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.readOnly=this.getResponseProperty("ReadOnly"),this.hidePasswords=this.getResponseProperty("HidePasswords")}}class kl extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.organizationId=this.getResponseProperty("OrganizationId"),this.name=this.getResponseProperty("Name"),this.externalId=this.getResponseProperty("ExternalId")}}class Tl extends kl{constructor(e){super(e),this.readOnly=this.getResponseProperty("ReadOnly")||!1}}class Il extends kl{constructor(e){super(e),this.groups=[];const t=this.getResponseProperty("Groups");null!=t&&(this.groups=t.map(e=>new xl(e)))}}yl.a;class Dl extends yl.a{constructor(e){super(e),this.type=this.getResponseProperty("Type"),this.domains=this.getResponseProperty("Domains"),this.excluded=this.getResponseProperty("Excluded")}}class Al extends yl.a{constructor(e){super(e),this.globalEquivalentDomains=[],this.equivalentDomains=this.getResponseProperty("EquivalentDomains");const t=this.getResponseProperty("GlobalEquivalentDomains");this.globalEquivalentDomains=null!=t?t.map(e=>new Dl(e)):[]}}class Ml extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.name=this.getResponseProperty("Name"),this.revisionDate=this.getResponseProperty("RevisionDate")}}class zl extends yl.a{constructor(e){super(e),this.accessToken=e.access_token,this.expiresIn=e.expires_in,this.refreshToken=e.refresh_token,this.tokenType=e.token_type,this.resetMasterPassword=this.getResponseProperty("ResetMasterPassword"),this.privateKey=this.getResponseProperty("PrivateKey"),this.key=this.getResponseProperty("Key"),this.twoFactorToken=this.getResponseProperty("TwoFactorToken"),this.kdf=this.getResponseProperty("Kdf"),this.kdfIterations=this.getResponseProperty("KdfIterations")}}class El extends yl.a{constructor(e){super(e),this.twoFactorProviders2=new Map,this.twoFactorProviders=this.getResponseProperty("TwoFactorProviders");const t=this.getResponseProperty("TwoFactorProviders2");if(null!=t)for(const e in t)t.hasOwnProperty(e)&&this.twoFactorProviders2.set(parseInt(e,null),t[e])}}yl.a;class Ul extends yl.a{constructor(e,t){super(e);const i=this.getResponseProperty("Data");this.data=null==i?[]:i.map(e=>new t(e)),this.continuationToken=this.getResponseProperty("ContinuationToken")}}class Nl extends yl.a{constructor(e=null){if(super(e),null==e)return this;this.accessBusinessPortal=this.getResponseProperty("AccessBusinessPortal"),this.accessEventLogs=this.getResponseProperty("AccessEventLogs"),this.accessImportExport=this.getResponseProperty("AccessImportExport"),this.accessReports=this.getResponseProperty("AccessReports"),this.manageAllCollections=this.getResponseProperty("ManageAllCollections"),this.manageAssignedCollections=this.getResponseProperty("ManageAssignedCollections"),this.manageCiphers=this.getResponseProperty("ManageCiphers"),this.manageGroups=this.getResponseProperty("ManageGroups"),this.manageSso=this.getResponseProperty("ManageSso"),this.managePolicies=this.getResponseProperty("ManagePolicies"),this.manageUsers=this.getResponseProperty("ManageUsers"),this.manageResetPassword=this.getResponseProperty("ManageResetPassword")}}class Rl extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.name=this.getResponseProperty("Name"),this.usePolicies=this.getResponseProperty("UsePolicies"),this.useGroups=this.getResponseProperty("UseGroups"),this.useDirectory=this.getResponseProperty("UseDirectory"),this.useEvents=this.getResponseProperty("UseEvents"),this.useTotp=this.getResponseProperty("UseTotp"),this.use2fa=this.getResponseProperty("Use2fa"),this.useApi=this.getResponseProperty("UseApi"),this.useBusinessPortal=this.getResponseProperty("UseBusinessPortal"),this.useSso=this.getResponseProperty("UseSso"),this.selfHost=this.getResponseProperty("SelfHost"),this.usersGetPremium=this.getResponseProperty("UsersGetPremium"),this.seats=this.getResponseProperty("Seats"),this.maxCollections=this.getResponseProperty("MaxCollections"),this.maxStorageGb=this.getResponseProperty("MaxStorageGb"),this.key=this.getResponseProperty("Key"),this.status=this.getResponseProperty("Status"),this.type=this.getResponseProperty("Type"),this.enabled=this.getResponseProperty("Enabled"),this.ssoBound=this.getResponseProperty("SsoBound"),this.identifier=this.getResponseProperty("Identifier"),this.permissions=new Nl(this.getResponseProperty("permissions")),this.resetPasswordKey=this.getResponseProperty("ResetPasswordKey"),this.userId=this.getResponseProperty("UserId")}}class Fl extends yl.a{constructor(e){super(e),this.organizations=[],this.id=this.getResponseProperty("Id"),this.name=this.getResponseProperty("Name"),this.email=this.getResponseProperty("Email"),this.emailVerified=this.getResponseProperty("EmailVerified"),this.masterPasswordHint=this.getResponseProperty("MasterPasswordHint"),this.premium=this.getResponseProperty("Premium"),this.culture=this.getResponseProperty("Culture"),this.twoFactorEnabled=this.getResponseProperty("TwoFactorEnabled"),this.key=this.getResponseProperty("Key"),this.privateKey=this.getResponseProperty("PrivateKey"),this.securityStamp=this.getResponseProperty("SecurityStamp");const t=this.getResponseProperty("Organizations");null!=t&&(this.organizations=t.map(e=>new Rl(e)))}}class Ql extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.organizationId=this.getResponseProperty("OrganizationId"),this.type=this.getResponseProperty("Type"),this.data=this.getResponseProperty("Data"),this.enabled=this.getResponseProperty("Enabled")}}var Vl=i(290),Bl=i(291);class Ll extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.accessId=this.getResponseProperty("AccessId"),this.type=this.getResponseProperty("Type"),this.name=this.getResponseProperty("Name"),this.notes=this.getResponseProperty("Notes"),this.key=this.getResponseProperty("Key"),this.maxAccessCount=this.getResponseProperty("MaxAccessCount"),this.accessCount=this.getResponseProperty("AccessCount"),this.revisionDate=this.getResponseProperty("RevisionDate"),this.expirationDate=this.getResponseProperty("ExpirationDate"),this.deletionDate=this.getResponseProperty("DeletionDate"),this.password=this.getResponseProperty("Password"),this.disable=this.getResponseProperty("Disabled")||!1,this.hideEmail=this.getResponseProperty("HideEmail")||!1;const t=this.getResponseProperty("Text");null!=t&&(this.text=new Bl.a(t));const i=this.getResponseProperty("File");null!=i&&(this.file=new Vl.a(i))}}class _l extends yl.a{constructor(e){super(e),this.folders=[],this.collections=[],this.ciphers=[],this.policies=[],this.sends=[];const t=this.getResponseProperty("Profile");null!=t&&(this.profile=new Fl(t));const i=this.getResponseProperty("Folders");null!=i&&(this.folders=i.map(e=>new Ml(e)));const n=this.getResponseProperty("Collections");null!=n&&(this.collections=n.map(e=>new Tl(e)));const s=this.getResponseProperty("Ciphers");null!=s&&(this.ciphers=s.map(e=>new Pl(e)));const r=this.getResponseProperty("Domains");null!=r&&(this.domains=new Al(r));const o=this.getResponseProperty("Policies");null!=o&&(this.policies=o.map(e=>new Ql(e)));const c=this.getResponseProperty("Sends");null!=c&&(this.sends=c.map(e=>new Ll(e)))}}var jl=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Kl{constructor(e,t,i,s,r,o,c){this.cipherService=e,this.i18nService=t,this.cryptoService=i,this.userService=s,this.platformUtilsService=r,this.apiService=o,this.win=c,this.onUploadedAttachment=new n.t,this.onDeletedAttachment=new n.t,this.onReuploadedAttachment=new n.t,this.deletePromises={},this.reuploadPromises={},this.emergencyAccessId=null}ngOnInit(){return jl(this,void 0,void 0,(function*(){yield this.init()}))}submit(){return jl(this,void 0,void 0,(function*(){if(!this.hasUpdatedKey)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("updateKey"));const e=document.getElementById("file"),t=e.files;if(null!=t&&0!==t.length)if(t[0].size>524288e3)this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("maxFileSize"));else{try{this.formPromise=this.saveCipherAttachment(t[0]),this.cipherDomain=yield this.formPromise,this.cipher=yield this.cipherDomain.decrypt(),this.platformUtilsService.showToast("success",null,this.i18nService.t("attachmentSaved")),this.onUploadedAttachment.emit()}catch(e){}e.type="",e.type="file",e.value=""}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("selectFile"))}))}delete(e){return jl(this,void 0,void 0,(function*(){if(null!=this.deletePromises[e.id])return;if(yield this.platformUtilsService.showDialog(this.i18nService.t("deleteAttachmentConfirmation"),this.i18nService.t("deleteAttachment"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")){try{this.deletePromises[e.id]=this.deleteCipherAttachment(e.id),yield this.deletePromises[e.id],this.platformUtilsService.showToast("success",null,this.i18nService.t("deletedAttachment"));const t=this.cipher.attachments.indexOf(e);t>-1&&this.cipher.attachments.splice(t,1)}catch(e){}this.deletePromises[e.id]=null,this.onDeletedAttachment.emit()}}))}download(e){return jl(this,void 0,void 0,(function*(){const t=e;if(t.downloading)return;if(!this.canAccessAttachments)return void this.platformUtilsService.showToast("error",this.i18nService.t("premiumRequired"),this.i18nService.t("premiumRequiredDesc"));let i;try{i=(yield this.apiService.getAttachmentData(this.cipher.id,e.id,this.emergencyAccessId)).url}catch(t){if(!(t instanceof q.a&&404===t.statusCode))throw t instanceof q.a?new Error(t.getSingleMessage()):t;i=e.url}t.downloading=!0;const n=yield fetch(new Request(i,{cache:"no-store"}));if(200!==n.status)return this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred")),void(t.downloading=!1);try{const t=yield n.arrayBuffer(),i=null!=e.key?e.key:yield this.cryptoService.getOrgKey(this.cipher.organizationId),s=yield this.cryptoService.decryptFromBytes(t,i);this.platformUtilsService.saveFile(this.win,s,null,e.fileName)}catch(e){this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred"))}t.downloading=!1}))}init(){return jl(this,void 0,void 0,(function*(){this.cipherDomain=yield this.loadCipher(),this.cipher=yield this.cipherDomain.decrypt(),this.hasUpdatedKey=yield this.cryptoService.hasEncKey();const e=yield this.userService.canAccessPremium();if(this.canAccessAttachments=e||null!=this.cipher.organizationId,this.canAccessAttachments){if(!this.hasUpdatedKey){(yield this.platformUtilsService.showDialog(this.i18nService.t("updateKey"),this.i18nService.t("featureUnavailable"),this.i18nService.t("learnMore"),this.i18nService.t("cancel"),"warning"))&&this.platformUtilsService.launchUri("https://help.bitwarden.com/article/update-encryption-key/")}}else{(yield this.platformUtilsService.showDialog(this.i18nService.t("premiumRequiredDesc"),this.i18nService.t("premiumRequired"),this.i18nService.t("learnMore"),this.i18nService.t("cancel")))&&this.platformUtilsService.launchUri("https://vault.bitwarden.com/#/?premium=purchase")}}))}reuploadCipherAttachment(e,t){return jl(this,void 0,void 0,(function*(){const i=e;if(null==e.key&&!i.downloading&&null==this.reuploadPromises[e.id])try{this.reuploadPromises[e.id]=Promise.resolve().then(()=>jl(this,void 0,void 0,(function*(){i.downloading=!0;const n=yield fetch(new Request(e.url,{cache:"no-store"}));if(200!==n.status)return this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred")),void(i.downloading=!1);try{const i=yield n.arrayBuffer(),s=null!=e.key?e.key:yield this.cryptoService.getOrgKey(this.cipher.organizationId),r=yield this.cryptoService.decryptFromBytes(i,s);this.cipherDomain=yield this.cipherService.saveAttachmentRawWithServer(this.cipherDomain,e.fileName,r,t),this.cipher=yield this.cipherDomain.decrypt(),this.deletePromises[e.id]=this.deleteCipherAttachment(e.id),yield this.deletePromises[e.id];const o=this.cipher.attachments.filter(t=>t.id===e.id);if(o.length>0){const e=this.cipher.attachments.indexOf(o[0]);e>-1&&this.cipher.attachments.splice(e,1)}this.platformUtilsService.showToast("success",null,this.i18nService.t("attachmentSaved")),this.onReuploadedAttachment.emit()}catch(e){this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred"))}i.downloading=!1}))),yield this.reuploadPromises[e.id]}catch(e){}}))}loadCipher(){return this.cipherService.get(this.cipherId)}saveCipherAttachment(e){return this.cipherService.saveAttachmentWithServer(this.cipherDomain,e)}deleteCipherAttachment(e){return this.cipherService.deleteAttachmentWithServer(this.cipher.id,e)}}function Hl(e,t){if(1&e){const e=n.ic();n.hc(0,"div",20),n.Oc(1," "),n.hc(2,"div",21),n.Oc(3),n.gc(),n.Oc(4," "),n.hc(5,"small",22),n.Oc(6),n.gc(),n.Oc(7," "),n.hc(8,"div",23),n.Oc(9," "),n.hc(10,"button",24,25),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(2).delete(i)})),n.tc(12,"i18n"),n.Oc(13," "),n.dc(14,"i",26),n.Oc(15," "),n.dc(16,"i",16),n.Oc(17," "),n.gc(),n.Oc(18," "),n.gc(),n.Oc(19," "),n.gc()}if(2&e){const e=t.$implicit,i=n.Gc(11),s=n.sc(2);n.Qb(3),n.Qc(" ",e.fileName," "),n.Qb(3),n.Pc(e.sizeName),n.Qb(4),n.Ac("appA11yTitle",n.uc(12,7,"delete")),n.zc("appApiAction",s.deletePromises[e.id])("disabled",i.loading),n.Qb(4),n.zc("hidden",i.loading),n.Qb(2),n.zc("hidden",!i.loading)}}function Wl(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"div",18),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"div",8),n.Oc(7," "),n.Mc(8,Hl,20,9,"div",19),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()),2&e){const e=n.sc();n.Qb(3),n.Qc(" ",n.uc(4,2,"attachments")," "),n.Qb(5),n.zc("ngForOf",e.cipher.attachments)}}Kl.ɵfac=function(e){return new(e||Kl)(n.cc(C),n.cc(I.a),n.cc(x.a),n.cc(z.a),n.cc(A.a),n.cc(O),n.cc(Window))},Kl.ɵdir=n.Xb({type:Kl,inputs:{cipherId:"cipherId"},outputs:{onUploadedAttachment:"onUploadedAttachment",onDeletedAttachment:"onDeletedAttachment",onReuploadedAttachment:"onReuploadedAttachment"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Kl,[{type:n.q}],(function(){return[{type:C},{type:I.a},{type:x.a},{type:z.a},{type:A.a},{type:O},{type:Window}]}),{cipherId:[{type:n.D}],onUploadedAttachment:[{type:n.O}],onDeletedAttachment:[{type:n.O}],onReuploadedAttachment:[{type:n.O}]});class ql extends Kl{constructor(e,t,i,n,s,r){super(e,t,i,n,s,r,window)}}ql.ɵfac=function(e){return new(e||ql)(n.cc(C),n.cc(I.a),n.cc(x.a),n.cc(z.a),n.cc(A.a),n.cc(O))},ql.ɵcmp=n.Wb({type:ql,selectors:[["app-vault-attachments"]],features:[n.Nb],decls:53,vars:20,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","attachmentsTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content",3,"appApiAction","ngSubmit"],["form",""],[1,"modal-body"],["class","box",4,"ngIf"],[1,"box"],[1,"box-header"],[1,"box-content","no-hover"],[1,"box-content-row"],["for","file"],["type","file","id","file","name","file","required",""],[1,"box-footer"],[1,"modal-footer"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"],["type","button","data-dismiss","modal"],["id","attachmentsTitle",1,"box-header"],["class","box-content-row box-content-row-flex",4,"ngFor","ngForOf"],[1,"box-content-row","box-content-row-flex"],[1,"row-main"],[1,"row-sub-label"],[1,"action-buttons","no-pad"],["type","button","appStopClick","","appBlurClick","",1,"row-btn","btn",3,"appA11yTitle","appApiAction","disabled","click"],["deleteBtn",""],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw",3,"hidden"]],template:function(e,t){if(1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"form",2,3),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",4),n.Oc(8," "),n.Mc(9,Wl,11,4,"div",5),n.Oc(10," "),n.hc(11,"div",6),n.Oc(12," "),n.hc(13,"div",7),n.Oc(14),n.tc(15,"i18n"),n.gc(),n.Oc(16," "),n.hc(17,"div",8),n.Oc(18," "),n.hc(19,"div",9),n.Oc(20," "),n.hc(21,"label",10),n.Oc(22),n.tc(23,"i18n"),n.gc(),n.Oc(24," "),n.dc(25,"input",11),n.Oc(26," "),n.gc(),n.Oc(27," "),n.gc(),n.Oc(28," "),n.hc(29,"div",12),n.Oc(30),n.tc(31,"i18n"),n.gc(),n.Oc(32," "),n.gc(),n.Oc(33," "),n.gc(),n.Oc(34," "),n.hc(35,"div",13),n.Oc(36," "),n.hc(37,"button",14),n.tc(38,"i18n"),n.Oc(39," "),n.dc(40,"i",15),n.Oc(41," "),n.dc(42,"i",16),n.Oc(43," "),n.gc(),n.Oc(44," "),n.hc(45,"button",17),n.Oc(46),n.tc(47,"i18n"),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.gc(),n.Oc(50," "),n.gc(),n.Oc(51," "),n.gc(),n.Oc(52," ")),2&e){const e=n.Gc(5);n.Qb(4),n.zc("appApiAction",t.formPromise),n.Qb(5),n.zc("ngIf",t.cipher&&t.cipher.hasAttachments),n.Qb(5),n.Qc(" ",n.uc(15,10,"newAttachment")," "),n.Qb(8),n.Pc(n.uc(23,12,"file")),n.Qb(8),n.Qc(" ",n.uc(31,14,"maxFileSize")," "),n.Qb(7),n.Ac("appA11yTitle",n.uc(38,16,"save")),n.zc("disabled",e.loading),n.Qb(3),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading),n.Qb(4),n.Pc(n.uc(47,18,"close"))}},directives:[dr.p,dr.g,dr.h,hr,Dr.k,fr,Mr,Dr.j,Ar],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ql,[{type:n.l,args:[{selector:"app-vault-attachments",templateUrl:"attachments.component.html"}]}],(function(){return[{type:C},{type:I.a},{type:x.a},{type:z.a},{type:A.a},{type:O}]}),null);var Gl=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Jl{constructor(e){this.searchService=e,this.activeCipherId=null,this.onCipherClicked=new n.t,this.onCipherRightClicked=new n.t,this.onAddCipher=new n.t,this.onAddCipherOptions=new n.t,this.loaded=!1,this.ciphers=[],this.pagedCiphers=[],this.searchPlaceholder=null,this.filter=null,this.deleted=!1,this.searchPending=!1,this.didScroll=!1,this.pageSize=100,this.searchTimeout=null,this.pagedCiphersCount=0,this.refreshing=!1}load(e=null,t=!1){return Gl(this,void 0,void 0,(function*(){this.deleted=t||!1,yield this.applyFilter(e),this.loaded=!0}))}loadMore(){if(this.ciphers.length<=this.pageSize)return;const e=this.pagedCiphers.length;let t=this.pageSize;this.refreshing&&0===e&&this.pagedCiphersCount>this.pageSize&&(t=this.pagedCiphersCount),this.ciphers.length>e&&(this.pagedCiphers=this.pagedCiphers.concat(this.ciphers.slice(e,e+t))),this.pagedCiphersCount=this.pagedCiphers.length,this.didScroll=this.pagedCiphers.length>this.pageSize}reload(e=null,t=!1){return Gl(this,void 0,void 0,(function*(){this.loaded=!1,this.ciphers=[],yield this.load(e,t)}))}refresh(){return Gl(this,void 0,void 0,(function*(){try{this.refreshing=!0,yield this.reload(this.filter,this.deleted)}finally{this.refreshing=!1}}))}applyFilter(e=null){return Gl(this,void 0,void 0,(function*(){this.filter=e,yield this.search(null)}))}search(e=null,t){return Gl(this,void 0,void 0,(function*(){this.searchPending=!1,null!=this.searchTimeout&&clearTimeout(this.searchTimeout);const i=e=>e.isDeleted===this.deleted;if(null==e)return this.ciphers=yield this.searchService.searchCiphers(this.searchText,[this.filter,i],t),void(yield this.resetPaging());this.searchPending=!0,this.searchTimeout=setTimeout(()=>Gl(this,void 0,void 0,(function*(){this.ciphers=yield this.searchService.searchCiphers(this.searchText,[this.filter,i],t),yield this.resetPaging(),this.searchPending=!1})),e)}))}selectCipher(e){this.onCipherClicked.emit(e)}rightClickCipher(e){this.onCipherRightClicked.emit(e)}addCipher(){this.onAddCipher.emit()}addCipherOptions(){this.onAddCipherOptions.emit()}isSearching(){return!this.searchPending&&this.searchService.isSearchable(this.searchText)}isPaging(){const e=this.isSearching();return e&&this.didScroll&&this.resetPaging(),!e&&this.ciphers.length>this.pageSize}resetPaging(){return Gl(this,void 0,void 0,(function*(){this.pagedCiphers=[],this.loadMore()}))}}Jl.ɵfac=function(e){return new(e||Jl)(n.cc(vc))},Jl.ɵdir=n.Xb({type:Jl,inputs:{activeCipherId:"activeCipherId"},outputs:{onCipherClicked:"onCipherClicked",onCipherRightClicked:"onCipherRightClicked",onAddCipher:"onAddCipher",onAddCipherOptions:"onAddCipherOptions"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Jl,[{type:n.q}],(function(){return[{type:vc}]}),{activeCipherId:[{type:n.D}],onCipherClicked:[{type:n.O}],onCipherRightClicked:[{type:n.O}],onAddCipher:[{type:n.O}],onAddCipherOptions:[{type:n.O}]});class Yl{constructor(e){this.el=e}onError(){this.el.nativeElement.src=this.appFallbackSrc}}Yl.ɵfac=function(e){return new(e||Yl)(n.cc(n.r))},Yl.ɵdir=n.Xb({type:Yl,selectors:[["","appFallbackSrc",""]],hostBindings:function(e,t){1&e&&n.oc("error",(function(){return t.onError()}))},inputs:{appFallbackSrc:"appFallbackSrc"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Yl,[{type:n.q,args:[{selector:"[appFallbackSrc]"}]}],(function(){return[{type:n.r}]}),{appFallbackSrc:[{type:n.D,args:["appFallbackSrc"]}],onError:[{type:n.w,args:["error"]}]});var $l=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function Xl(e,t){if(1&e&&n.dc(0,"img",6),2&e){const e=n.sc();n.Ac("appFallbackSrc",e.fallbackImage),n.zc("src",e.image,n.Jc)}}function Zl(e,t){if(1&e&&n.dc(0,"i"),2&e){const e=n.sc();n.Tb("fa fa-fw fa-lg ",e.icon,"")}}function ed(e,t){1&e&&(n.rc(),n.hc(0,"svg",7),n.Oc(1," "),n.hc(2,"defs"),n.Oc(3," "),n.dc(4,"path",8),n.Oc(5," "),n.dc(6,"path",9),n.Oc(7," "),n.gc(),n.Oc(8," "),n.hc(9,"g",10),n.Oc(10," "),n.hc(11,"mask",11),n.Oc(12," "),n.dc(13,"use",12),n.Oc(14," "),n.gc(),n.Oc(15," "),n.dc(16,"path",13),n.Oc(17," "),n.hc(18,"mask",14),n.Oc(19," "),n.dc(20,"use",15),n.Oc(21," "),n.gc(),n.Oc(22," "),n.dc(23,"path",16),n.Oc(24," "),n.dc(25,"path",17),n.Oc(26," "),n.gc(),n.Oc(27," "),n.gc())}function td(e,t){1&e&&(n.rc(),n.hc(0,"svg",18),n.Oc(1," "),n.hc(2,"g",19),n.Oc(3," "),n.dc(4,"path",20),n.Oc(5," "),n.dc(6,"path",21),n.Oc(7," "),n.gc(),n.Oc(8," "),n.gc())}function id(e,t){1&e&&(n.rc(),n.hc(0,"svg",22),n.Oc(1," "),n.hc(2,"g",19),n.Oc(3," "),n.dc(4,"path",23),n.Oc(5," "),n.dc(6,"path",24),n.Oc(7," "),n.gc(),n.Oc(8," "),n.gc())}const nd={"fa-globe":String.fromCharCode(61612),"fa-sticky-note-o":String.fromCharCode(62026),"fa-id-card-o":String.fromCharCode(62147),"fa-credit-card":String.fromCharCode(61597),"fa-android":String.fromCharCode(61819),"fa-apple":String.fromCharCode(61817)};class sd{constructor(e,t){this.stateService=t,this.iconsUrl=e.iconsUrl,this.iconsUrl||(e.baseUrl?this.iconsUrl=e.baseUrl+"/icons":this.iconsUrl="https://icons.bitwarden.net")}ngOnChanges(){return $l(this,void 0,void 0,(function*(){this.imageEnabled=!(yield this.stateService.get(Pr.a.disableFaviconKey)),this.load()}))}get iconCode(){return nd[this.icon]}load(){switch(this.cipher.type){case B.a.Login:this.icon="icon-login",this.setLoginIcon();break;case B.a.SecureNote:this.icon="fa-sticky-note-o";break;case B.a.Card:this.icon="fa-credit-card";break;case B.a.Identity:this.icon="fa-id-card-o"}}setLoginIcon(){if(this.cipher.login.uri){let e=this.cipher.login.uri,t=!1;if(0===e.indexOf("androidapp://")?(this.icon="fa-android",this.image=null):0===e.indexOf("iosapp://")?(this.icon="fa-apple",this.image=null):this.imageEnabled&&-1===e.indexOf("://")&&e.indexOf(".")>-1?(e="http://"+e,t=!0):this.imageEnabled&&(t=0===e.indexOf("http")&&e.indexOf(".")>-1),this.imageEnabled&&t)try{this.image=this.iconsUrl+"/"+Q.a.getHostname(e)+"/icon.png",this.fallbackImage="images/icons-login.svg"}catch(e){}}else this.image=null}}sd.ɵfac=function(e){return new(e||sd)(n.cc(k),n.cc(br.a))},sd.ɵcmp=n.Wb({type:sd,selectors:[["app-vault-icon"]],inputs:{cipher:"cipher"},features:[n.Ob],decls:13,vars:5,consts:[["aria-hidden","true",1,"icon-wrapper"],["class","icon-type","alt","",3,"src","appFallbackSrc",4,"ngIf"],[3,"class",4,"ngIf"],["class","icon-type","xmlns","http://www.w3.org/2000/svg",0,"xmlns","xlink","http://www.w3.org/1999/xlink","viewBox","0 0 32 32",4,"ngIf"],["class","icon-type","xmlns","http://www.w3.org/2000/svg","viewBox","0 0 32 24",4,"ngIf"],["class","icon-type","xmlns","http://www.w3.org/2000/svg","width","32","height","32","viewBox","0 0 32 32",4,"ngIf"],["alt","",1,"icon-type",3,"src","appFallbackSrc"],["xmlns","http://www.w3.org/2000/svg",0,"xmlns","xlink","http://www.w3.org/1999/xlink","viewBox","0 0 32 32",1,"icon-type"],["id","a","d","M0 0h32v22H0z"],["id","c","d","M0 22h32V0H0z"],["fill","none","fill-rule","evenodd","transform","translate(0 5)"],["id","b","fill","#fff"],[0,"xlink","href","#a"],["fill","#16B52D","d","M0 1.991C0 .891.889.001 2.001.001h27.998C31.104 0 32 .888 32 1.99V20.01A1.992 1.992 0 0 1 29.999 22H2.001A1.995 1.995 0 0 1 0 20.01V1.99z","mask","url(#b)"],["id","d","fill","#fff"],[0,"xlink","href","#c"],["fill","#8EE39B","d","M2 20h28V2H2z","mask","url(#d)"],["fill","#16B52D","d","M16 6.005a5 5 0 1 1 0 10 5 5 0 0 1 0-10zM7 9a2.002 2.002 0 0 1 0 4.003A2 2 0 0 1 7 9zm18 0a2.002 2.002 0 0 1 0 4.003A2 2 0 0 1 25 9z","mask","url(#d)"],["xmlns","http://www.w3.org/2000/svg","viewBox","0 0 32 24",1,"icon-type"],["fill","none","fill-rule","evenodd"],["fill","#FFD799","d","M32 21.995A1.997 1.997 0 0 1 30.002 24H24v-2.499c0-.829-.666-1.5-1.5-1.5-.829 0-1.5.678-1.5 1.5v2.5H11v-2.5c0-.829-.666-1.5-1.5-1.5-.829 0-1.5.678-1.5 1.5v2.5H1.998A2.002 2.002 0 0 1 0 21.994V2.005C0 .897.889 0 2.001 0h27.997C31.104 0 32 .897 32 2.005v19.99z"],["fill","#FF9300","d","M12 11.5c1.5 0 3 2.25 3 3s0 1.5-.75 1.5H3.75C3 16 3 15.25 3 14.5s1.5-3 3-3 .75.75 3 .75 1.5-.75 3-.75zM28 14v1H17v-1h11zm0-3v1H17v-1h11zM9 4c1.657 0 3 1.511 3 3.375s-1.343 3.375-3 3.375-3-1.511-3-3.375S7.343 4 9 4zm19 4v1H17V8h11zm-5-3v1h-6V5h6z"],["xmlns","http://www.w3.org/2000/svg","width","32","height","32","viewBox","0 0 32 32",1,"icon-type"],["fill","#ACF5F7","d","M3 2.002C3 .896 3.89 0 4.997 0H22l7 7v22.996C29 31.103 28.105 32 27.003 32H4.997C3.894 32 3 31.11 3 29.998V2.002z"],["fill","#0DCBCF","d","M21.5 0c-.276 0-.5.23-.5.5V8h7.5c.276 0 .5-.232.5-.5V7l-7-7h-.5zM19 23v2H9v-2h10zm4-4v2H9v-2h14zm-2-4v2H9v-2h12zm2-4v2H9v-2h14z"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.Mc(2,Xl,1,2,"img",1),n.Oc(3," "),n.Mc(4,Zl,1,3,"i",2),n.Oc(5," "),n.Mc(6,ed,28,0,"svg",3),n.Oc(7," "),n.Mc(8,td,9,0,"svg",4),n.Oc(9," "),n.Mc(10,id,9,0,"svg",5),n.Oc(11," "),n.gc(),n.Oc(12," ")),2&e&&(n.Qb(2),n.zc("ngIf",t.imageEnabled&&t.image),n.Qb(2),n.zc("ngIf",1===t.cipher.type&&t.imageEnabled&&!t.image),n.Qb(2),n.zc("ngIf",3===t.cipher.type),n.Qb(2),n.zc("ngIf",4===t.cipher.type),n.Qb(2),n.zc("ngIf",2===t.cipher.type))},directives:[Dr.k,Yl],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(sd,[{type:n.l,args:[{selector:"app-vault-icon",templateUrl:"icon.component.html"}]}],(function(){return[{type:k},{type:br.a}]}),{cipher:[{type:n.D}]});class rd{constructor(){this.width=16,this.height=16}}var od;rd.ɵfac=function(e){return new(e||rd)},rd.ɵcmp=n.Wb({type:rd,selectors:[["app-cozy-icon"]],inputs:{ref:"ref",width:"width",height:"height"},decls:4,vars:3,consts:[["aria-hidden","true","focusable","false"]],template:function(e,t){1&e&&(n.rc(),n.hc(0,"svg",0),n.Oc(1," "),n.dc(2,"use"),n.Oc(3," "),n.gc()),2&e&&(n.Rb("width",t.width)("height",t.height),n.Qb(2),n.Sb("href","#",t.ref,"",null,"xlink"))},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(rd,[{type:n.l,args:[{selector:"app-cozy-icon",templateUrl:"./cozy-icon.component.html",encapsulation:n.gb.None}]}],null,{ref:[{type:n.D}],width:[{type:n.D}],height:[{type:n.D}]}),function(e){e[e.Owner=0]="Owner",e[e.Admin=1]="Admin",e[e.User=2]="User",e[e.Manager=3]="Manager",e[e.Custom=4]="Custom"}(od||(od={}));class cd{}var ad=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class ld{constructor(e,t,i,n,s,r){this.apiService=e,this.clientService=t,this.cryptoService=i,this.i18nService=n,this.platformUtilsService=s,this.userService=r}loadOrganizationUsersToBeConfirmed(e){return ad(this,void 0,void 0,(function*(){const t=yield this.loadAcceptedUsersForOrganization(e),i=[];for(const e of t){const t=(yield this.apiService.getUserPublicKey(e.id)).publicKey,n=yield this.cryptoService.getFingerprint(e.id,Q.a.fromB64ToArray(t).buffer);i.push({name:e.name,id:e.id,email:e.email,publicKey:t,fingerprint:n,fingerprintPhrase:n.join("-")})}return i}))}loadAllUsersToBeConfirmed(){return ad(this,void 0,void 0,(function*(){const e=yield this.getSharedOrganizations(),t=[];for(const i of e){const e=yield this.apiService.getOrganizationUsers(i.id);t.push(...e.data)}const i=t.filter((e,t,i)=>i.findIndex(t=>t.id===e.id)===t),n=yield this.userService.getUserId(),s=i.filter(e=>e.type===od.User&&e.status===wc.Accepted&&e.id!==n),r=[];for(const e of s){const t=(yield this.apiService.getUserPublicKey(e.id)).publicKey,i=yield this.cryptoService.getFingerprint(e.id,Q.a.fromB64ToArray(t).buffer);r.push({name:e.name,id:e.id,email:e.email,publicKey:t,fingerprint:i,fingerprintPhrase:i.join("-")})}return r}))}autoConfirmTrustedUsers(e,t){return ad(this,void 0,void 0,(function*(){const i=yield this.loadTrustedUsers(),n=t.map(e=>{var t;return null===(t=e.email.find(e=>!0===e.primary))||void 0===t?void 0:t.address}),s=i.filter(e=>n.includes(e.email));for(const t of s){const i=yield this.cryptoService.getOrgKey(e),n=yield this.cryptoService.rsaEncrypt(i.key,Q.a.fromB64ToArray(t.publicKey).buffer),s=new cd;s.key=n.encryptedString,yield this.apiService.postOrganizationUserConfirm(e,t.id,s)}}))}confirmUser(e){return ad(this,void 0,void 0,(function*(){const t=yield this.getSharedOrganizations();for(const i of t){if((yield this.apiService.getOrganizationUsers(i.id)).data.filter(e=>e.status===wc.Invited||e.status===wc.Accepted).map(e=>e.id).includes(e.id)){const t=yield this.cryptoService.getOrgKey(i.id),n=yield this.cryptoService.rsaEncrypt(t.key,Q.a.fromB64ToArray(e.publicKey).buffer),s=new cd;s.key=n.encryptedString,yield this.apiService.postOrganizationUserConfirm(i.id,e.id,s)}}}))}rejectUser(e){return ad(this,void 0,void 0,(function*(){try{const t=this.clientService.GetClient();yield t.stackClient.fetchJSON("DELETE","/bitwarden/contacts/"+e.id,[])}catch(e){this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("unexpectedError"))}}))}getSharedOrganizations(){return ad(this,void 0,void 0,(function*(){return(yield this.userService.getAllOrganizations()).filter(e=>e.isOwner).filter(e=>"Cozy"!==e.name)}))}loadTrustedUsers(){return ad(this,void 0,void 0,(function*(){const e=Object(l.Q)("com.bitwarden.contacts").select(["email","public_key","confirmed"]).where({confirmed:!0}).indexFields(["confirmed"]),{data:t}=yield this.clientService.GetClient().query(e),i=[];for(const e of t){const t=e.public_key,n=yield this.cryptoService.getFingerprint(e.id,Q.a.fromB64ToArray(t).buffer);i.push({name:e.email,id:e.id,email:e.email,publicKey:t,fingerprint:n,fingerprintPhrase:n.join("-")})}return i}))}loadAcceptedUsersForOrganization(e){return ad(this,void 0,void 0,(function*(){const t=yield this.apiService.getOrganizationUsers(e),i=yield this.userService.getUserId();if(!t.data.find(e=>e.type===od.Owner&&e.id===i))return[];return t.data.filter(e=>e.type===od.User&&e.status===wc.Accepted&&e.id!==i)}))}}ld.ɵfac=function(e){return new(e||ld)(n.lc(O),n.lc(y),n.lc(x.a),n.lc(I.a),n.lc(A.a),n.lc(z.a))},ld.ɵprov=n.Yb({token:ld,factory:ld.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ld,[{type:n.A,args:[{providedIn:"root"}]}],(function(){return[{type:O},{type:y},{type:x.a},{type:I.a},{type:A.a},{type:z.a}]}),null);var dd=i(761),ud=i(455),hd=i(785),pd=i(786);function gd(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function fd(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?gd(Object(i),!0).forEach((function(t){zn()(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):gd(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var yd=function(e){var t=e.file,i=e.reactWrapperProps,n=e.confirmationMethods,s=e.onShared,r=Object(U.useState)(!1),o=ei()(r,2),c=o[0],a=o[1],l=fd(fd({},n),{},{recipientConfirmationDialogContent:dd.a});return N.a.createElement($s,{reactWrapperProps:i},N.a.createElement(ud.a,{doctype:"com.bitwarden.organizations",documentType:"Organizations",previewPath:"",onShared:s},c&&N.a.createElement(hd.a,{document:t,documentType:"Organizations",sharingDesc:t.name,onClose:function(){return a(!1)},showShareOnlyByLink:!1,twoStepsConfirmationMethods:l}),N.a.createElement(pd.a,{className:"u-mr-half",extension:"full",useShortLabel:!0,docId:t.id,onClick:function(){return a(!0)}})))};yd.propTypes={reactWrapperProps:Gs.isRequired,file:Xt.a.shape({id:Xt.a.string.isRequired,name:Xt.a.string.isRequired,_type:Xt.a.string.isRequired,_id:Xt.a.string.isRequired}).isRequired};var md=yd,vd=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class bd extends Jt{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g){super(e,t,i,n,s,r,o,c,a,l,d,u,h,p),this.sharingService=g,this.collectionId=null,this.organizationId=null}getProps(){return vd(this,void 0,void 0,(function*(){const e=(yield this.collectionService.getAllDecrypted()).find(e=>e.id===this.collectionId);this.organizationId=e.organizationId;return{reactWrapperProps:yield this.getReactWrapperProps(),file:{id:e.organizationId,name:e.name,_type:"com.bitwarden.organizations",_id:e.organizationId},confirmationMethods:this.getTwoStepsConfirmationMethods(),onShared:this.onShared.bind(this)}}))}renderReact(){return vd(this,void 0,void 0,(function*(){R.render(U.createElement(md,yield this.getProps()),this.getRootDomNode())}))}loadOrganizationUsersToBeConfirmed(){return vd(this,void 0,void 0,(function*(){return yield this.sharingService.loadOrganizationUsersToBeConfirmed(this.organizationId)}))}confirmUser(e){return vd(this,void 0,void 0,(function*(){return yield this.sharingService.confirmUser(e)}))}rejectUser(e){return vd(this,void 0,void 0,(function*(){return yield this.sharingService.rejectUser(e)}))}getTwoStepsConfirmationMethods(){return{getRecipientsToBeConfirmed:this.loadOrganizationUsersToBeConfirmed.bind(this),confirmRecipient:this.confirmUser.bind(this),rejectRecipient:this.rejectUser.bind(this)}}onShared({document:e,recipients:t,readOnlyRecipients:i}){return vd(this,void 0,void 0,(function*(){e.id}))}}bd.ɵfac=function(e){return new(e||bd)(n.cc(y),n.cc(O),n.cc(k),n.cc(S),n.cc(M),n.cc(x.a),n.cc(C),n.cc(z.a),n.cc(P),n.cc(D),n.cc(E.a),n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(ld))},bd.ɵcmp=n.Wb({type:bd,selectors:[["app-sharing"]],inputs:{collectionId:"collectionId"},features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(bd,[{type:n.l,args:[{selector:"app-sharing",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],(function(){return[{type:y},{type:O},{type:k},{type:S},{type:M},{type:x.a},{type:C},{type:z.a},{type:P},{type:D},{type:E.a},{type:T},{type:I.a},{type:A.a},{type:ld}]}),{collectionId:[{type:n.D}]});var wd=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Od=["menu"];function Sd(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"app-cozy-icon",20),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",21),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"shared")),n.Qb(4),n.Pc(n.uc(7,4,"shared")))}function Cd(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.dc(2,"i",22),n.tc(3,"i18n"),n.Oc(4," "),n.hc(5,"span",21),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.ec()),2&e&&(n.Qb(2),n.Ac("title",n.uc(3,2,"attachments")),n.Qb(4),n.Pc(n.uc(7,4,"attachments")))}function Pd(e,t){if(1&e&&(n.hc(0,"span",23),n.Oc(1),n.gc()),2&e){const e=n.sc().$implicit;n.Qb(1),n.Pc(e.subTitle)}}const xd=function(e){return{active:e}};function kd(e,t){if(1&e){const e=n.ic();n.hc(0,"a",15),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).selectCipher(i)}))("contextmenu",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).rightClickCipher(i)})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"app-vault-icon",16),n.Oc(4," "),n.hc(5,"div",17),n.Oc(6," "),n.hc(7,"span",18),n.Oc(8),n.Mc(9,Sd,9,6,"ng-container",5),n.Oc(10," "),n.Mc(11,Cd,9,6,"ng-container",5),n.Oc(12," "),n.gc(),n.Oc(13," "),n.Mc(14,Pd,2,1,"span",19),n.Oc(15," "),n.gc(),n.Oc(16," "),n.gc()}if(2&e){const e=t.$implicit,i=n.sc(3);n.Ac("title",n.uc(1,7,"viewItem")),n.zc("ngClass",n.Dc(9,xd,e.id===i.activeCipherId)),n.Qb(3),n.zc("cipher",e),n.Qb(5),n.Qc(" ",e.name," "),n.Qb(1),n.zc("ngIf",e.organizationId),n.Qb(2),n.zc("ngIf",e.hasAttachments),n.Qb(3),n.zc("ngIf",e.subTitle)}}function Td(e,t){if(1&e){const e=n.ic();n.hc(0,"div",13),n.oc("scrolled",(function(){n.Hc(e);return n.sc(2).loadMore()})),n.Oc(1," "),n.Mc(2,kd,17,11,"a",14),n.Oc(3," "),n.gc()}if(2&e){const e=n.sc().ngIf,t=n.sc();n.zc("infiniteScrollDistance",1)("infiniteScrollContainer","#items .content")("fromRoot",!0)("infiniteScrollDisabled",!t.isPaging()),n.Qb(2),n.zc("ngForOf",e)}}function Id(e,t){1&e&&n.dc(0,"i",26)}function Dd(e,t){if(1&e){const e=n.ic();n.hc(0,"button",30),n.oc("click",(function(){n.Hc(e);return n.sc(4).addCipher()})),n.Oc(1),n.tc(2,"i18n"),n.gc()}2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"addItem")))}function Ad(e,t){if(1&e&&(n.fc(0),n.Oc(1," "),n.rc(),n.hc(2,"svg",27),n.Oc(3," "),n.dc(4,"path",28),n.Oc(5," "),n.gc(),n.Oc(6," "),n.qc(),n.hc(7,"p"),n.Oc(8),n.tc(9,"i18n"),n.gc(),n.Oc(10," "),n.Mc(11,Dd,3,3,"button",29),n.Oc(12," "),n.ec()),2&e){const e=n.sc(3);n.Qb(8),n.Pc(n.uc(9,2,"noItemsInList")),n.Qb(3),n.zc("ngIf",!e.deleted)}}function Md(e,t){if(1&e&&(n.hc(0,"div",24),n.Oc(1," "),n.Mc(2,Id,1,0,"i",25),n.Oc(3," "),n.Mc(4,Ad,13,4,"ng-container",5),n.Oc(5," "),n.gc()),2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",!e.loaded),n.Qb(2),n.zc("ngIf",e.loaded)}}function zd(e,t){if(1&e&&(n.fc(0),n.Oc(1," "),n.Mc(2,Td,4,5,"div",11),n.Oc(3," "),n.Mc(4,Md,6,2,"div",12),n.Oc(5," "),n.ec()),2&e){const e=t.ngIf;n.Qb(2),n.zc("ngIf",e.length),n.Qb(2),n.zc("ngIf",!e.length)}}function Ed(e,t){if(1&e){const e=n.ic();n.hc(0,"button",31),n.oc("click",(function(){n.Hc(e);return n.sc().addCipher()}))("contextmenu",(function(){n.Hc(e);return n.sc().addCipherOptions()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",32),n.Oc(4," "),n.gc()}if(2&e){const e=n.sc();n.Ac("appA11yTitle",n.uc(1,2,"addItem")),n.zc("disabled",e.deleted)}}function Ud(e,t){if(1&e&&n.dc(0,"app-sharing",33),2&e){const e=n.sc();n.zc("collectionId",e.collectionId)}}function Nd(e,t){if(1&e){const e=n.ic();n.hc(0,"button",34),n.oc("click",(function(){n.Hc(e);return n.sc().openMenu()})),n.Oc(1," "),n.rc(),n.hc(2,"svg",35),n.Oc(3," "),n.dc(4,"path",36),n.Oc(5," "),n.dc(6,"path",37),n.Oc(7," "),n.dc(8,"path",38),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()}}function Rd(e,t){if(1&e){const e=n.ic();n.hc(0,"button",44),n.oc("click",(function(){n.Hc(e);return n.sc(2).deleteCurrentCiphers()})),n.Oc(1," "),n.dc(2,"i",45),n.Oc(3),n.tc(4,"i18n"),n.gc()}if(2&e){const e=n.sc(2);n.zc("disabled",0===e.ciphers.length),n.Qb(3),n.Qc(" ",n.uc(4,2,"deleteItems")," ")}}function Fd(e,t){if(1&e){const e=n.ic();n.hc(0,"button",44),n.oc("click",(function(){n.Hc(e);return n.sc(2).deleteCurrentCiphers()})),n.Oc(1," "),n.dc(2,"i",45),n.Oc(3),n.tc(4,"i18n"),n.gc()}if(2&e){const e=n.sc(2);n.zc("disabled",0===e.ciphers.length),n.Qb(3),n.Qc(" ",n.uc(4,2,"permanentlyDeleteItems")," ")}}function Qd(e,t){if(1&e){const e=n.ic();n.hc(0,"button",46),n.oc("click",(function(){n.Hc(e);return n.sc(2).restoreCurrentCiphers()})),n.Oc(1," "),n.dc(2,"i",47),n.Oc(3),n.tc(4,"i18n"),n.gc()}if(2&e){const e=n.sc(2);n.zc("disabled",0===e.ciphers.length),n.Qb(3),n.Qc(" ",n.uc(4,2,"restoreAllItems")," ")}}function Vd(e,t){if(1&e){const e=n.ic();n.hc(0,"div",39,40),n.Oc(2," "),n.hc(3,"button",41),n.oc("blur",(function(t){n.Hc(e);return n.sc().onMenuFocusOut(t)})),n.gc(),n.Oc(4," "),n.Mc(5,Rd,5,4,"button",42),n.Oc(6," "),n.Mc(7,Fd,5,4,"button",42),n.Oc(8," "),n.Mc(9,Qd,5,4,"button",43),n.Oc(10," "),n.gc()}if(2&e){const e=n.sc();n.Qb(5),n.zc("ngIf",!e.deleted),n.Qb(2),n.zc("ngIf",e.deleted),n.Qb(2),n.zc("ngIf",e.deleted)}}class Bd extends Jl{constructor(e,t,i,s){super(e),this.platformUtilsService=t,this.i18nService=i,this.cipherService=s,this.onDeletedCipher=new n.t,this.collectionId=null,this.isMenuOpened=!1,this.isReadOnly=!1,this.isCozyConnectors=!1,this.pageSize=250}openMenu(){this.isMenuOpened?this.isMenuOpened=!1:(this.isMenuOpened=!0,setTimeout(()=>{this.menu.nativeElement.firstElementChild.focus()},10))}onMenuFocusOut(e){let t=e.relatedTarget&&e.relatedTarget.closest("#bottom-menu");t=t||e.relatedTarget&&e.relatedTarget.closest("#param-btn"),t||(this.isMenuOpened=!1)}deleteCurrentCiphers(){return wd(this,void 0,void 0,(function*(){this.isMenuOpened=!1;const e=this.ciphers.length.toString(),t=this.ciphers.length>1?this.deleted?"permanentlyDeleteItemsConfirmation":"deleteItemsConfirmation":this.deleted?"permanentlyDeleteItemConfirmation":"deleteItemConfirmation";if(!(yield this.platformUtilsService.showDialog("",this.i18nService.t(t).replace("€€€",e),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{yield this.deleteCiphers(),this.onDeletedCipher.emit();const t=this.ciphers.length>1?this.deleted?"permanentlyDeletedItems":"deletedItems":this.deleted?"permanentlyDeletedItem":"deletedItem";this.platformUtilsService.showToast("success",null,this.i18nService.t(t).replace("€€€",e))}catch(e){}return!0}))}restoreCurrentCiphers(){return wd(this,void 0,void 0,(function*(){this.isMenuOpened=!1;const e=this.ciphers.length.toString(),t=this.ciphers.length>1?"restoreItems":"restoreItem";if(!(yield this.platformUtilsService.showDialog("",this.i18nService.t(t).replace("€€€",e),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{yield this.restoreCiphers(),this.onDeletedCipher.emit();const t=this.ciphers.length>1?"restoredItems":"restoredItem";this.platformUtilsService.showToast("success",null,this.i18nService.t(t).replace("€€€",e))}catch(e){}return!0}))}deleteCiphers(){const e=this.ciphers.map(e=>e.id);return this.deleted?this.cipherService.deleteManyWithServer(e):this.cipherService.softDeleteManyWithServer(e)}restoreCiphers(){const e=this.ciphers.filter(e=>e.isDeleted).map(e=>e.id);return this.cipherService.restoreManyWithServer(e)}}Bd.ɵfac=function(e){return new(e||Bd)(n.cc(vc),n.cc(A.a),n.cc(I.a),n.cc(C))},Bd.ɵcmp=n.Wb({type:Bd,selectors:[["app-vault-ciphers"]],viewQuery:function(e,t){if(1&e&&n.Sc(Od,1),2&e){let e;n.Fc(e=n.pc())&&(t.menu=e.first)}},inputs:{collectionId:"collectionId"},outputs:{onDeletedCipher:"onDeletedCipher"},features:[n.Nb],decls:27,vars:11,consts:[[1,"header","header-search"],[1,"search"],["type","search","id","search","autocomplete","off","appAutofocus","",3,"placeholder","ngModel","ngModelChange","input"],["aria-hidden","true",1,"fa","fa-search"],[1,"content"],[4,"ngIf"],[1,"footer"],["appBlurClick","","class","block primary",3,"appA11yTitle","disabled","click","contextmenu",4,"ngIf"],[3,"collectionId",4,"ngIf"],["id","param-btn",3,"click",4,"ngIf"],["id","bottom-menu",4,"ngIf"],["class","list","infiniteScroll","",3,"infiniteScrollDistance","infiniteScrollContainer","fromRoot","infiniteScrollDisabled","scrolled",4,"ngIf"],["class","no-items",4,"ngIf"],["infiniteScroll","",1,"list",3,"infiniteScrollDistance","infiniteScrollContainer","fromRoot","infiniteScrollDisabled","scrolled"],["appStopClick","","href","#","class","flex-list-item",3,"title","ngClass","click","contextmenu",4,"ngFor","ngForOf"],["appStopClick","","href","#",1,"flex-list-item",3,"title","ngClass","click","contextmenu"],[3,"cipher"],[1,"flex-cipher-list-item"],[1,"text"],["class","detail",4,"ngIf"],["ref","share","width","16","height","16",3,"title"],[1,"sr-only"],["aria-hidden","true",1,"fa","fa-paperclip","text-muted",3,"title"],[1,"detail"],[1,"no-items"],["class","fa fa-spinner fa-spin fa-3x","aria-hidden","true",4,"ngIf"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-3x"],["xmlns","http://www.w3.org/2000/svg",0,"xmlns","xlink","http://www.w3.org/1999/xlink","width","32","height","32","viewBox","0 0 32 32","fill","#297EF2"],["id","a","d","M23.527 24H8.473C3.8 24 0 20.254 0 15.648c0-2.196.858-4.27 2.417-5.84a8.471 8.471 0 0 1 5.047-2.451A8.253 8.253 0 0 1 9.952 2.38 8.485 8.485 0 0 1 15.877 0c2.228 0 4.333.844 5.926 2.38a8.26 8.26 0 0 1 2.485 4.95C28.605 7.713 32 11.298 32 15.65 32 20.254 28.197 24 23.526 24zm-.181-2h.063C27.043 22 30 19.11 30 15.56c0-3.55-2.957-6.439-6.591-6.439h-.066a.864.864 0 0 1-.874-.833C22.387 4.82 19.43 2 15.88 2c-3.551 0-6.508 2.821-6.59 6.289a.865.865 0 0 1-.854.834C4.887 9.203 2 12.09 2 15.561 2 19.11 4.957 22 8.591 22h.054l.02-.001.057.001h14.624zm-2.502-6.666v-.002a.303.303 0 0 1 .1.44.363.363 0 0 1-.475.093 1.863 1.863 0 0 1-.388-.31C18.922 16.519 17.457 17 15.993 17c-1.462 0-2.923-.48-4.08-1.439-.105.11-.231.213-.381.303a.364.364 0 0 1-.476-.092c-.104-.146-.06-.342.1-.439.585-.35.613-.998.613-1.023.007-.174.165-.314.352-.31.189.005.34.149.336.322 0 .024-.01.331-.172.693 2.083 1.804 5.348 1.802 7.426-.01-.157-.357-.167-.66-.168-.683-.003-.174.148-.319.338-.322.19-.003.345.135.35.31 0 .029.03.673.613 1.024z"],["class","btn block primary link",3,"click",4,"ngIf"],[1,"btn","block","primary","link",3,"click"],["appBlurClick","",1,"block","primary",3,"appA11yTitle","disabled","click","contextmenu"],["aria-hidden","true",1,"fa","fa-plus","fa-lg"],[3,"collectionId"],["id","param-btn",3,"click"],["width","4","height","17","viewBox","0 0 8 34","xmlns","http://www.w3.org/2000/svg"],["d","M7.41665 0.583239C7.02784 0.194535 6.55584 0 6.00022 0H2.00007C1.4443 0 0.972306 0.194316 0.583354 0.583239C0.194402 0.972162 0 1.44449 0 1.99985V6.00007C0 6.5558 0.194402 7.02776 0.583354 7.41669C0.972087 7.80539 1.4443 8 2.00007 8H6.00022C6.55584 8 7.02784 7.80561 7.41665 7.41669C7.80545 7.02798 8 6.5558 8 6.00007V1.99978C8.00022 1.44442 7.80596 0.972089 7.41665 0.583239Z"],["d","M7.41665 26.5832C7.02784 26.1945 6.55584 26 6.00022 26H2.00007C1.4443 26 0.972306 26.1943 0.583354 26.5832C0.194402 26.9722 0 27.4445 0 27.9999V32.0001C0 32.5558 0.194402 33.0278 0.583354 33.4167C0.972087 33.8054 1.4443 34 2.00007 34H6.00022C6.55584 34 7.02784 33.8056 7.41665 33.4167C7.80545 33.028 8 32.5558 8 32.0001V27.9998C8.00022 27.4444 7.80596 26.9721 7.41665 26.5832Z"],["d","M7.41665 13.5832C7.02784 13.1945 6.55584 13 6.00022 13H2.00007C1.4443 13 0.972306 13.1943 0.583354 13.5832C0.194402 13.9722 0 14.4445 0 14.9999V19.0001C0 19.5558 0.194402 20.0278 0.583354 20.4167C0.972087 20.8054 1.4443 21 2.00007 21H6.00022C6.55584 21 7.02784 20.8056 7.41665 20.4167C7.80545 20.028 8 19.5558 8 19.0001V14.9998C8.00022 14.4444 7.80596 13.9721 7.41665 13.5832Z"],["id","bottom-menu"],["menu",""],[3,"blur"],["class","danger",3,"disabled","click",4,"ngIf"],["class","",3,"disabled","click",4,"ngIf"],[1,"danger",3,"disabled","click"],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw"],[1,"",3,"disabled","click"],["aria-hidden","true",1,"fa","fa-undo","fa-fw","fa-lg"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"input",2),n.oc("ngModelChange",(function(e){return t.searchText=e}))("input",(function(){return t.search(200)})),n.tc(5,"i18n"),n.gc(),n.Oc(6," "),n.dc(7,"i",3),n.Oc(8," "),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"div",4),n.Oc(12," "),n.Mc(13,zd,6,2,"ng-container",5),n.Oc(14," "),n.gc(),n.Oc(15," "),n.hc(16,"div",6),n.Oc(17," "),n.Mc(18,Ed,5,4,"button",7),n.Oc(19," "),n.Mc(20,Ud,1,1,"app-sharing",8),n.Oc(21," "),n.Mc(22,Nd,11,0,"button",9),n.Oc(23," "),n.Mc(24,Vd,11,3,"div",10),n.Oc(25," "),n.gc(),n.Oc(26," ")),2&e&&(n.Qb(4),n.Ac("placeholder",t.searchPlaceholder||n.uc(5,9,"searchVault")),n.zc("ngModel",t.searchText),n.Qb(9),n.zc("ngIf",t.isPaging()?t.pagedCiphers:t.ciphers),n.Qb(3),n.Ub("readonlyCipher",t.isReadOnly),n.Qb(2),n.zc("ngIf",!t.isReadOnly),n.Qb(2),n.zc("ngIf",t.collectionId&&!t.isCozyConnectors),n.Qb(2),n.zc("ngIf",!t.isReadOnly),n.Qb(2),n.zc("ngIf",t.isMenuOpened))},directives:[dr.b,gr,dr.f,dr.i,Dr.k,o.a,Dr.j,Ar,Dr.i,sd,rd,fr,Mr,bd],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Bd,[{type:n.l,args:[{selector:"app-vault-ciphers",templateUrl:"ciphers.component.html"}]}],(function(){return[{type:vc},{type:A.a},{type:I.a},{type:C}]}),{onDeletedCipher:[{type:n.O}],collectionId:[{type:n.D}],menu:[{type:n.eb,args:["menu"]}]});var Ld=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class _d{constructor(e,t,i,s){this.collectionService=e,this.platformUtilsService=t,this.i18nService=i,this.cipherService=s,this.allowSelectNone=!1,this.onSavedCollections=new n.t,this.collections=[]}ngOnInit(){return Ld(this,void 0,void 0,(function*(){yield this.load()}))}load(){return Ld(this,void 0,void 0,(function*(){this.cipherDomain=yield this.loadCipher(),this.collectionIds=this.loadCipherCollections(),this.cipher=yield this.cipherDomain.decrypt(),this.collections=yield this.loadCollections(),this.collections.forEach(e=>e.checked=!1),null!=this.collectionIds&&this.collections.forEach(e=>{e.checked=null!=this.collectionIds&&this.collectionIds.indexOf(e.id)>-1})}))}submit(){return Ld(this,void 0,void 0,(function*(){const e=this.collections.filter(e=>!!e.checked).map(e=>e.id);if(this.allowSelectNone||0!==e.length){this.cipherDomain.collectionIds=e;try{this.formPromise=this.saveCollections(),yield this.formPromise,this.onSavedCollections.emit(),this.platformUtilsService.showToast("success",null,this.i18nService.t("editedItem"))}catch(e){}}else this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("selectOneCollection"))}))}loadCipher(){return this.cipherService.get(this.cipherId)}loadCipherCollections(){return this.cipherDomain.collectionIds}loadCollections(){return Ld(this,void 0,void 0,(function*(){return(yield this.collectionService.getAllDecrypted()).filter(e=>!e.readOnly&&e.organizationId===this.cipher.organizationId)}))}saveCollections(){return this.cipherService.saveCollectionsWithServer(this.cipherDomain)}}function jd(e,t){1&e&&(n.hc(0,"div",13),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"noCollectionsInList")," "))}function Kd(e,t){if(1&e&&(n.hc(0,"div",15),n.Oc(1," "),n.hc(2,"label",16),n.Oc(3),n.gc(),n.Oc(4," "),n.hc(5,"input",17),n.oc("ngModelChange",(function(e){return t.$implicit.checked=e})),n.gc(),n.Oc(6," "),n.gc()),2&e){const e=t.$implicit,i=t.index;n.Qb(2),n.Bc("for","collection_",i,""),n.Qb(1),n.Pc(e.name),n.Qb(2),n.Bc("id","collection_",i,""),n.Bc("name","Collection[",i,"].Checked"),n.zc("ngModel",e.checked)}}function Hd(e,t){if(1&e&&(n.hc(0,"div",13),n.Oc(1," "),n.Mc(2,Kd,7,5,"div",14),n.Oc(3," "),n.gc()),2&e){const e=n.sc();n.Qb(2),n.zc("ngForOf",e.collections)}}_d.ɵfac=function(e){return new(e||_d)(n.cc(P),n.cc(A.a),n.cc(I.a),n.cc(C))},_d.ɵdir=n.Xb({type:_d,inputs:{cipherId:"cipherId",allowSelectNone:"allowSelectNone"},outputs:{onSavedCollections:"onSavedCollections"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(_d,[{type:n.q}],(function(){return[{type:P},{type:A.a},{type:I.a},{type:C}]}),{cipherId:[{type:n.D}],allowSelectNone:[{type:n.D}],onSavedCollections:[{type:n.O}]});class Wd extends _d{constructor(e,t,i,n){super(i,n,t,e)}}Wd.ɵfac=function(e){return new(e||Wd)(n.cc(C),n.cc(I.a),n.cc(P),n.cc(A.a))},Wd.ɵcmp=n.Wb({type:Wd,selectors:[["app-vault-collections"]],features:[n.Nb],decls:39,vars:15,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","collectionsTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content",3,"appApiAction","ngSubmit"],["form",""],[1,"modal-body"],[1,"box"],["id","collectionsTitle",1,"box-header"],["class","box-content",4,"ngIf"],[1,"modal-footer"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"],["type","button","data-dismiss","modal"],[1,"box-content"],["class","box-content-row box-content-row-checkbox","appBoxRow","",4,"ngFor","ngForOf"],["appBoxRow","",1,"box-content-row","box-content-row-checkbox"],[3,"for"],["type","checkbox",3,"id","ngModel","name","ngModelChange"]],template:function(e,t){if(1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"form",2,3),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",4),n.Oc(8," "),n.hc(9,"div",5),n.Oc(10," "),n.hc(11,"div",6),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.Mc(15,jd,3,3,"div",7),n.Oc(16," "),n.Mc(17,Hd,4,1,"div",7),n.Oc(18," "),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.hc(21,"div",8),n.Oc(22," "),n.hc(23,"button",9),n.tc(24,"i18n"),n.Oc(25," "),n.dc(26,"i",10),n.Oc(27," "),n.dc(28,"i",11),n.Oc(29," "),n.gc(),n.Oc(30," "),n.hc(31,"button",12),n.Oc(32),n.tc(33,"i18n"),n.gc(),n.Oc(34," "),n.gc(),n.Oc(35," "),n.gc(),n.Oc(36," "),n.gc(),n.Oc(37," "),n.gc(),n.Oc(38," ")),2&e){const e=n.Gc(5);n.Qb(4),n.zc("appApiAction",t.formPromise),n.Qb(8),n.Qc(" ",n.uc(13,9,"collections")," "),n.Qb(3),n.zc("ngIf",!t.collections||!t.collections.length),n.Qb(2),n.zc("ngIf",t.collections&&t.collections.length),n.Qb(6),n.Ac("appA11yTitle",n.uc(24,11,"save")),n.zc("disabled",e.loading),n.Qb(3),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading),n.Qb(4),n.Pc(n.uc(33,13,"cancel"))}},directives:[dr.p,dr.g,dr.h,hr,Dr.k,fr,Mr,Dr.j,pr,dr.a,dr.f,dr.i],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Wd,[{type:n.l,args:[{selector:"app-vault-collections",templateUrl:"collections.component.html"}]}],(function(){return[{type:C},{type:I.a},{type:P},{type:A.a}]}),null);class qd{}class Gd{}class Jd{}var Yd=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class $d{constructor(e,t,i){this.folderService=e,this.i18nService=t,this.platformUtilsService=i,this.onSavedFolder=new n.t,this.onDeletedFolder=new n.t,this.editMode=!1,this.folder=new te}ngOnInit(){return Yd(this,void 0,void 0,(function*(){yield this.init()}))}submit(){return Yd(this,void 0,void 0,(function*(){if(null==this.folder.name||""===this.folder.name)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("nameRequired")),!1;try{const e=yield this.folderService.encrypt(this.folder);return this.formPromise=this.folderService.saveWithServer(e),yield this.formPromise,this.platformUtilsService.showToast("success",null,this.i18nService.t(this.editMode?"editedFolder":"addedFolder")),this.onSavedFolder.emit(this.folder),!0}catch(e){}return!1}))}delete(){return Yd(this,void 0,void 0,(function*(){if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("deleteFolderConfirmation"),this.i18nService.t("deleteFolder"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{this.deletePromise=this.folderService.deleteWithServer(this.folder.id),yield this.deletePromise,this.platformUtilsService.showToast("success",null,this.i18nService.t("deletedFolder")),this.onDeletedFolder.emit(this.folder)}catch(e){}return!0}))}init(){return Yd(this,void 0,void 0,(function*(){if(this.editMode=null!=this.folderId,this.editMode){this.editMode=!0,this.title=this.i18nService.t("editFolder");const e=yield this.folderService.get(this.folderId);this.folder=yield e.decrypt()}else this.title=this.i18nService.t("addFolder")}))}}$d.ɵfac=function(e){return new(e||$d)(n.cc(T),n.cc(I.a),n.cc(A.a))},$d.ɵdir=n.Xb({type:$d,inputs:{folderId:"folderId"},outputs:{onSavedFolder:"onSavedFolder",onDeletedFolder:"onDeletedFolder"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb($d,[{type:n.q}],(function(){return[{type:T},{type:I.a},{type:A.a}]}),{folderId:[{type:n.D}],onSavedFolder:[{type:n.O}],onDeletedFolder:[{type:n.O}]});var Xd=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function Zd(e,t){if(1&e){const e=n.ic();n.hc(0,"button",18,19),n.oc("click",(function(){n.Hc(e);return n.sc().delete()})),n.tc(2,"i18n"),n.Oc(3," "),n.dc(4,"i",20),n.Oc(5," "),n.dc(6,"i",14),n.Oc(7," "),n.gc()}if(2&e){const e=n.Gc(1),t=n.sc();n.Ac("appA11yTitle",n.uc(2,5,"delete")),n.zc("disabled",e.loading)("appApiAction",t.deletePromise),n.Qb(4),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading)}}class eu extends $d{constructor(e,t,i,n,s,r){super(e,t,i),this.apiService=n,this.cryptoService=s,this.collectionService=r}isNameAvailableForCollection(e){return Xd(this,void 0,void 0,(function*(){return!(yield this.collectionService.getAllDecrypted()).map(e=>e.name).includes(e)}))}submit(){return Xd(this,void 0,void 0,(function*(){if(null==this.folder.name||""===this.folder.name)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("nameRequired")),!1;if(!(yield this.isNameAvailableForCollection(this.folder.name)))return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("nameAlreadyExists")),!1;try{const e=this.folder.name,t=yield this.cryptoService.makeShareKey(),i=t[0].encryptedString,n=(yield this.cryptoService.encrypt(e,t[1])).encryptedString;return yield this.apiService.postOrganization({name:e,collectionName:n,key:i}),this.platformUtilsService.showToast("success",null,this.i18nService.t(this.editMode?"editedFolder":"addedFolder")),this.onSavedFolder.emit(this.folder),!0}catch(e){this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("unexpectedError"))}return!1}))}}eu.ɵfac=function(e){return new(e||eu)(n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(O),n.cc(x.a),n.cc(P))},eu.ɵcmp=n.Wb({type:eu,selectors:[["app-folder-add-edit"]],features:[n.Nb],decls:51,vars:17,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","folderAddEditTitle",1,"modal","fade"],["role","document",1,"modal-dialog","modal-sm"],[1,"modal-content",3,"appApiAction","ngSubmit"],["form",""],[1,"modal-body"],[1,"box"],["id","folderAddEditTitle",1,"box-header"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","name"],["id","name","type","text","name","Name",3,"ngModel","appAutofocus","ngModelChange"],[1,"modal-footer"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"],["type","button","data-dismiss","modal"],[1,"right"],["appBlurClick","","type","button","class","danger",3,"appA11yTitle","disabled","appApiAction","click",4,"ngIf"],["appBlurClick","","type","button",1,"danger",3,"appA11yTitle","disabled","appApiAction","click"],["deleteBtn",""],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw",3,"hidden"]],template:function(e,t){if(1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"form",2,3),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",4),n.Oc(8," "),n.hc(9,"div",5),n.Oc(10," "),n.hc(11,"div",6),n.Oc(12),n.gc(),n.Oc(13," "),n.hc(14,"div",7),n.Oc(15," "),n.hc(16,"div",8),n.Oc(17," "),n.hc(18,"label",9),n.Oc(19),n.tc(20,"i18n"),n.gc(),n.Oc(21," "),n.hc(22,"input",10),n.oc("ngModelChange",(function(e){return t.folder.name=e})),n.gc(),n.Oc(23," "),n.gc(),n.Oc(24," "),n.gc(),n.Oc(25," "),n.gc(),n.Oc(26," "),n.gc(),n.Oc(27," "),n.hc(28,"div",11),n.Oc(29," "),n.hc(30,"button",12),n.tc(31,"i18n"),n.Oc(32," "),n.dc(33,"i",13),n.Oc(34," "),n.dc(35,"i",14),n.Oc(36," "),n.gc(),n.Oc(37," "),n.hc(38,"button",15),n.Oc(39),n.tc(40,"i18n"),n.gc(),n.Oc(41," "),n.hc(42,"div",16),n.Oc(43," "),n.Mc(44,Zd,8,7,"button",17),n.Oc(45," "),n.gc(),n.Oc(46," "),n.gc(),n.Oc(47," "),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.gc(),n.Oc(50," ")),2&e){const e=n.Gc(5);n.Qb(4),n.zc("appApiAction",t.formPromise),n.Qb(8),n.Qc(" ",t.title," "),n.Qb(7),n.Pc(n.uc(20,11,"name")),n.Qb(3),n.zc("ngModel",t.folder.name)("appAutofocus",!t.editMode),n.Qb(8),n.Ac("appA11yTitle",n.uc(31,13,"save")),n.zc("disabled",e.loading),n.Qb(3),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading),n.Qb(4),n.Pc(n.uc(40,15,"cancel")),n.Qb(5),n.zc("ngIf",t.editMode)}},directives:[dr.p,dr.g,dr.h,hr,pr,dr.b,dr.f,dr.i,gr,fr,Mr,Dr.k],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(eu,[{type:n.l,args:[{selector:"app-folder-add-edit",templateUrl:"folder-add-edit.component.html"}]}],(function(){return[{type:T},{type:I.a},{type:A.a},{type:O},{type:x.a},{type:P}]}),null);class tu{constructor(e){this.id=e.id,this.name=e.name,this.status=e.status,this.type=e.type,this.enabled=e.enabled,this.usePolicies=e.usePolicies,this.useGroups=e.useGroups,this.useDirectory=e.useDirectory,this.useEvents=e.useEvents,this.useTotp=e.useTotp,this.use2fa=e.use2fa,this.useApi=e.useApi,this.useBusinessPortal=e.useBusinessPortal,this.useSso=e.useSso,this.selfHost=e.selfHost,this.usersGetPremium=e.usersGetPremium,this.seats=e.seats,this.maxCollections=e.maxCollections,this.maxStorageGb=e.maxStorageGb,this.ssoBound=e.ssoBound,this.identifier=e.identifier,this.permissions=e.permissions,this.resetPasswordKey=e.resetPasswordKey,this.userId=e.userId}}class iu{constructor(e){null!=e&&(this.id=e.id,this.name=e.name,this.status=e.status,this.type=e.type,this.enabled=e.enabled,this.usePolicies=e.usePolicies,this.useGroups=e.useGroups,this.useDirectory=e.useDirectory,this.useEvents=e.useEvents,this.useTotp=e.useTotp,this.use2fa=e.use2fa,this.useApi=e.useApi,this.useBusinessPortal=e.useBusinessPortal,this.useSso=e.useSso,this.selfHost=e.selfHost,this.usersGetPremium=e.usersGetPremium,this.seats=e.seats,this.maxCollections=e.maxCollections,this.maxStorageGb=e.maxStorageGb,this.ssoBound=e.ssoBound,this.identifier=e.identifier,this.permissions=e.permissions,this.resetPasswordKey=e.resetPasswordKey,this.userId=e.userId)}get canAccess(){return this.type===od.Owner||this.enabled&&this.status===wc.Confirmed}get isManager(){return this.type===od.Manager||this.type===od.Owner||this.type===od.Admin}get isAdmin(){return this.type===od.Owner||this.type===od.Admin}get isOwner(){return this.type===od.Owner}get canAccessBusinessPortal(){return this.isAdmin||this.permissions.accessBusinessPortal}get canAccessEventLogs(){return this.isAdmin||this.permissions.accessEventLogs}get canAccessImportExport(){return this.isAdmin||this.permissions.accessImportExport}get canAccessReports(){return this.isAdmin||this.permissions.accessReports}get canManageAllCollections(){return this.isAdmin||this.permissions.manageAllCollections}get canManageAssignedCollections(){return this.isManager||this.permissions.manageAssignedCollections}get canManageGroups(){return this.isAdmin||this.permissions.manageGroups}get canManageSso(){return this.isAdmin||this.permissions.manageSso}get canManagePolicies(){return this.isAdmin||this.permissions.managePolicies}get canManageUsers(){return this.isAdmin||this.permissions.manageUsers}get isResetPasswordEnrolled(){return null!=this.resetPasswordKey}}var nu=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const su="userId",ru="userEmail",ou="securityStamp",cu="kdf",au="kdfIterations",lu="organizations_",du="emailVerified";var uu=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const hu="organizations_";class pu extends class{constructor(e,t){this.tokenService=e,this.storageService=t}setInformation(e,t,i,n){return this.email=t,this.userId=e,this.kdf=i,this.kdfIterations=n,Promise.all([this.storageService.save(ru,t),this.storageService.save(su,e),this.storageService.save(cu,i),this.storageService.save(au,n)])}setSecurityStamp(e){return this.stamp=e,this.storageService.save(ou,e)}setEmailVerified(e){return this.emailVerified=e,this.storageService.save(du,e)}getUserId(){return nu(this,void 0,void 0,(function*(){return null==this.userId&&(this.userId=yield this.storageService.get(su)),this.userId}))}getEmail(){return nu(this,void 0,void 0,(function*(){return null==this.email&&(this.email=yield this.storageService.get(ru)),this.email}))}getSecurityStamp(){return nu(this,void 0,void 0,(function*(){return null==this.stamp&&(this.stamp=yield this.storageService.get(ou)),this.stamp}))}getKdf(){return nu(this,void 0,void 0,(function*(){return null==this.kdf&&(this.kdf=yield this.storageService.get(cu)),this.kdf}))}getKdfIterations(){return nu(this,void 0,void 0,(function*(){return null==this.kdfIterations&&(this.kdfIterations=yield this.storageService.get(au)),this.kdfIterations}))}getEmailVerified(){return nu(this,void 0,void 0,(function*(){return null==this.emailVerified&&(this.emailVerified=yield this.storageService.get(du)),this.emailVerified}))}clear(){return nu(this,void 0,void 0,(function*(){const e=yield this.getUserId();yield Promise.all([this.storageService.remove(su),this.storageService.remove(ru),this.storageService.remove(ou),this.storageService.remove(cu),this.storageService.remove(au),this.clearOrganizations(e)]),this.userId=this.email=this.stamp=null,this.kdf=null,this.kdfIterations=null}))}isAuthenticated(){return nu(this,void 0,void 0,(function*(){if(null==(yield this.tokenService.getToken()))return!1;return null!=(yield this.getUserId())}))}canAccessPremium(){return nu(this,void 0,void 0,(function*(){if(!(yield this.isAuthenticated()))return!1;if(this.tokenService.getPremium())return!0;const e=yield this.getAllOrganizations();for(let t=0;t<e.length;t++)if(e[t].usersGetPremium&&e[t].enabled)return!0;return!1}))}getOrganization(e){return nu(this,void 0,void 0,(function*(){const t=yield this.getUserId(),i=yield this.storageService.get(lu+t);return null!=i&&i.hasOwnProperty(e)?new iu(i[e]):null}))}getAllOrganizations(){return nu(this,void 0,void 0,(function*(){const e=yield this.getUserId(),t=yield this.storageService.get(lu+e),i=[];for(const e in t)t.hasOwnProperty(e)&&i.push(new iu(t[e]));return i}))}replaceOrganizations(e){return nu(this,void 0,void 0,(function*(){const t=yield this.getUserId();yield this.storageService.save(lu+t,e)}))}clearOrganizations(e){return nu(this,void 0,void 0,(function*(){yield this.storageService.remove(lu+e)}))}}{constructor(e,t,i,n){super(e,t),this.cryptoService=i,this.apiService=n,this.localStorageService=t}upsertOrganization(e){return uu(this,void 0,void 0,(function*(){const t=yield this.getUserId(),i=yield this.getAllOrganizations();i.push(new iu(new tu(e)));const n={};i.forEach(e=>{n[e.id]=e}),yield this.localStorageService.save(hu+t,n)}))}deleteOrganization(e){return uu(this,void 0,void 0,(function*(){const t=yield this.getUserId(),i=(yield this.getAllOrganizations()).filter(t=>t.id!==e),n={};i.forEach(e=>{n[e.id]=e}),yield this.localStorageService.save(hu+t,n)}))}getOrganizationsWithoutKey(){return uu(this,void 0,void 0,(function*(){const e=yield this.getAllOrganizations(),t=yield this.cryptoService.getOrgKeys();return e.filter(e=>!t.has(e.id))}))}getOrganizationOwner(e){return uu(this,void 0,void 0,(function*(){const t=yield this.getOrganization(e);return(yield this.apiService.getOrganizationUsers(t.id)).data.find(e=>e.type===od.Owner)}))}}var gu=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class fu{constructor(e,t,i,s){this.collectionService=e,this.folderService=t,this.storageService=i,this.userService=s,this.showFolders=!0,this.showCollections=!0,this.showFavorites=!0,this.showTrash=!0,this.onAllClicked=new n.t,this.onFavoritesClicked=new n.t,this.onTrashClicked=new n.t,this.onCipherTypeClicked=new n.t,this.onFolderClicked=new n.t,this.onAddFolder=new n.t,this.onEditFolder=new n.t,this.onCollectionClicked=new n.t,this.loaded=!1,this.cipherType=B.a,this.selectedAll=!1,this.selectedFavorites=!1,this.selectedTrash=!1,this.selectedType=null,this.selectedFolder=!1,this.selectedFolderId=null,this.selectedCollectionId=null}load(e=!0){return gu(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();this.collapsedGroupingsKey=Pr.a.collapsedGroupingsKey+"_"+t;const i=yield this.storageService.get(this.collapsedGroupingsKey);this.collapsedGroupings=null==i?new Set:new Set(i),yield this.loadFolders(),yield this.loadCollections(),e&&(this.loaded=!0)}))}loadCollections(e){return gu(this,void 0,void 0,(function*(){if(!this.showCollections)return;const t=yield this.collectionService.getAllDecrypted();this.collections=null!=e?t.filter(t=>t.organizationId===e):t,this.nestedCollections=yield this.collectionService.getAllNested(this.collections)}))}loadFolders(){return gu(this,void 0,void 0,(function*(){this.showFolders&&(this.folders=yield this.folderService.getAllDecrypted(),this.nestedFolders=yield this.folderService.getAllNested())}))}selectAll(){this.clearSelections(),this.selectedAll=!0,this.onAllClicked.emit()}selectFavorites(){this.clearSelections(),this.selectedFavorites=!0,this.onFavoritesClicked.emit()}selectTrash(){this.clearSelections(),this.selectedTrash=!0,this.onTrashClicked.emit()}selectType(e){this.clearSelections(),this.selectedType=e,this.onCipherTypeClicked.emit(e)}selectFolder(e){this.clearSelections(),this.selectedFolder=!0,this.selectedFolderId=e.id,this.onFolderClicked.emit(e)}addFolder(){this.onAddFolder.emit()}editFolder(e){this.onEditFolder.emit(e)}selectCollection(e){this.clearSelections(),this.selectedCollectionId=e.id,this.onCollectionClicked.emit(e)}clearSelections(){this.selectedAll=!1,this.selectedFavorites=!1,this.selectedTrash=!1,this.selectedType=null,this.selectedFolder=!1,this.selectedFolderId=null,this.selectedCollectionId=null}collapse(e,t=""){if(null==e.id)return;const i=t+e.id;this.isCollapsed(e,t)?this.collapsedGroupings.delete(i):this.collapsedGroupings.add(i),this.storageService.save(this.collapsedGroupingsKey,this.collapsedGroupings)}isCollapsed(e,t=""){return this.collapsedGroupings.has(t+e.id)}}fu.ɵfac=function(e){return new(e||fu)(n.cc(P),n.cc(T),n.cc(wr.a),n.cc(z.a))},fu.ɵdir=n.Xb({type:fu,inputs:{showFolders:"showFolders",showCollections:"showCollections",showFavorites:"showFavorites",showTrash:"showTrash"},outputs:{onAllClicked:"onAllClicked",onFavoritesClicked:"onFavoritesClicked",onTrashClicked:"onTrashClicked",onCipherTypeClicked:"onCipherTypeClicked",onFolderClicked:"onFolderClicked",onAddFolder:"onAddFolder",onEditFolder:"onEditFolder",onCollectionClicked:"onCollectionClicked"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(fu,[{type:n.q}],(function(){return[{type:P},{type:T},{type:wr.a},{type:z.a}]}),{showFolders:[{type:n.D}],showCollections:[{type:n.D}],showFavorites:[{type:n.D}],showTrash:[{type:n.D}],onAllClicked:[{type:n.O}],onFavoritesClicked:[{type:n.O}],onTrashClicked:[{type:n.O}],onCipherTypeClicked:[{type:n.O}],onFolderClicked:[{type:n.O}],onAddFolder:[{type:n.O}],onEditFolder:[{type:n.O}],onCollectionClicked:[{type:n.O}]});class yu{constructor(e,t,i){this.children=[],this.parent=i,this.node=e,this.node.name=t}}class mu{static nestedTraverse(e,t,i,n,s,r){if(i.length<=t)return;const o=t===i.length-1,c=i[t];for(let a=0;a<e.length;a++)if(e[a].node.name===i[t])return o&&e[a].node.id!==n.id?void e.push(new yu(n,c,s)):void mu.nestedTraverse(e[a].children,t+1,i,n,e[a].node,r);if(0===e.filter(e=>e.node.name===c).length){if(o)return void e.push(new yu(n,c,s));const a=i[t]+r+i[t+1];mu.nestedTraverse(e,0,[a,...i.slice(t+2)],n,s,r)}}static getTreeNodeObject(e,t){for(let i=0;i<e.length;i++){if(e[i].node.id===t)return e[i];if(null!=e[i].children){const n=mu.getTreeNodeObject(e[i].children,t);if(null!==n)return n}}return null}}var vu=i(1378),bu=i(292),wu=i(61),Ou=i(548),Su={insert:"head",singleton:!1},Cu=(Ii()(Ou.a,Su),Ou.a.locals,function(e){var t=e.ownerName,i=e.fingerprintPhrase,n=e.onClose,s=Object(oi.e)().t,r=s("ConfirmYourIdentityModal.title"),o=s("ConfirmYourIdentityModal.instruction",{ownerName:t}),c=s("ConfirmYourIdentityModal.instruction2",{ownerName:t}),a=N.a.createElement(N.a.Fragment,null,N.a.createElement("div",null,N.a.createElement(wu.a,{variant:"body1"},o),N.a.createElement(bu.a,{className:"ConfirmYourIdentityModal__fingerprint",elevation:1},N.a.createElement(wu.a,{variant:"body1"},i)),N.a.createElement(wu.a,{variant:"body1"},c))),l=N.a.createElement(pi.c,{theme:"primary",label:s("ConfirmYourIdentityModal.confirm"),onClick:n});return N.a.createElement(vu.a,{disableEnforceFocus:!0,open:!0,onClose:n,title:r,content:a,actions:l})}),Pu=function(e){var t=e.reactWrapperProps,i=e.ownerName,n=e.fingerprintPhrase,s=e.showModal,r=void 0!==s&&s,o=e.closeModal;return N.a.createElement($s,{reactWrapperProps:t},r&&N.a.createElement(Cu,{ownerName:i,fingerprintPhrase:n,onClose:o}))};Pu.propTypes={reactWrapperProps:Gs.isRequired,ownerName:Xt.a.string.isRequired,fingerprintPhrase:Xt.a.string.isRequired,showModal:Xt.a.bool.isRequired,closeModal:Xt.a.func.isRequired};var xu=Pu,ku=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Tu extends Jt{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g){super(e,t,i,n,s,r,o,c,a,l,d,u,h,p),this.localUserService=c,this.broadcasterService=g,this.showModal=!1,this.organizationId=null}ngOnInit(){super.ngOnInit(),this.broadcasterService.subscribe("ConfirmYourIdentityComponent",e=>{switch(e.command){case"showConfirmYourIdentityDialog":this.organizationId=e.organizationId,this.showModal=!0,this.renderReact()}})}getProps(){return ku(this,void 0,void 0,(function*(){const e=yield this.getReactWrapperProps(),t=yield this.userService.getUserId(),i=yield this.cryptoService.getFingerprint(t);return{reactWrapperProps:e,ownerName:(yield this.localUserService.getOrganizationOwner(this.organizationId)).name,fingerprintPhrase:i.join("-"),showModal:this.showModal,closeModal:this.closeModal.bind(this)}}))}renderReact(){return ku(this,void 0,void 0,(function*(){this.organizationId&&R.render(U.createElement(xu,yield this.getProps()),this.getRootDomNode())}))}closeModal(){this.showModal=!1,this.renderReact()}}Tu.ɵfac=function(e){return new(e||Tu)(n.cc(y),n.cc(O),n.cc(k),n.cc(S),n.cc(M),n.cc(x.a),n.cc(C),n.cc(pu),n.cc(P),n.cc(D),n.cc(E.a),n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(Sr))},Tu.ɵcmp=n.Wb({type:Tu,selectors:[["app-confirm-your-identity-dialog"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Tu,[{type:n.l,args:[{selector:"app-confirm-your-identity-dialog",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],(function(){return[{type:y},{type:O},{type:k},{type:S},{type:M},{type:x.a},{type:C},{type:pu},{type:P},{type:D},{type:E.a},{type:T},{type:I.a},{type:A.a},{type:Sr}]}),null);var Iu=i(21),Du=i.n(Iu),Au=i(887),Mu=["reactWrapperProps"],zu=Object(_i.a)(),Eu=function(e){var t=Object(oi.e)().t,i=Li()[zu.name];if(void 0===i)return null;var n=i.storeUrl,s=sn[zu.name]?function(){return N.a.createElement("img",{src:sn[zu.name]})}:null,r=t("Vault.extension.cta.".concat(zu.name));return N.a.createElement(Au.a,Ui()({label:r,href:n,icon:s},e))},Uu=function(e){var t=e.reactWrapperProps,i=Du()(e,Mu);return is()!==es?null:N.a.createElement($s,{reactWrapperProps:t},N.a.createElement(Eu,i))};Uu.propTypes={reactWrapperProps:Gs.isRequired};var Nu=Uu,Ru=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Fu extends Jt{getProps(){return Ru(this,void 0,void 0,(function*(){return{reactWrapperProps:yield this.getReactWrapperProps()}}))}renderReact(){return Ru(this,void 0,void 0,(function*(){R.render(U.createElement(Nu,yield this.getProps()),this.getRootDomNode())}))}}Fu.ɵfac=function(e){return Qu(e||Fu)},Fu.ɵcmp=n.Wb({type:Fu,selectors:[["app-button-extension"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2});const Qu=n.jc(Fu);("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Fu,[{type:n.l,args:[{selector:"app-button-extension",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],null,null);var Vu=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Bu=function(e){return{active:e}};function Lu(e,t){if(1&e){const e=n.ic();n.rc(),n.qc(),n.hc(0,"li",4),n.Oc(1," "),n.hc(2,"a",5),n.oc("click",(function(){n.Hc(e);const t=n.sc();return t.selectType(t.cipherType.SecureNote)})),n.Oc(3," "),n.rc(),n.hc(4,"svg",36),n.Oc(5," "),n.hc(6,"g",9),n.Oc(7," "),n.dc(8,"path",37),n.Oc(9," "),n.dc(10,"path",38),n.Oc(11," "),n.gc(),n.Oc(12," "),n.gc(),n.Oc(13),n.tc(14,"i18n"),n.gc(),n.Oc(15," "),n.gc()}if(2&e){const e=n.sc();n.zc("ngClass",n.Dc(4,Bu,e.selectedType===e.cipherType.SecureNote)),n.Qb(13),n.Qc("  ",n.uc(14,2,"typeSecureNote")," ")}}function _u(e,t){1&e&&(n.rc(),n.qc(),n.hc(0,"p",39),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"loading")))}function ju(e,t){if(1&e){const e=n.ic();n.hc(0,"button",43),n.oc("click",(function(){n.Hc(e);return n.sc(2).addFolder()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",44),n.Oc(4," "),n.gc()}2&e&&n.Ac("appA11yTitle",n.uc(1,1,"addFolder"))}const Ku=function(e,t){return{"fa-caret-right":e,"fa-caret-down":t}};function Hu(e,t){if(1&e){const e=n.ic();n.hc(0,"i",51),n.oc("click",(function(){n.Hc(e);const t=n.sc().$implicit;return n.sc(3).collapse(t.node)})),n.tc(1,"i18n"),n.gc()}if(2&e){const e=n.sc().$implicit,t=n.sc(3);n.Ac("title",n.uc(1,2,"toggleCollapse")),n.zc("ngClass",n.Ec(4,Ku,t.isCollapsed(e.node),!t.isCollapsed(e.node)))}}function Wu(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.ec())}const qu=function(e){return{$implicit:e}};function Gu(e,t){if(1&e&&(n.hc(0,"ul",52),n.Oc(1," "),n.Mc(2,Wu,2,0,"ng-container",53),n.Oc(3," "),n.gc()),2&e){const e=n.sc().$implicit;n.sc(2);const t=n.Gc(14);n.Qb(2),n.zc("ngTemplateOutlet",t)("ngTemplateOutletContext",n.Dc(2,qu,e.children))}}const Ju=function(e,t){return{active:e,orgNoKey:t}};function Yu(e,t){if(1&e){const e=n.ic();n.hc(0,"li",46),n.Oc(1," "),n.hc(2,"a",5),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).selectCollection(i.node)})),n.Oc(3," "),n.Mc(4,Hu,2,7,"i",47),n.Oc(5," "),n.dc(6,"app-cozy-icon",48),n.Oc(7),n.gc(),n.Oc(8," "),n.hc(9,"button",43),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).deleteCollection(i.node)})),n.tc(10,"i18n"),n.Oc(11," "),n.dc(12,"app-cozy-icon",49),n.Oc(13," "),n.gc(),n.Oc(14," "),n.Mc(15,Gu,4,4,"ul",50),n.Oc(16," "),n.gc()}if(2&e){const e=t.$implicit,i=n.sc(3);n.zc("ngClass",n.Ec(7,Ju,e.node.id===i.selectedCollectionId,i.isOrgWithNoKey(e.node))),n.Qb(4),n.zc("ngIf",e.children.length),n.Qb(3),n.Qc("  ",e.node.name," "),n.Qb(2),n.Ac("appA11yTitle",n.uc(10,5,"deleteFolder")),n.Qb(6),n.zc("ngIf",e.children.length&&!i.isCollapsed(e.node))}}function $u(e,t){if(1&e&&(n.Oc(0," "),n.Mc(1,Yu,17,10,"li",45),n.Oc(2," ")),2&e){const e=t.$implicit;n.Qb(1),n.zc("ngForOf",e)}}function Xu(e,t){1&e&&(n.fc(0),n.Oc(1," "),n.ec())}function Zu(e,t){if(1&e&&(n.fc(0),n.Oc(1," "),n.Mc(2,Xu,2,0,"ng-container",53),n.Oc(3," "),n.ec()),2&e){n.sc();const e=n.Gc(14),t=n.sc();n.Qb(2),n.zc("ngTemplateOutlet",e)("ngTemplateOutletContext",n.Dc(2,qu,t.nestedCollections))}}function eh(e,t){if(1&e){const e=n.ic();n.rc(),n.qc(),n.fc(0),n.Oc(1," "),n.hc(2,"div",29),n.Oc(3," "),n.hc(4,"h2"),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.Mc(8,ju,5,3,"button",40),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"ul"),n.Oc(12," "),n.Mc(13,$u,3,1,"ng-template",null,41,n.Nc),n.Oc(15," "),n.Mc(16,Zu,4,4,"ng-container",33),n.Oc(17," "),n.hc(18,"li",4),n.Oc(19," "),n.hc(20,"a",5),n.oc("click",(function(){n.Hc(e);return n.sc().selectTrash()})),n.Oc(21," "),n.dc(22,"app-cozy-icon",42),n.Oc(23),n.tc(24,"i18n"),n.gc(),n.Oc(25," "),n.gc(),n.Oc(26," "),n.gc(),n.Oc(27," "),n.ec()}if(2&e){const e=n.sc();n.Qb(5),n.Pc(n.uc(6,5,"folders")),n.Qb(3),n.zc("ifFlag",e.CAN_SHARE_ORGANIZATION),n.Qb(8),n.zc("ifFlag",e.CAN_SHARE_ORGANIZATION),n.Qb(2),n.zc("ngClass",n.Dc(9,Bu,e.selectedTrash)),n.Qb(5),n.Qc("  ",n.uc(24,7,"trash")," ")}}function th(e,t){if(1&e){const e=n.ic();n.rc(),n.qc(),n.fc(0),n.Oc(1," "),n.hc(2,"li"),n.Oc(3," "),n.hc(4,"a",5),n.oc("click",(function(){n.Hc(e);return n.sc().showFingerprint()})),n.Oc(5," "),n.dc(6,"app-cozy-icon",54),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.ec()}2&e&&(n.Qb(7),n.Qc("  ",n.uc(8,1,"fingerprintPhrase")," "))}class ih extends fu{constructor(e,t,i,s,r,o){super(e,t,i,s),this.localUserService=s,this.broadcasterService=r,this.cipherService=o,this.onOrganizationWithoutKeyClicked=new n.t,this.onImportClicked=new n.t,this.importSelected=!1,this.CAN_SHARE_ORGANIZATION="passwords.can-share-organizations",this.prevSelection=new Object}load(e=!0){const t=Object.create(null,{load:{get:()=>super.load}});return Vu(this,void 0,void 0,(function*(){const i=(yield this.cipherService.getAllDecrypted()).findIndex(e=>2===e.type&&!e.isDeleted);this.hasNotes=i>-1,t.load.call(this,e)}))}lock(){this.broadcasterService.send({command:"lockVault"})}logout(){this.broadcasterService.send({command:"logout"})}clearSelections(){this.prevSelection.selectedAll=this.selectedAll,this.prevSelection.selectedFavorites=this.selectedFavorites,this.prevSelection.selectedTrash=this.selectedTrash,this.prevSelection.selectedType=this.selectedType,this.prevSelection.selectedFolder=this.selectedFolder,this.prevSelection.selectedFolderId=this.selectedFolderId,this.prevSelection.selectedCollectionId=this.selectedCollectionId,this.importSelected=!1,super.clearSelections()}selectImport(){this.clearSelections(),this.importSelected=!0,this.onImportClicked.emit()}revertSelection(){this.selectedAll=this.prevSelection.selectedAll,this.selectedFavorites=this.prevSelection.selectedFavorites,this.selectedTrash=this.prevSelection.selectedTrash,this.selectedType=this.prevSelection.selectedType,this.selectedFolder=this.prevSelection.selectedFolder,this.selectedFolderId=this.prevSelection.selectedFolderId,this.selectedCollectionId=this.prevSelection.selectedCollectionId}showFingerprint(){return Vu(this,void 0,void 0,(function*(){this.broadcasterService.send({command:"showFingerprintPhrase"})}))}deleteCollection(e){return Vu(this,void 0,void 0,(function*(){this.broadcasterService.send({command:"exportVault"})}))}loadCollections(e){const t=Object.create(null,{loadCollections:{get:()=>super.loadCollections}});return Vu(this,void 0,void 0,(function*(){yield t.loadCollections.call(this,e);(yield this.localUserService.getOrganizationsWithoutKey()).forEach(e=>{const t=new X;t.id=e.id,t.organizationId=e.id;const i=null!=e.name?e.name.replace(/^\/+|\/+$/g,"").split("/"):[];mu.nestedTraverse(this.nestedCollections,0,i,t,null,"/")})}))}selectCollection(e){this.isOrgWithNoKey(e)?this.showConfirmIdentityForOrganization(e.organizationId):super.selectCollection(e)}showConfirmIdentityForOrganization(e){this.broadcasterService.send({command:"showConfirmYourIdentityDialog",organizationId:e})}isOrgWithNoKey(e){return e.id===e.organizationId}}ih.ɵfac=function(e){return new(e||ih)(n.cc(P),n.cc(T),n.cc(wr.a),n.cc(pu),n.cc(Sr),n.cc(C))},ih.ɵcmp=n.Wb({type:ih,selectors:[["app-vault-groupings"]],outputs:{onOrganizationWithoutKeyClicked:"onOrganizationWithoutKeyClicked",onImportClicked:"onImportClicked"},features:[n.Nb],decls:153,vars:46,consts:[[1,"mac-bar"],[1,"content"],[1,"inner-content"],[1,"sr-only"],[3,"ngClass"],["href","#","appStopClick","","appBlurClick","",3,"click"],["xmlns","http://www.w3.org/2000/svg","viewBox","0 0 24 24","enable-background","new 0 0 24 24","fill","#297EF2",1,"icon-type"],["d","M 7 7 C 4.2545455 7 2 9.2545455 2 12 C 2 14.8 4.2 17 7 17 C 9 17 10.30625 15.9875 11.40625 14.6875 C 11.00625 14.0875 10.6125 13.6 10.3125 13 C 10.3125 13 10.2875 12.90625 10.1875 12.90625 C 9.2875 14.10625 8.4 15 7 15 C 5.3 15 4 13.7 4 12 C 4 10.345455 5.3454545 9 7 9 C 7.9833333 9 8.6281399 9.3417643 9.28125 9.96875 C 9.9343601 10.595736 10.53125 11.53125 11.15625 12.53125 C 11.78125 13.53125 12.43436 14.595736 13.34375 15.46875 C 14.25314 16.341764 15.483333 17 17 17 C 19.745455 17 22 14.745455 22 12 C 22 9.2 19.8 7 17 7 C 15 7 13.69375 8.0125 12.59375 9.3125 C 12.99375 9.9125 13.2875 10.40625 13.6875 10.90625 C 13.6875 11.00625 13.8125 10.99375 13.8125 11.09375 C 14.7125 9.79375 15.6 9 17 9 C 18.7 9 20 10.3 20 12 C 20 13.654545 18.654545 15 17 15 C 16.016667 15 15.37186 14.658236 14.71875 14.03125 C 14.06564 13.404264 13.46875 12.46875 12.84375 11.46875 C 12.21875 10.46875 11.56564 9.4042643 10.65625 8.53125 C 9.7468601 7.6582357 8.5166667 7 7 7 z","overflow","visible","enable-background","accumulate","font-family","Bitstream Vera Sans",2,"text-indent","0","text-align","start","line-height","normal","text-transform","none","block-progression","tb","-inkscape-font-specification","Bitstream Vera Sans"],["xmlns","http://www.w3.org/2000/svg","viewBox","0 0 32 32",1,"icon-type"],["fill","none","fill-rule","evenodd"],["fill","#BFC3C7","d","M22 0l.28.004a10 10 0 019.716 9.716L32 10l-.004.28c-.146 5.3-4.416 9.57-9.716 9.716L22 20l-.28-.004a9.96 9.96 0 01-3.421-.703L7.179 30.782A4 4 0 014.305 32H2a2 2 0 01-2-2v-3.793c0-.453.18-.887.5-1.207l.047-.047a2 2 0 011.085-.558l.888-.148A1.77 1.77 0 004 22.5V22a1 1 0 011-1h.5A1.5 1.5 0 007 19.5V19a1 1 0 011-1h.75c.69 0 1.25-.56 1.25-1.25v-.422a2 2 0 01.586-1.414l1.882-1.882A9.993 9.993 0 0112 10c0-5.523 4.477-10 10-10zm.142 4c-.466 0-.933.055-1.389.166-1.465.357-2.005 2.137-1.044 3.251l.105.113 4.656 4.656c1.065 1.065 2.87.61 3.322-.79l.042-.149a5.852 5.852 0 00-1.36-5.332l-.19-.199a5.833 5.833 0 00-3.861-1.71L22.142 4z"],["fill","#95999D","d","M15.447 17.554c.542.47 1.136.884 1.77 1.23L4 32H2c-.293 0-.572-.063-.823-.177l14.27-14.27z"],["xmlns","http://www.w3.org/2000/svg",0,"xmlns","xlink","http://www.w3.org/1999/xlink","viewBox","0 0 32 32",1,"icon-type"],["id","a","d","M0 0h32v22H0z"],["id","c","d","M0 22h32V0H0z"],["fill","none","fill-rule","evenodd","transform","translate(0 5)"],["id","b","fill","#fff"],[0,"xlink","href","#a"],["fill","#16B52D","d","M0 1.991C0 .891.889.001 2.001.001h27.998C31.104 0 32 .888 32 1.99V20.01A1.992 1.992 0 0 1 29.999 22H2.001A1.995 1.995 0 0 1 0 20.01V1.99z","mask","url(#b)"],["id","d","fill","#fff"],[0,"xlink","href","#c"],["fill","#8EE39B","d","M2 20h28V2H2z","mask","url(#d)"],["fill","#16B52D","d","M16 6.005a5 5 0 1 1 0 10 5 5 0 0 1 0-10zM7 9a2.002 2.002 0 0 1 0 4.003A2 2 0 0 1 7 9zm18 0a2.002 2.002 0 0 1 0 4.003A2 2 0 0 1 25 9z","mask","url(#d)"],["xmlns","http://www.w3.org/2000/svg","viewBox","0 0 32 24",1,"icon-type"],["fill","#FFD799","d","M32 21.995A1.997 1.997 0 0 1 30.002 24H24v-2.499c0-.829-.666-1.5-1.5-1.5-.829 0-1.5.678-1.5 1.5v2.5H11v-2.5c0-.829-.666-1.5-1.5-1.5-.829 0-1.5.678-1.5 1.5v2.5H1.998A2.002 2.002 0 0 1 0 21.994V2.005C0 .897.889 0 2.001 0h27.997C31.104 0 32 .897 32 2.005v19.99z"],["fill","#FF9300","d","M12 11.5c1.5 0 3 2.25 3 3s0 1.5-.75 1.5H3.75C3 16 3 15.25 3 14.5s1.5-3 3-3 .75.75 3 .75 1.5-.75 3-.75zM28 14v1H17v-1h11zm0-3v1H17v-1h11zM9 4c1.657 0 3 1.511 3 3.375s-1.343 3.375-3 3.375-3-1.511-3-3.375S7.343 4 9 4zm19 4v1H17V8h11zm-5-3v1h-6V5h6z"],[3,"ngClass",4,"ngIf"],["class","text-muted",4,"ngIf"],[4,"ngIf"],[1,"heading"],["xmlns","http://www.w3.org/2000/svg","viewBox","-4 -4 24 24","fill","#95999d",1,"icon-type"],["id","icons/16/icon-upload","stroke","none","stroke-width","1","fill-rule","evenodd"],["d","M9,7.41421356 L9,15 C9,15.5522847 8.55228475,16 8,16 C7.44771525,16 7,15.5522847 7,15 L7,7.41421356 L5.70710678,8.70710678 C5.31658249,9.09763107 4.68341751,9.09763107 4.29289322,8.70710678 C3.90236893,8.31658249 3.90236893,7.68341751 4.29289322,7.29289322 L7.29289322,4.29289322 C7.68341751,3.90236893 8.31658249,3.90236893 8.70710678,4.29289322 L11.7071068,7.29289322 C12.0976311,7.68341751 12.0976311,8.31658249 11.7071068,8.70710678 C11.3165825,9.09763107 10.6834175,9.09763107 10.2928932,8.70710678 L9,7.41421356 Z M1,3 C0.44771525,3 0,2.55228475 0,2 C0,1.44771525 0.44771525,1 1,1 L15,1 C15.5522847,1 16,1.44771525 16,2 C16,2.55228475 15.5522847,3 15,3 L1,3 Z","id","Shape"],[4,"ifFlag"],["xmlns","http://www.w3.org/2000/svg","viewBox","-4 -4 24 24",1,"icon-type"],["fill","#95999d","fill-rule","evenodd","d","M2 15.005v-8.01C2 6.455 2.448 6 3 6h1V4c0-2.206 1.794-4 4-4 2.205 0 4 1.794 4 4v2h1c.556 0 1 .446 1 .995v8.01c0 .54-.449.995-1.002.995H3.002A1.003 1.003 0 0 1 2 15.005zM6 4.5C6 3.122 6.897 2 8 2s2 1.122 2 2.5V6H6V4.5zm2 4c.826 0 1.5.672 1.5 1.5 0 .552-.305 1.032-.75 1.29v2.46a.751.751 0 0 1-1.5 0v-2.46A1.49 1.49 0 0 1 6.5 10 1.5 1.5 0 0 1 8 8.5z"],["xmlns","http://www.w3.org/2000/svg","width","32","height","32","viewBox","0 0 32 32",1,"icon-type"],["fill","#ACF5F7","d","M3 2.002C3 .896 3.89 0 4.997 0H22l7 7v22.996C29 31.103 28.105 32 27.003 32H4.997C3.894 32 3 31.11 3 29.998V2.002z"],["fill","#0DCBCF","d","M21.5 0c-.276 0-.5.23-.5.5V8h7.5c.276 0 .5-.232.5-.5V7l-7-7h-.5zM19 23v2H9v-2h10zm4-4v2H9v-2h14zm-2-4v2H9v-2h12zm2-4v2H9v-2h14z"],[1,"text-muted"],["appBlurClick","",3,"appA11yTitle","click",4,"ifFlag"],["recursiveCollections",""],["ref","trash","width","24","height","16"],["appBlurClick","",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-plus","fa-fw"],["class","navbar-entry",3,"ngClass",4,"ngFor","ngForOf"],[1,"navbar-entry",3,"ngClass"],["class","fa-fw fa","aria-hidden","true","appStopProp","",3,"title","ngClass","click",4,"ngIf"],["ref","folder","width","24","height","16"],["ref","trash","width","20","height","16"],["class","fa-ul",4,"ngIf"],["aria-hidden","true","appStopProp","",1,"fa-fw","fa",3,"title","ngClass","click"],[1,"fa-ul"],[4,"ngTemplateOutlet","ngTemplateOutletContext"],["ref","shield","width","24","height","16"]],template:function(e,t){1&e&&(n.dc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"div",2),n.Oc(5," "),n.hc(6,"h2",3),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.hc(10,"ul"),n.Oc(11," "),n.gc(),n.Oc(12," "),n.hc(13,"h2"),n.Oc(14),n.tc(15,"i18n"),n.gc(),n.Oc(16," "),n.hc(17,"ul"),n.Oc(18," "),n.hc(19,"li",4),n.Oc(20," "),n.hc(21,"a",5),n.oc("click",(function(){return t.selectAll()})),n.Oc(22," "),n.rc(),n.hc(23,"svg",6),n.Oc(24," "),n.dc(25,"path",7),n.Oc(26," "),n.gc(),n.Oc(27),n.tc(28,"i18n"),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.qc(),n.hc(31,"li",4),n.Oc(32," "),n.hc(33,"a",5),n.oc("click",(function(){return t.selectType(t.cipherType.Login)})),n.Oc(34," "),n.rc(),n.hc(35,"svg",8),n.Oc(36," "),n.hc(37,"g",9),n.Oc(38," "),n.dc(39,"path",10),n.Oc(40," "),n.dc(41,"path",11),n.Oc(42," "),n.gc(),n.Oc(43," "),n.gc(),n.Oc(44),n.tc(45,"i18n"),n.gc(),n.Oc(46," "),n.gc(),n.Oc(47," "),n.qc(),n.hc(48,"li",4),n.Oc(49," "),n.hc(50,"a",5),n.oc("click",(function(){return t.selectType(t.cipherType.Card)})),n.Oc(51," "),n.rc(),n.hc(52,"svg",12),n.Oc(53," "),n.hc(54,"defs"),n.Oc(55," "),n.dc(56,"path",13),n.Oc(57," "),n.dc(58,"path",14),n.Oc(59," "),n.gc(),n.Oc(60," "),n.hc(61,"g",15),n.Oc(62," "),n.hc(63,"mask",16),n.Oc(64," "),n.dc(65,"use",17),n.Oc(66," "),n.gc(),n.Oc(67," "),n.dc(68,"path",18),n.Oc(69," "),n.hc(70,"mask",19),n.Oc(71," "),n.dc(72,"use",20),n.Oc(73," "),n.gc(),n.Oc(74," "),n.dc(75,"path",21),n.Oc(76," "),n.dc(77,"path",22),n.Oc(78," "),n.gc(),n.Oc(79," "),n.gc(),n.Oc(80),n.tc(81,"i18n"),n.gc(),n.Oc(82," "),n.gc(),n.Oc(83," "),n.qc(),n.hc(84,"li",4),n.Oc(85," "),n.hc(86,"a",5),n.oc("click",(function(){return t.selectType(t.cipherType.Identity)})),n.Oc(87," "),n.rc(),n.hc(88,"svg",23),n.Oc(89," "),n.hc(90,"g",9),n.Oc(91," "),n.dc(92,"path",24),n.Oc(93," "),n.dc(94,"path",25),n.Oc(95," "),n.gc(),n.Oc(96," "),n.gc(),n.Oc(97),n.tc(98,"i18n"),n.gc(),n.Oc(99," "),n.gc(),n.Oc(100," "),n.Mc(101,Lu,16,6,"li",26),n.Oc(102," "),n.gc(),n.Oc(103," "),n.Mc(104,_u,3,3,"p",27),n.Oc(105," "),n.Mc(106,eh,28,11,"ng-container",28),n.Oc(107," "),n.qc(),n.hc(108,"div",29),n.Oc(109," "),n.hc(110,"h2"),n.Oc(111),n.tc(112,"i18n"),n.gc(),n.Oc(113," "),n.gc(),n.Oc(114," "),n.hc(115,"ul"),n.Oc(116," "),n.hc(117,"li",4),n.Oc(118," "),n.hc(119,"a",5),n.oc("click",(function(){return t.selectImport()})),n.Oc(120," "),n.rc(),n.hc(121,"svg",30),n.Oc(122," "),n.hc(123,"g",31),n.Oc(124," "),n.dc(125,"path",32),n.Oc(126," "),n.gc(),n.Oc(127," "),n.gc(),n.Oc(128),n.tc(129,"i18n"),n.gc(),n.Oc(130," "),n.gc(),n.Oc(131," "),n.Mc(132,th,11,3,"ng-container",33),n.Oc(133," "),n.qc(),n.hc(134,"li"),n.Oc(135," "),n.hc(136,"a",5),n.oc("click",(function(){return t.logout()})),n.Oc(137," "),n.rc(),n.hc(138,"svg",34),n.Oc(139," "),n.dc(140,"path",35),n.Oc(141," "),n.gc(),n.Oc(142),n.tc(143,"i18n"),n.gc(),n.Oc(144," "),n.gc(),n.Oc(145," "),n.gc(),n.Oc(146," "),n.gc(),n.Oc(147," "),n.qc(),n.dc(148,"app-confirm-your-identity-dialog"),n.Oc(149," "),n.dc(150,"app-button-extension"),n.Oc(151," "),n.gc(),n.Oc(152," ")),2&e&&(n.Qb(7),n.Pc(n.uc(8,18,"filters")),n.Qb(7),n.Pc(n.uc(15,20,"types")),n.Qb(5),n.zc("ngClass",n.Dc(36,Bu,t.selectedAll)),n.Qb(8),n.Qc("  ",n.uc(28,22,"allItems")," "),n.Qb(4),n.zc("ngClass",n.Dc(38,Bu,t.selectedType===t.cipherType.Login)),n.Qb(13),n.Qc(" ",n.uc(45,24,"typeLogin")," "),n.Qb(4),n.zc("ngClass",n.Dc(40,Bu,t.selectedType===t.cipherType.Card)),n.Qb(32),n.Qc("  ",n.uc(81,26,"typeCard")," "),n.Qb(4),n.zc("ngClass",n.Dc(42,Bu,t.selectedType===t.cipherType.Identity)),n.Qb(13),n.Qc("  ",n.uc(98,28,"typeIdentity")," "),n.Qb(4),n.zc("ngIf",t.hasNotes),n.Qb(3),n.zc("ngIf",!t.loaded),n.Qb(2),n.zc("ngIf",t.loaded),n.Qb(5),n.Pc(n.uc(112,30,"tools")),n.Qb(6),n.zc("ngClass",n.Dc(44,Bu,t.importSelected)),n.Qb(11),n.Qc("  ",n.uc(129,32,"import")," "),n.Qb(4),n.zc("ifFlag",t.CAN_SHARE_ORGANIZATION),n.Qb(10),n.Qc("  ",n.uc(143,34,"lock")," "))},directives:[Dr.i,Ar,fr,Dr.k,Ua,Tu,Fu,rd,Mr,Dr.j,da,Dr.o],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ih,[{type:n.l,args:[{selector:"app-vault-groupings",templateUrl:"groupings.component.html"}]}],(function(){return[{type:P},{type:T},{type:wr.a},{type:pu},{type:Sr},{type:C}]}),{onOrganizationWithoutKeyClicked:[{type:n.O}],onImportClicked:[{type:n.O}]});var nh=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class sh{constructor(e,t,i,s){this.passwordGenerationService=e,this.platformUtilsService=t,this.i18nService=i,this.win=s,this.showSelect=!1,this.onSelected=new n.t,this.options={},this.password="-",this.showOptions=!1,this.avoidAmbiguous=!1}ngOnInit(){return nh(this,void 0,void 0,(function*(){const e=yield this.passwordGenerationService.getOptions();this.options=e[0],this.enforcedPolicyOptions=e[1],this.avoidAmbiguous=!this.options.ambiguous,this.options.type="passphrase"===this.options.type?"passphrase":"password",this.password=yield this.passwordGenerationService.generatePassword(this.options),yield this.passwordGenerationService.addHistory(this.password)}))}sliderChanged(){return nh(this,void 0,void 0,(function*(){this.saveOptions(!1),yield this.passwordGenerationService.addHistory(this.password)}))}sliderInput(){return nh(this,void 0,void 0,(function*(){this.normalizeOptions(),this.password=yield this.passwordGenerationService.generatePassword(this.options)}))}saveOptions(e=!0){return nh(this,void 0,void 0,(function*(){this.normalizeOptions(),yield this.passwordGenerationService.saveOptions(this.options),e&&(yield this.regenerate())}))}regenerate(){return nh(this,void 0,void 0,(function*(){this.password=yield this.passwordGenerationService.generatePassword(this.options),yield this.passwordGenerationService.addHistory(this.password)}))}copy(){const e=null!=this.win?{window:this.win}:null;this.platformUtilsService.copyToClipboard(this.password,e),this.platformUtilsService.showToast("info",null,this.i18nService.t("valueCopied",this.i18nService.t("password")))}select(){this.onSelected.emit(this.password)}toggleOptions(){this.showOptions=!this.showOptions}normalizeOptions(){if(this.options.ambiguous=!this.avoidAmbiguous,!(this.options.uppercase||this.options.lowercase||this.options.number||this.options.special)&&(this.options.lowercase=!0,null!=this.win)){const e=this.win.document.querySelector("#lowercase");e&&(e.checked=!0)}this.passwordGenerationService.normalizeOptions(this.options,this.enforcedPolicyOptions)}}sh.ɵfac=function(e){return new(e||sh)(n.cc(D),n.cc(A.a),n.cc(I.a),n.cc(Window))},sh.ɵdir=n.Xb({type:sh,inputs:{showSelect:"showSelect"},outputs:{onSelected:"onSelected"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(sh,[{type:n.q}],(function(){return[{type:D},{type:A.a},{type:I.a},{type:Window}]}),{showSelect:[{type:n.D}],onSelected:[{type:n.O}]});class rh{constructor(e,t){this.el=e,this.platformUtilsService=t}onCopy(){if(null==window)return;let e="";const t=window.getSelection();for(let i=0;i<t.rangeCount;i++){const n=t.getRangeAt(i).toString();let s=n.length;const r=n.search(/(?:\r\n|\r|\n)/);if(r>-1){""===n.substr(r).trim()&&(s=r)}e+=n.substring(0,s)}this.platformUtilsService.copyToClipboard(e,{window:window})}}rh.ɵfac=function(e){return new(e||rh)(n.cc(n.r),n.cc(A.a))},rh.ɵdir=n.Xb({type:rh,selectors:[["","appSelectCopy",""]],hostBindings:function(e,t){1&e&&n.oc("copy",(function(){return t.onCopy()}))}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(rh,[{type:n.q,args:[{selector:"[appSelectCopy]"}]}],(function(){return[{type:n.r},{type:A.a}]}),{onCopy:[{type:n.w,args:["copy"]}]});class oh{transform(e){const t=/\p{Emoji_Presentation}/gu,i=Array.from(e);let n="";for(let e=0;e<i.length;e++){let s=i[e],r=!1;switch(s){case"&":s="&amp;",r=!0;break;case"<":s="&lt;",r=!0;break;case">":s="&gt;",r=!0;break;case" ":s="&nbsp;",r=!0}let o="letter";s.match(t)?o="emoji":r||s.match(/[^\w ]/)?o="special":s.match(/\d/)&&(o="number"),n+='<span class="password-'+o+'">'+s+"</span>"}return n}}function ch(e,t){1&e&&(n.hc(0,"app-callout",27),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"passwordGeneratorPolicyInEffect")," "))}function ah(e,t){if(1&e){const e=n.ic();n.hc(0,"div",28),n.Oc(1," "),n.hc(2,"div",8),n.Oc(3," "),n.hc(4,"div",29),n.Oc(5," "),n.hc(6,"label",30),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.hc(10,"input",31),n.oc("blur",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.numWords=t})),n.gc(),n.Oc(11," "),n.gc(),n.Oc(12," "),n.hc(13,"div",29),n.Oc(14," "),n.hc(15,"label",32),n.Oc(16),n.tc(17,"i18n"),n.gc(),n.Oc(18," "),n.hc(19,"input",33),n.oc("input",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.wordSeparator=t})),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.hc(22,"div",34),n.Oc(23," "),n.hc(24,"label",35),n.Oc(25),n.tc(26,"i18n"),n.gc(),n.Oc(27," "),n.hc(28,"input",36),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.capitalize=t})),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.hc(31,"div",34),n.Oc(32," "),n.hc(33,"label",37),n.Oc(34),n.tc(35,"i18n"),n.gc(),n.Oc(36," "),n.hc(37,"input",38),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.includeNumber=t})),n.gc(),n.Oc(38," "),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.gc()}if(2&e){const e=n.sc();n.zc("hidden",!e.showOptions),n.Qb(7),n.Pc(n.uc(8,11,"numWords")),n.Qb(3),n.zc("ngModel",e.options.numWords),n.Qb(6),n.Pc(n.uc(17,13,"wordSeparator")),n.Qb(3),n.zc("ngModel",e.options.wordSeparator),n.Qb(6),n.Pc(n.uc(26,15,"capitalize")),n.Qb(3),n.zc("ngModel",e.options.capitalize)("disabled",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.capitalize),n.Qb(6),n.Pc(n.uc(35,17,"includeNumber")),n.Qb(3),n.zc("ngModel",e.options.includeNumber)("disabled",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.includeNumber)}}function lh(e,t){if(1&e){const e=n.ic();n.fc(0),n.Oc(1," "),n.hc(2,"div",28),n.Oc(3," "),n.hc(4,"div",8),n.Oc(5," "),n.hc(6,"div",39),n.Oc(7," "),n.hc(8,"label",40),n.Oc(9),n.tc(10,"i18n"),n.gc(),n.Oc(11," "),n.hc(12,"input",41),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().options.length=t}))("blur",(function(){n.Hc(e);return n.sc().saveOptions()})),n.gc(),n.Oc(13," "),n.hc(14,"input",42),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().options.length=t}))("change",(function(){n.Hc(e);return n.sc().sliderChanged()}))("input",(function(){n.Hc(e);return n.sc().sliderInput()})),n.gc(),n.Oc(15," "),n.gc(),n.Oc(16," "),n.hc(17,"div",34),n.Oc(18," "),n.hc(19,"label",43),n.Oc(20,"A-Z"),n.gc(),n.Oc(21," "),n.hc(22,"input",44),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.uppercase=t})),n.gc(),n.Oc(23," "),n.gc(),n.Oc(24," "),n.hc(25,"div",34),n.Oc(26," "),n.hc(27,"label",45),n.Oc(28,"a-z"),n.gc(),n.Oc(29," "),n.hc(30,"input",46),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.lowercase=t})),n.gc(),n.Oc(31," "),n.gc(),n.Oc(32," "),n.hc(33,"div",34),n.Oc(34," "),n.hc(35,"label",47),n.Oc(36,"0-9"),n.gc(),n.Oc(37," "),n.hc(38,"input",48),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.number=t})),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.hc(41,"div",34),n.Oc(42," "),n.hc(43,"label",49),n.Oc(44,"!@#$%^&*"),n.gc(),n.Oc(45," "),n.hc(46,"input",50),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.special=t})),n.gc(),n.Oc(47," "),n.gc(),n.Oc(48," "),n.gc(),n.Oc(49," "),n.gc(),n.Oc(50," "),n.hc(51,"div",28),n.Oc(52," "),n.hc(53,"div",8),n.Oc(54," "),n.hc(55,"div",29),n.Oc(56," "),n.hc(57,"label",51),n.Oc(58),n.tc(59,"i18n"),n.gc(),n.Oc(60," "),n.hc(61,"input",52),n.oc("blur",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.minNumber=t})),n.gc(),n.Oc(62," "),n.gc(),n.Oc(63," "),n.hc(64,"div",29),n.Oc(65," "),n.hc(66,"label",53),n.Oc(67),n.tc(68,"i18n"),n.gc(),n.Oc(69," "),n.hc(70,"input",54),n.oc("blur",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().options.minSpecial=t})),n.gc(),n.Oc(71," "),n.gc(),n.Oc(72," "),n.hc(73,"div",34),n.Oc(74," "),n.hc(75,"label",55),n.Oc(76),n.tc(77,"i18n"),n.gc(),n.Oc(78," "),n.hc(79,"input",56),n.oc("change",(function(){n.Hc(e);return n.sc().saveOptions()}))("ngModelChange",(function(t){n.Hc(e);return n.sc().avoidAmbiguous=t})),n.gc(),n.Oc(80," "),n.gc(),n.Oc(81," "),n.gc(),n.Oc(82," "),n.gc(),n.Oc(83," "),n.ec()}if(2&e){const e=n.sc();n.Qb(2),n.zc("hidden",!e.showOptions),n.Qb(7),n.Pc(n.uc(10,19,"length")),n.Qb(3),n.zc("ngModel",e.options.length),n.Qb(2),n.zc("ngModel",e.options.length),n.Qb(8),n.zc("disabled",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.useUppercase)("ngModel",e.options.uppercase),n.Qb(8),n.zc("disabled",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.useLowercase)("ngModel",e.options.lowercase),n.Qb(8),n.zc("disabled",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.useNumbers)("ngModel",e.options.number),n.Qb(8),n.zc("disabled",null==e.enforcedPolicyOptions?null:e.enforcedPolicyOptions.useSpecial)("ngModel",e.options.special),n.Qb(5),n.zc("hidden",!e.showOptions),n.Qb(7),n.Pc(n.uc(59,21,"minNumbers")),n.Qb(3),n.zc("ngModel",e.options.minNumber),n.Qb(6),n.Pc(n.uc(68,23,"minSpecial")),n.Qb(3),n.zc("ngModel",e.options.minSpecial),n.Qb(6),n.Pc(n.uc(77,25,"ambiguous")),n.Qb(3),n.zc("ngModel",e.avoidAmbiguous)}}function dh(e,t){if(1&e){const e=n.ic();n.hc(0,"button",57),n.oc("click",(function(){n.Hc(e);return n.sc().select()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",58),n.Oc(4," "),n.gc()}2&e&&n.Ac("appA11yTitle",n.uc(1,1,"select"))}oh.ɵfac=function(e){return new(e||oh)},oh.ɵpipe=n.bc({name:"colorPassword",type:oh,pure:!0}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(oh,[{type:n.R,args:[{name:"colorPassword"}]}],null,null);class uh extends sh{constructor(e,t,i){super(e,t,i,window)}}uh.ɵfac=function(e){return new(e||uh)(n.cc(D),n.cc(A.a),n.cc(I.a))},uh.ɵcmp=n.Wb({type:uh,selectors:[["app-password-generator"]],features:[n.Nb],decls:88,vars:38,consts:[["tabindex","-1","role","dialog","aria-modal","true",1,"modal","fade"],["role","document",1,"modal-dialog","modal-sm"],[1,"modal-content"],[1,"modal-body"],["type","info",4,"ngIf"],[1,"password-block"],["appSelectCopy","",1,"password-wrapper",3,"innerHTML"],[1,"box"],[1,"box-content","condensed"],["href","#","appStopClick","","appBlurClick","",1,"box-content-row",3,"click"],["aria-hidden","true",1,"fa","fa-fw","fa-refresh"],["aria-hidden","true",1,"fa","fa-fw","fa-clone"],[1,"box-header"],["type","button",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-plus-square-o",3,"hidden"],["aria-hidden","true",1,"fa","fa-minus-square-o",3,"hidden"],[1,"box-content","condensed",3,"hidden"],["appBoxRow","",1,"box-content-row"],["for","type",1,"sr-only"],["id","type",3,"ngModel","ngModelChange","change"],["value","password"],["value","passphrase"],["class","box",3,"hidden",4,"ngIf"],[4,"ngIf"],[1,"modal-footer"],["type","button","class","primary","appBlurClick","",3,"appA11yTitle","click",4,"ngIf"],["type","button","data-dismiss","modal"],["type","info"],[1,"box",3,"hidden"],["appBoxRow","",1,"box-content-row","box-content-row-input"],["for","num-words"],["id","num-words","type","number","min","3","max","20",3,"ngModel","blur","ngModelChange"],["for","word-separator"],["id","word-separator","type","text","maxlength","1",3,"ngModel","input","ngModelChange"],["appBoxRow","",1,"box-content-row","box-content-row-checkbox"],["for","capitalize"],["id","capitalize","type","checkbox",3,"ngModel","disabled","change","ngModelChange"],["for","include-number"],["id","include-number","type","checkbox",3,"ngModel","disabled","change","ngModelChange"],["appBoxRow","",1,"box-content-row","box-content-row-slider"],["for","length"],["id","length","type","number","min","5","max","128",3,"ngModel","ngModelChange","blur"],["id","lengthRange","type","range","min","5","max","128","step","1",3,"ngModel","ngModelChange","change","input"],["for","uppercase"],["id","uppercase","type","checkbox",3,"disabled","ngModel","change","ngModelChange"],["for","lowercase"],["id","lowercase","type","checkbox",3,"disabled","ngModel","change","ngModelChange"],["for","numbers"],["id","numbers","type","checkbox",3,"disabled","ngModel","change","ngModelChange"],["for","special"],["id","special","type","checkbox",3,"disabled","ngModel","change","ngModelChange"],["for","min-number"],["id","min-number","type","number","min","0","max","9",3,"ngModel","blur","ngModelChange"],["for","min-special"],["id","min-special","type","number","min","0","max","9",3,"ngModel","blur","ngModelChange"],["for","ambiguous"],["id","ambiguous","type","checkbox",3,"ngModel","change","ngModelChange"],["type","button","appBlurClick","",1,"primary",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg","fa-fw","fa-check"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.tc(1,"i18n"),n.Oc(2," "),n.hc(3,"div",1),n.Oc(4," "),n.hc(5,"div",2),n.Oc(6," "),n.hc(7,"div",3),n.Oc(8," "),n.Mc(9,ch,3,3,"app-callout",4),n.Oc(10," "),n.hc(11,"div",5),n.Oc(12," "),n.dc(13,"div",6),n.tc(14,"colorPassword"),n.Oc(15," "),n.gc(),n.Oc(16," "),n.hc(17,"div",7),n.Oc(18," "),n.hc(19,"div",8),n.Oc(20," "),n.hc(21,"a",9),n.oc("click",(function(){return t.regenerate()})),n.Oc(22," "),n.dc(23,"i",10),n.Oc(24),n.tc(25,"i18n"),n.gc(),n.Oc(26," "),n.hc(27,"a",9),n.oc("click",(function(){return t.copy()})),n.Oc(28," "),n.dc(29,"i",11),n.Oc(30),n.tc(31,"i18n"),n.gc(),n.Oc(32," "),n.gc(),n.Oc(33," "),n.gc(),n.Oc(34," "),n.hc(35,"div",7),n.Oc(36," "),n.hc(37,"div",12),n.Oc(38," "),n.hc(39,"button",13),n.oc("click",(function(){return t.toggleOptions()})),n.tc(40,"i18n"),n.Oc(41," "),n.dc(42,"i",14),n.Oc(43," "),n.dc(44,"i",15),n.Oc(45),n.tc(46,"i18n"),n.gc(),n.Oc(47," "),n.gc(),n.Oc(48," "),n.hc(49,"div",16),n.Oc(50," "),n.hc(51,"div",17),n.Oc(52," "),n.hc(53,"label",18),n.Oc(54),n.tc(55,"i18n"),n.gc(),n.Oc(56," "),n.hc(57,"select",19),n.oc("ngModelChange",(function(e){return t.options.type=e}))("change",(function(){return t.saveOptions()})),n.Oc(58," "),n.hc(59,"option",20),n.Oc(60),n.tc(61,"i18n"),n.gc(),n.Oc(62," "),n.hc(63,"option",21),n.Oc(64),n.tc(65,"i18n"),n.gc(),n.Oc(66," "),n.gc(),n.Oc(67," "),n.gc(),n.Oc(68," "),n.gc(),n.Oc(69," "),n.gc(),n.Oc(70," "),n.Mc(71,ah,41,19,"div",22),n.Oc(72," "),n.Mc(73,lh,84,27,"ng-container",23),n.Oc(74," "),n.gc(),n.Oc(75," "),n.hc(76,"div",24),n.Oc(77," "),n.Mc(78,dh,5,3,"button",25),n.Oc(79," "),n.hc(80,"button",26),n.Oc(81),n.tc(82,"i18n"),n.gc(),n.Oc(83," "),n.gc(),n.Oc(84," "),n.gc(),n.Oc(85," "),n.gc(),n.Oc(86," "),n.gc(),n.Oc(87," ")),2&e&&(n.Rb("aria-label",n.uc(1,18,"generatePassword")),n.Qb(9),n.zc("ngIf",null==t.enforcedPolicyOptions?null:t.enforcedPolicyOptions.inEffect()),n.Qb(4),n.zc("innerHTML",n.uc(14,20,t.password),n.Ic),n.Qb(11),n.Qc(" ",n.uc(25,22,"regeneratePassword")," "),n.Qb(6),n.Qc(" ",n.uc(31,24,"copyPassword")," "),n.Qb(9),n.Ac("appA11yTitle",n.uc(40,26,"toggleVisibility")),n.Qb(3),n.zc("hidden",t.showOptions),n.Qb(2),n.zc("hidden",!t.showOptions),n.Qb(1),n.Qc(" ",n.uc(46,28,"options")," "),n.Qb(4),n.zc("hidden",!t.showOptions),n.Qb(5),n.Pc(n.uc(55,30,"type")),n.Qb(3),n.zc("ngModel",t.options.type),n.Qb(3),n.Pc(n.uc(61,32,"password")),n.Qb(4),n.Pc(n.uc(65,34,"passphrase")),n.Qb(7),n.zc("ngIf","passphrase"===t.options.type),n.Qb(2),n.zc("ngIf","password"===t.options.type),n.Qb(5),n.zc("ngIf",t.showSelect),n.Qb(3),n.Pc(n.uc(82,36,t.showSelect?"cancel":"close")))},directives:[Dr.k,rh,Ar,fr,Mr,pr,dr.o,dr.f,dr.i,dr.j,dr.q,ko,dr.k,dr.b,dr.d,dr.a,dr.m],pipes:[yr.a,oh],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(uh,[{type:n.l,args:[{selector:"app-password-generator",templateUrl:"password-generator.component.html"}]}],(function(){return[{type:D},{type:A.a},{type:I.a}]}),null);var hh=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class ph{constructor(e,t,i,n){this.cipherService=e,this.platformUtilsService=t,this.i18nService=i,this.win=n,this.history=[]}ngOnInit(){return hh(this,void 0,void 0,(function*(){yield this.init()}))}copy(e){const t=null!=this.win?{window:this.win}:null;this.platformUtilsService.copyToClipboard(e,t),this.platformUtilsService.showToast("info",null,this.i18nService.t("valueCopied",this.i18nService.t("password")))}init(){return hh(this,void 0,void 0,(function*(){const e=yield this.cipherService.get(this.cipherId),t=yield e.decrypt();this.history=null==t.passwordHistory?[]:t.passwordHistory}))}}function gh(e,t){if(1&e){const e=n.ic();n.hc(0,"div",11),n.Oc(1," "),n.hc(2,"div",12),n.Oc(3," "),n.hc(4,"span",13),n.Oc(5),n.gc(),n.Oc(6," "),n.hc(7,"span",14),n.Oc(8),n.tc(9,"date"),n.gc(),n.Oc(10," "),n.gc(),n.Oc(11," "),n.hc(12,"div",15),n.Oc(13," "),n.hc(14,"a",16),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc().copy(i.password)})),n.tc(15,"i18n"),n.Oc(16," "),n.dc(17,"i",17),n.Oc(18," "),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc()}if(2&e){const e=t.$implicit;n.Qb(5),n.Qc(" ",e.password," "),n.Qb(3),n.Pc(n.vc(9,3,e.lastUsedDate,"medium")),n.Qb(6),n.Ac("appA11yTitle",n.uc(15,6,"copyPassword"))}}function fh(e,t){1&e&&(n.hc(0,"div",18),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"noPasswordsInList")," "))}ph.ɵfac=function(e){return new(e||ph)(n.cc(C),n.cc(A.a),n.cc(I.a),n.cc(Window))},ph.ɵdir=n.Xb({type:ph}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ph,[{type:n.q}],(function(){return[{type:C},{type:A.a},{type:I.a},{type:Window}]}),null);class yh extends ph{constructor(e,t,i){super(e,t,i,window)}}yh.ɵfac=function(e){return new(e||yh)(n.cc(C),n.cc(A.a),n.cc(I.a))},yh.ɵcmp=n.Wb({type:yh,selectors:[["app-password-history"]],features:[n.Nb],decls:33,vars:8,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","passwordHistoryTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content"],[1,"modal-body"],[1,"box"],["id","passwordHistoryTitle",1,"box-header"],[1,"box-content","condensed"],["class","box-content-row box-content-row-flex",4,"ngFor","ngForOf"],["class","box-content-row",4,"ngIf"],[1,"modal-footer"],["type","button","data-dismiss","modal"],[1,"box-content-row","box-content-row-flex"],[1,"row-main"],[1,"text","monospaced"],[1,"detail"],[1,"action-buttons"],["href","#","appStopClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg","fa-clone"],[1,"box-content-row"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"div",2),n.Oc(5," "),n.hc(6,"div",3),n.Oc(7," "),n.hc(8,"div",4),n.Oc(9," "),n.hc(10,"div",5),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.hc(14,"div",6),n.Oc(15," "),n.Mc(16,gh,21,8,"div",7),n.Oc(17," "),n.Mc(18,fh,3,3,"div",8),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.hc(23,"div",9),n.Oc(24," "),n.hc(25,"button",10),n.Oc(26),n.tc(27,"i18n"),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc(),n.Oc(30," "),n.gc(),n.Oc(31," "),n.gc(),n.Oc(32," ")),2&e&&(n.Qb(11),n.Qc(" ",n.uc(12,4,"passwordHistory")," "),n.Qb(5),n.zc("ngForOf",t.history),n.Qb(2),n.zc("ngIf",!t.history.length),n.Qb(8),n.Pc(n.uc(27,6,"close")))},directives:[Dr.j,Dr.k,Ar,Mr],pipes:[yr.a,Dr.d],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(yh,[{type:n.l,args:[{selector:"app-password-history",templateUrl:"password-history.component.html"}]}],(function(){return[{type:C},{type:A.a},{type:I.a}]}),null);var mh=i(245),vh=i(824),bh=function(e,t,i,n){var s,r=arguments.length,o=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(o=(r<3?s(o):r>3?s(t,i,o):s(t,i))||o);return r>3&&o&&Object.defineProperty(t,i,o),o},wh=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},Oh=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Sh extends vh.a{constructor(e,t,i,n,s,r,o,c){super(e,t,i,n,s,r,o,c),this.localCryptoService=e,this.localUserService=t,this.localSearchService=c}getAllDecrypted(){var e;return Oh(this,void 0,void 0,(function*(){if(null!=this.decryptedCipherCache){const t=yield this.localUserService.getUserId();return null!=this.localSearchService&&(null!==(e=this.localSearchService().indexedEntityId)&&void 0!==e?e:t)!==t&&(yield this.localSearchService().indexCiphers(t,this.decryptedCipherCache)),this.decryptedCipherCache}const t=[];if(!(yield this.localCryptoService.hasKey()))throw new Error("No key.");const i=yield this.localCryptoService.getOrgKeys(),n=i?[...i.keys()]:[],s=[];return(yield this.getAll()).filter(e=>!e.organizationId||n.includes(e.organizationId)).forEach(e=>{s.push(e.decrypt().then(e=>t.push(e)))}),yield Promise.all(s),t.sort(this.getLocaleSortingFunction()),this.decryptedCipherCache=t,this.decryptedCipherCache}))}unshare(e){return Oh(this,void 0,void 0,(function*(){e.organizationId=null,e.collectionIds=null;const t=yield this.encrypt(e);yield this.saveWithServer(t)}))}}bh([Object(mh.a)(()=>"getAllDecrypted"),wh("design:type",Function),wh("design:paramtypes",[]),wh("design:returntype",Promise)],Sh.prototype,"getAllDecrypted",null);var Ch=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Ph{constructor(e,t,i,s,r){this.collectionService=e,this.platformUtilsService=t,this.i18nService=i,this.userService=s,this.cipherService=r,this.onSharedCipher=new n.t,this.collections=[],this.organizations=[],this.writeableCollections=[]}ngOnInit(){return Ch(this,void 0,void 0,(function*(){yield this.load()}))}load(){return Ch(this,void 0,void 0,(function*(){const e=yield this.collectionService.getAllDecrypted();this.writeableCollections=e.map(e=>e).filter(e=>!e.readOnly);const t=yield this.userService.getAllOrganizations();this.organizations=t.sort(Q.a.getSortFunction(this.i18nService,"name")).filter(e=>e.enabled&&e.status===wc.Confirmed);const i=yield this.cipherService.get(this.cipherId);this.cipher=yield i.decrypt(),null==this.organizationId&&this.organizations.length>0&&(this.organizationId=this.organizations[0].id),this.filterCollections()}))}filterCollections(){this.writeableCollections.forEach(e=>e.checked=!1),null==this.organizationId||0===this.writeableCollections.length?this.collections=[]:this.collections=this.writeableCollections.filter(e=>e.organizationId===this.organizationId)}submit(){return Ch(this,void 0,void 0,(function*(){const e=this.collections.filter(e=>!!e.checked).map(e=>e.id);if(0===e.length)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("selectOneCollection"));const t=yield this.cipherService.get(this.cipherId),i=yield t.decrypt();try{return this.formPromise=this.cipherService.shareWithServer(i,this.organizationId,e).then(()=>Ch(this,void 0,void 0,(function*(){this.onSharedCipher.emit(),this.platformUtilsService.showToast("success",null,this.i18nService.t("sharedItem"))}))),yield this.formPromise,!0}catch(e){}return!1}))}get canSave(){if(null!=this.collections)for(let e=0;e<this.collections.length;e++)if(this.collections[e].checked)return!0;return!1}}Ph.ɵfac=function(e){return new(e||Ph)(n.cc(P),n.cc(A.a),n.cc(I.a),n.cc(z.a),n.cc(C))},Ph.ɵdir=n.Xb({type:Ph,inputs:{cipherId:"cipherId",organizationId:"organizationId"},outputs:{onSharedCipher:"onSharedCipher"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ph,[{type:n.q}],(function(){return[{type:P},{type:A.a},{type:I.a},{type:z.a},{type:C}]}),{cipherId:[{type:n.D}],organizationId:[{type:n.D}],onSharedCipher:[{type:n.O}]});var xh=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function kh(e,t){1&e&&(n.hc(0,"div",13),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"noFolderInList")," "))}function Th(e,t){if(1&e&&(n.hc(0,"option",19),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.id),n.Qb(1),n.Pc(e.name)}}function Ih(e,t){if(1&e){const e=n.ic();n.hc(0,"div",13),n.Oc(1," "),n.hc(2,"div",14),n.Oc(3," "),n.hc(4,"label",15),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"select",16),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc(2).selectedCollectionId=t}))("change",(function(){n.Hc(e);return n.sc(2).onSelectedCollectionChange()})),n.Oc(9," "),n.hc(10,"option",17),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.Mc(14,Th,2,2,"option",18),n.Oc(15," "),n.gc(),n.Oc(16," "),n.gc(),n.Oc(17," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(5),n.Pc(n.uc(6,4,"folder")),n.Qb(3),n.zc("ngModel",e.selectedCollectionId),n.Qb(3),n.Pc(n.uc(12,6,"shareNone")),n.Qb(3),n.zc("ngForOf",e.collections)}}function Dh(e,t){if(1&e&&(n.hc(0,"div",9),n.Oc(1," "),n.hc(2,"div",10),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.Mc(6,kh,3,3,"div",11),n.Oc(7," "),n.Mc(8,Ih,18,8,"div",11),n.Oc(9," "),n.hc(10,"div",12),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.gc()),2&e){const e=n.sc();n.Qb(3),n.Qc(" ",n.uc(4,4,"folders")," "),n.Qb(3),n.zc("ngIf",!e.collections||!e.collections.length),n.Qb(2),n.zc("ngIf",e.collections&&e.collections.length),n.Qb(3),n.Qc(" ",n.uc(12,6,"shareDesc")," ")}}function Ah(e,t){if(1&e&&(n.hc(0,"button",20),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",21),n.Oc(4," "),n.dc(5,"i",22),n.Oc(6," "),n.gc()),2&e){const e=n.sc(),t=n.Gc(5);n.Ac("appA11yTitle",n.uc(1,4,"save")),n.zc("disabled",t.loading||!e.canSave),n.Qb(3),n.zc("hidden",t.loading),n.Qb(2),n.zc("hidden",!t.loading)}}class Mh extends Ph{constructor(e,t,i,n,s){super(i,s,t,n,e),this.localCipherService=e,this.selectedCollectionId=void 0}filterCollections(){this.writeableCollections.forEach(e=>e.checked=!1);const e=this.organizations.map(e=>e.id);this.collections=this.writeableCollections.filter(t=>e.includes(t.organizationId))}onSelectedCollectionChange(){this.collections.forEach(e=>{e.checked=this.selectedCollectionId===e.id})}load(){const e=Object.create(null,{load:{get:()=>super.load}});var t;return xh(this,void 0,void 0,(function*(){yield e.load.call(this),this.cipher.organizationId&&(this.selectedCollectionId=null===(t=this.collections.find(e=>e.organizationId===this.cipher.organizationId))||void 0===t?void 0:t.id)}))}submit(){return xh(this,void 0,void 0,(function*(){const e=!!this.cipher.organizationId,t=this.collections.filter(e=>!!e.checked);if(e&&0===t.length)return yield this.unshare();if(!e&&1!==t.length)return void this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("selectOneFolder"));const i=t.map(e=>e.id),n=t[0].organizationId,s=yield this.cipherService.get(this.cipherId),r=yield s.decrypt();try{return this.formPromise=this.cipherService.shareWithServer(r,n,i).then(()=>xh(this,void 0,void 0,(function*(){this.onSharedCipher.emit(),this.platformUtilsService.showToast("success",null,this.i18nService.t("sharedItem"))}))),yield this.formPromise,!0}catch(e){}return!1}))}get canSave(){const e=!!this.cipher.organizationId;return this.collections.some(e=>!!e.checked)||e}unshare(){return xh(this,void 0,void 0,(function*(){try{return this.formPromise=this.localCipherService.unshare(this.cipher).then(()=>xh(this,void 0,void 0,(function*(){this.onSharedCipher.emit(),this.platformUtilsService.showToast("success",null,this.i18nService.t("unsharedItem"))}))),yield this.formPromise,!0}catch(e){}return!1}))}}Mh.ɵfac=function(e){return new(e||Mh)(n.cc(Sh),n.cc(I.a),n.cc(P),n.cc(z.a),n.cc(A.a))},Mh.ɵcmp=n.Wb({type:Mh,selectors:[["app-vault-share"]],features:[n.Nb],decls:24,vars:6,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","shareTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content",3,"appApiAction","ngSubmit"],["form",""],[1,"modal-body"],["class","box",4,"ngIf"],[1,"modal-footer"],["appBlurClick","","type","submit","class","primary",3,"appA11yTitle","disabled",4,"ngIf"],["type","button","data-dismiss","modal"],[1,"box"],[1,"box-header"],["class","box-content",4,"ngIf"],[1,"box-footer"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","folder"],["id","folder","name","FolderId",3,"ngModel","ngModelChange","change"],["value",""],[3,"ngValue",4,"ngFor","ngForOf"],[3,"ngValue"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-save","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"form",2,3),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",4),n.Oc(8," "),n.Mc(9,Dh,14,8,"div",5),n.Oc(10," "),n.gc(),n.Oc(11," "),n.hc(12,"div",6),n.Oc(13," "),n.Mc(14,Ah,7,6,"button",7),n.Oc(15," "),n.hc(16,"button",8),n.Oc(17),n.tc(18,"i18n"),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.gc(),n.Oc(23," ")),2&e&&(n.Qb(4),n.zc("appApiAction",t.formPromise),n.Qb(5),n.zc("ngIf",t.organizations&&t.organizations.length),n.Qb(5),n.zc("ngIf",t.organizations&&t.organizations.length),n.Qb(3),n.Pc(n.uc(18,4,"cancel")))},directives:[dr.p,dr.g,dr.h,hr,Dr.k,pr,dr.o,dr.f,dr.i,dr.j,dr.q,Dr.j,fr,Mr],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Mh,[{type:n.l,args:[{selector:"app-vault-share",templateUrl:"share.component.html"}]}],(function(){return[{type:Sh},{type:I.a},{type:P},{type:z.a},{type:A.a}]}),null);class zh{}var Eh=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Uh{constructor(e,t,i,s,r,o,c,a,l,d,u,h,p,g,f){this.cipherService=e,this.totpService=t,this.tokenService=i,this.i18nService=s,this.cryptoService=r,this.platformUtilsService=o,this.auditService=c,this.win=a,this.broadcasterService=l,this.ngZone=d,this.changeDetectorRef=u,this.userService=h,this.eventService=p,this.apiService=g,this.passwordRepromptService=f,this.onEditCipher=new n.t,this.onCloneCipher=new n.t,this.onShareCipher=new n.t,this.onDeletedCipher=new n.t,this.onRestoredCipher=new n.t,this.fieldType=oe.a,this.passwordReprompted=!1}ngOnInit(){this.broadcasterService.subscribe("ViewComponent",e=>{this.ngZone.run(()=>Eh(this,void 0,void 0,(function*(){switch(e.command){case"syncCompleted":e.successfully&&(yield this.load(),this.changeDetectorRef.detectChanges())}})))})}ngOnDestroy(){this.broadcasterService.unsubscribe("ViewComponent"),this.cleanUp()}load(){return Eh(this,void 0,void 0,(function*(){this.cleanUp();const e=yield this.cipherService.get(this.cipherId);if(this.cipher=yield e.decrypt(),this.canAccessPremium=yield this.userService.canAccessPremium(),this.cipher.type===B.a.Login&&this.cipher.login.totp&&(e.organizationUseTotp||this.canAccessPremium)){yield this.totpUpdateCode();const e=this.totpService.getTimeInterval(this.cipher.login.totp);yield this.totpTick(e),this.totpInterval=setInterval(()=>Eh(this,void 0,void 0,(function*(){yield this.totpTick(e)})),1e3)}this.previousCipherId!==this.cipherId&&this.eventService.collect(Aa.Cipher_ClientViewed,this.cipherId),this.previousCipherId=this.cipherId}))}edit(){return Eh(this,void 0,void 0,(function*(){return!!(yield this.promptPassword())&&(this.onEditCipher.emit(this.cipher),!0)}))}clone(){return Eh(this,void 0,void 0,(function*(){return!!(yield this.promptPassword())&&(this.onCloneCipher.emit(this.cipher),!0)}))}share(){return Eh(this,void 0,void 0,(function*(){return!!(yield this.promptPassword())&&(this.onShareCipher.emit(this.cipher),!0)}))}delete(){return Eh(this,void 0,void 0,(function*(){if(!(yield this.promptPassword()))return;if(!(yield this.platformUtilsService.showDialog(this.i18nService.t(this.cipher.isDeleted?"permanentlyDeleteItemConfirmation":"deleteItemConfirmation"),this.i18nService.t("deleteItem"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{yield this.deleteCipher(),this.platformUtilsService.showToast("success",null,this.i18nService.t(this.cipher.isDeleted?"permanentlyDeletedItem":"deletedItem")),this.onDeletedCipher.emit(this.cipher)}catch(e){}return!0}))}restore(){return Eh(this,void 0,void 0,(function*(){if(!this.cipher.isDeleted)return!1;if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("restoreItemConfirmation"),this.i18nService.t("restoreItem"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning")))return!1;try{yield this.restoreCipher(),this.platformUtilsService.showToast("success",null,this.i18nService.t("restoredItem")),this.onRestoredCipher.emit(this.cipher)}catch(e){}return!0}))}togglePassword(){return Eh(this,void 0,void 0,(function*(){(yield this.promptPassword())&&(this.showPassword=!this.showPassword,this.showPassword&&this.eventService.collect(Aa.Cipher_ClientToggledPasswordVisible,this.cipherId))}))}toggleCardNumber(){return Eh(this,void 0,void 0,(function*(){(yield this.promptPassword())&&(this.showCardNumber=!this.showCardNumber,this.showCardNumber&&this.eventService.collect(Aa.Cipher_ClientToggledCardCodeVisible,this.cipherId))}))}toggleCardCode(){return Eh(this,void 0,void 0,(function*(){(yield this.promptPassword())&&(this.showCardCode=!this.showCardCode,this.showCardCode&&this.eventService.collect(Aa.Cipher_ClientToggledCardCodeVisible,this.cipherId))}))}checkPassword(){return Eh(this,void 0,void 0,(function*(){if(null==this.cipher.login||null==this.cipher.login.password||""===this.cipher.login.password)return;this.checkPasswordPromise=this.auditService.passwordLeaked(this.cipher.login.password);const e=yield this.checkPasswordPromise;e>0?this.platformUtilsService.showToast("warning",null,this.i18nService.t("passwordExposed",e.toString())):this.platformUtilsService.showToast("success",null,this.i18nService.t("passwordSafe"))}))}toggleFieldValue(e){return Eh(this,void 0,void 0,(function*(){if(!(yield this.promptPassword()))return;const t=e;t.showValue=!t.showValue,t.showValue&&this.eventService.collect(Aa.Cipher_ClientToggledHiddenFieldVisible,this.cipherId)}))}launch(e,t){e.canLaunch&&(t&&this.cipherService.updateLastLaunchedDate(t),this.platformUtilsService.launchUri(e.launchUri))}copy(e,t,i){return Eh(this,void 0,void 0,(function*(){if(null==e)return;if(this.passwordRepromptService.protectedFields().includes(i)&&!(yield this.promptPassword()))return;const n=null!=this.win?{window:this.win}:null;this.platformUtilsService.copyToClipboard(e,n),this.platformUtilsService.showToast("info",null,this.i18nService.t("valueCopied",this.i18nService.t(t))),"password"===t?this.eventService.collect(Aa.Cipher_ClientToggledHiddenFieldVisible,this.cipherId):"securityCode"===t?this.eventService.collect(Aa.Cipher_ClientCopiedCardCode,this.cipherId):"H_Field"===i&&this.eventService.collect(Aa.Cipher_ClientCopiedHiddenField,this.cipherId)}))}setTextDataOnDrag(e,t){e.dataTransfer.setData("text",t)}downloadAttachment(e){return Eh(this,void 0,void 0,(function*(){const t=e;if(t.downloading)return;if(null==this.cipher.organizationId&&!this.canAccessPremium)return void this.platformUtilsService.showToast("error",this.i18nService.t("premiumRequired"),this.i18nService.t("premiumRequiredDesc"));let i;try{i=(yield this.apiService.getAttachmentData(this.cipher.id,e.id)).url}catch(t){if(!(t instanceof q.a&&404===t.statusCode))throw t instanceof q.a?new Error(t.getSingleMessage()):t;i=e.url}t.downloading=!0;const n=yield fetch(new Request(i,{cache:"no-store"}));if(200!==n.status)return this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred")),void(t.downloading=!1);try{const t=yield n.arrayBuffer(),i=null!=e.key?e.key:yield this.cryptoService.getOrgKey(this.cipher.organizationId),s=yield this.cryptoService.decryptFromBytes(t,i);this.platformUtilsService.saveFile(this.win,s,null,e.fileName)}catch(e){this.platformUtilsService.showToast("error",null,this.i18nService.t("errorOccurred"))}t.downloading=!1}))}deleteCipher(){return this.cipher.isDeleted?this.cipherService.deleteWithServer(this.cipher.id):this.cipherService.softDeleteWithServer(this.cipher.id)}restoreCipher(){return this.cipherService.restoreWithServer(this.cipher.id)}promptPassword(){return Eh(this,void 0,void 0,(function*(){return!(this.cipher.reprompt!==fe.a.None&&!this.passwordReprompted)||(this.passwordReprompted=yield this.passwordRepromptService.showPasswordPrompt())}))}cleanUp(){this.totpCode=null,this.cipher=null,this.showPassword=!1,this.totpInterval&&clearInterval(this.totpInterval)}totpUpdateCode(){return Eh(this,void 0,void 0,(function*(){if(null!=this.cipher&&this.cipher.type===B.a.Login&&null!=this.cipher.login.totp)if(this.totpCode=yield this.totpService.getCode(this.cipher.login.totp),null!=this.totpCode)if(this.totpCode.length>4){const e=Math.floor(this.totpCode.length/2);this.totpCodeFormatted=this.totpCode.substring(0,e)+" "+this.totpCode.substring(e)}else this.totpCodeFormatted=this.totpCode;else this.totpCodeFormatted=null,this.totpInterval&&clearInterval(this.totpInterval);else this.totpInterval&&clearInterval(this.totpInterval)}))}totpTick(e){return Eh(this,void 0,void 0,(function*(){const t=Math.round((new Date).getTime()/1e3)%e;this.totpSec=e-t,this.totpDash=+(Math.round(78.6/e*t+"e+2")+"e-2"),this.totpLow=this.totpSec<=7,0===t&&(yield this.totpUpdateCode())}))}}Uh.ɵfac=function(e){return new(e||Uh)(n.cc(C),n.cc(Jd),n.cc(Or),n.cc(I.a),n.cc(x.a),n.cc(A.a),n.cc(Ia),n.cc(Window),n.cc(Sr),n.cc(n.M),n.cc(n.j),n.cc(z.a),n.cc(Da),n.cc(O),n.cc(zh))},Uh.ɵdir=n.Xb({type:Uh,inputs:{cipherId:"cipherId"},outputs:{onEditCipher:"onEditCipher",onCloneCipher:"onCloneCipher",onShareCipher:"onShareCipher",onDeletedCipher:"onDeletedCipher",onRestoredCipher:"onRestoredCipher"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Uh,[{type:n.q}],(function(){return[{type:C},{type:Jd},{type:Or},{type:I.a},{type:x.a},{type:A.a},{type:Ia},{type:Window},{type:Sr},{type:n.M},{type:n.j},{type:z.a},{type:Da},{type:O},{type:zh}]}),{cipherId:[{type:n.D}],onEditCipher:[{type:n.O}],onCloneCipher:[{type:n.O}],onShareCipher:[{type:n.O}],onDeletedCipher:[{type:n.O}],onRestoredCipher:[{type:n.O}]});var Nh=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function Rh(e,t){if(1&e){const e=n.ic();n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"span",16),n.oc("dragstart",(function(t){n.Hc(e);const i=n.sc(3);return i.setTextDataOnDrag(t,i.cipher.login.username)})),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7),n.gc(),n.Oc(8," "),n.hc(9,"div",17),n.Oc(10," "),n.hc(11,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc(3);return t.copy(t.cipher.login.username,"username","Username")})),n.tc(12,"i18n"),n.Oc(13," "),n.dc(14,"i",19),n.Oc(15," "),n.gc(),n.Oc(16," "),n.gc(),n.Oc(17," "),n.gc()}if(2&e){const e=n.sc(3);n.Qb(5),n.Pc(n.uc(6,3,"username")),n.Qb(2),n.Qc(" ",e.cipher.login.username," "),n.Qb(4),n.Ac("appA11yTitle",n.uc(12,5,"copyUsername"))}}const Fh=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}};function Qh(e,t){if(1&e){const e=n.ic();n.hc(0,"div",17),n.Oc(1," "),n.hc(2,"button",23,24),n.oc("click",(function(){n.Hc(e);return n.sc(4).checkPassword()})),n.tc(4,"i18n"),n.Oc(5," "),n.dc(6,"i",25),n.Oc(7," "),n.dc(8,"i",26),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"a",18),n.oc("click",(function(){n.Hc(e);return n.sc(4).togglePassword()})),n.tc(12,"i18n"),n.Oc(13," "),n.dc(14,"i",27),n.Oc(15," "),n.gc(),n.Oc(16," "),n.hc(17,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc(4);return t.copy(t.cipher.login.password,"password","Password")})),n.tc(18,"i18n"),n.Oc(19," "),n.dc(20,"i",19),n.Oc(21," "),n.gc(),n.Oc(22," "),n.gc()}if(2&e){const e=n.Gc(3),t=n.sc(4);n.Qb(2),n.Ac("appA11yTitle",n.uc(4,8,"checkPassword")),n.zc("appApiAction",t.checkPasswordPromise)("disabled",e.loading),n.Qb(4),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading),n.Qb(3),n.Ac("appA11yTitle",n.uc(12,10,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(14,Fh,!t.showPassword,t.showPassword)),n.Qb(3),n.Ac("appA11yTitle",n.uc(18,12,"copyPassword"))}}function Vh(e,t){if(1&e){const e=n.ic();n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"span",16),n.oc("dragstart",(function(t){n.Hc(e);const i=n.sc(3);return i.setTextDataOnDrag(t,i.cipher.login.password)})),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"div",20),n.Oc(9),n.gc(),n.Oc(10," "),n.dc(11,"div",21),n.tc(12,"colorPassword"),n.Oc(13," "),n.gc(),n.Oc(14," "),n.Mc(15,Qh,23,17,"div",22),n.Oc(16," "),n.gc()}if(2&e){const e=n.sc(3);n.Qb(5),n.Pc(n.uc(6,6,"password")),n.Qb(3),n.zc("hidden",e.showPassword),n.Qb(1),n.Qc(" ",e.cipher.login.maskedPassword,""),n.Qb(2),n.zc("hidden",!e.showPassword)("innerHTML",n.uc(12,8,e.cipher.login.password),n.Ic),n.Qb(4),n.zc("ngIf",e.cipher.viewPassword)}}const Bh=function(e){return{low:e}},Lh=function(e){return{"stroke-dashoffset.px":e}};function _h(e,t){if(1&e){const e=n.ic();n.hc(0,"div",28),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"span",16),n.oc("dragstart",(function(t){n.Hc(e);const i=n.sc(3);return i.setTextDataOnDrag(t,i.totpCode)})),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"span",29),n.Oc(9),n.gc(),n.Oc(10," "),n.gc(),n.Oc(11," "),n.hc(12,"span",30),n.Oc(13," "),n.hc(14,"span",31),n.Oc(15),n.gc(),n.Oc(16," "),n.rc(),n.hc(17,"svg"),n.Oc(18," "),n.hc(19,"g"),n.Oc(20," "),n.dc(21,"circle",32),n.Oc(22," "),n.dc(23,"circle",33),n.Oc(24," "),n.gc(),n.Oc(25," "),n.gc(),n.Oc(26," "),n.gc(),n.Oc(27," "),n.qc(),n.hc(28,"div",17),n.Oc(29," "),n.hc(30,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc(3);return t.copy(t.totpCode,"verificationCodeTotp","TOTP")})),n.tc(31,"i18n"),n.Oc(32," "),n.dc(33,"i",19),n.Oc(34," "),n.gc(),n.Oc(35," "),n.gc(),n.Oc(36," "),n.gc()}if(2&e){const e=n.sc(3);n.zc("ngClass",n.Dc(10,Bh,e.totpLow)),n.Qb(5),n.Pc(n.uc(6,6,"verificationCodeTotp")),n.Qb(4),n.Pc(e.totpCodeFormatted),n.Qb(6),n.Pc(e.totpSec),n.Qb(6),n.zc("ngStyle",n.Dc(12,Lh,e.totpDash)),n.Qb(9),n.Ac("appA11yTitle",n.uc(31,8,"copyValue"))}}function jh(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1," "),n.Mc(2,Rh,18,7,"div",12),n.Oc(3," "),n.Mc(4,Vh,17,10,"div",12),n.Oc(5," "),n.Mc(6,_h,37,14,"div",13),n.Oc(7," "),n.gc()),2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",e.cipher.login.username),n.Qb(2),n.zc("ngIf",e.cipher.login.password),n.Qb(2),n.zc("ngIf",e.cipher.login.totp&&e.totpCode)}}function Kh(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"cardholderName")),n.Qb(2),n.Qc(" ",e.cipher.card.cardholderName," ")}}function Hh(e,t){if(1&e){const e=n.ic();n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"span",7),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"span",20),n.Oc(9),n.gc(),n.Oc(10," "),n.hc(11,"span",20),n.Oc(12),n.gc(),n.Oc(13," "),n.gc(),n.Oc(14," "),n.hc(15,"div",17),n.Oc(16," "),n.hc(17,"a",18),n.oc("click",(function(){n.Hc(e);return n.sc(3).toggleCardNumber()})),n.tc(18,"i18n"),n.Oc(19," "),n.dc(20,"i",27),n.Oc(21," "),n.gc(),n.Oc(22," "),n.hc(23,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc(3);return t.copy(t.cipher.card.number,"number","Card Number")})),n.tc(24,"i18n"),n.Oc(25," "),n.dc(26,"i",19),n.Oc(27," "),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc()}if(2&e){const e=n.sc(3);n.Qb(5),n.Pc(n.uc(6,8,"number")),n.Qb(3),n.zc("hidden",e.showCardNumber),n.Qb(1),n.Pc(e.cipher.card.maskedNumber),n.Qb(2),n.zc("hidden",!e.showCardNumber),n.Qb(1),n.Pc(e.cipher.card.number),n.Qb(5),n.Ac("appA11yTitle",n.uc(18,10,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(14,Fh,!e.showCardNumber,e.showCardNumber)),n.Qb(3),n.Ac("appA11yTitle",n.uc(24,12,"copyNumber"))}}function Wh(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"brand")),n.Qb(2),n.Qc(" ",e.cipher.card.brand," ")}}function qh(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"expiration")),n.Qb(2),n.Qc(" ",e.cipher.card.expiration," ")}}function Gh(e,t){if(1&e){const e=n.ic();n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"span",7),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"span",20),n.Oc(9),n.gc(),n.Oc(10," "),n.hc(11,"span",20),n.Oc(12),n.gc(),n.Oc(13," "),n.gc(),n.Oc(14," "),n.hc(15,"div",17),n.Oc(16," "),n.hc(17,"a",18),n.oc("click",(function(){n.Hc(e);return n.sc(3).toggleCardCode()})),n.tc(18,"i18n"),n.Oc(19," "),n.dc(20,"i",27),n.Oc(21," "),n.gc(),n.Oc(22," "),n.hc(23,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc(3);return t.copy(t.cipher.card.code,"securityCode","Security Code")})),n.tc(24,"i18n"),n.Oc(25," "),n.dc(26,"i",19),n.Oc(27," "),n.gc(),n.Oc(28," "),n.gc(),n.Oc(29," "),n.gc()}if(2&e){const e=n.sc(3);n.Qb(5),n.Pc(n.uc(6,8,"securityCode")),n.Qb(3),n.zc("hidden",e.showCardCode),n.Qb(1),n.Pc(e.cipher.card.maskedCode),n.Qb(2),n.zc("hidden",!e.showCardCode),n.Qb(1),n.Pc(e.cipher.card.code),n.Qb(5),n.Ac("appA11yTitle",n.uc(18,10,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(14,Fh,!e.showCardCode,e.showCardCode)),n.Qb(3),n.Ac("appA11yTitle",n.uc(24,12,"copySecurityCode"))}}function Jh(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1," "),n.Mc(2,Kh,6,4,"div",34),n.Oc(3," "),n.Mc(4,Hh,30,17,"div",12),n.Oc(5," "),n.Mc(6,Wh,6,4,"div",34),n.Oc(7," "),n.Mc(8,qh,6,4,"div",34),n.Oc(9," "),n.Mc(10,Gh,30,17,"div",12),n.Oc(11," "),n.gc()),2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",e.cipher.card.cardholderName),n.Qb(2),n.zc("ngIf",e.cipher.card.number),n.Qb(2),n.zc("ngIf",e.cipher.card.brand),n.Qb(2),n.zc("ngIf",e.cipher.card.expiration),n.Qb(2),n.zc("ngIf",e.cipher.card.code)}}function Yh(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"identityName")),n.Qb(2),n.Qc(" ",e.cipher.identity.fullName," ")}}function $h(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"username")),n.Qb(2),n.Qc(" ",e.cipher.identity.username," ")}}function Xh(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"company")),n.Qb(2),n.Qc(" ",e.cipher.identity.company," ")}}function Zh(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"ssn")),n.Qb(2),n.Qc(" ",e.cipher.identity.ssn," ")}}function ep(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"passportNumber")),n.Qb(2),n.Qc(" ",e.cipher.identity.passportNumber," ")}}function tp(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"licenseNumber")),n.Qb(2),n.Qc(" ",e.cipher.identity.licenseNumber," ")}}function ip(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"email")),n.Qb(2),n.Qc(" ",e.cipher.identity.email," ")}}function np(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,2,"phone")),n.Qb(2),n.Qc(" ",e.cipher.identity.phone," ")}}function sp(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1),n.gc()),2&e){const e=n.sc(4);n.Qb(1),n.Pc(e.cipher.identity.address1)}}function rp(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1),n.gc()),2&e){const e=n.sc(4);n.Qb(1),n.Pc(e.cipher.identity.address2)}}function op(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1),n.gc()),2&e){const e=n.sc(4);n.Qb(1),n.Pc(e.cipher.identity.address3)}}function cp(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1),n.gc()),2&e){const e=n.sc(4);n.Qb(1),n.Pc(e.cipher.identity.fullAddressPart2)}}function ap(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1),n.gc()),2&e){const e=n.sc(4);n.Qb(1),n.Pc(e.cipher.identity.country)}}function lp(e,t){if(1&e&&(n.hc(0,"div",6),n.Oc(1," "),n.hc(2,"span",7),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.Mc(6,sp,2,1,"div",8),n.Oc(7," "),n.Mc(8,rp,2,1,"div",8),n.Oc(9," "),n.Mc(10,op,2,1,"div",8),n.Oc(11," "),n.Mc(12,cp,2,1,"div",8),n.Oc(13," "),n.Mc(14,ap,2,1,"div",8),n.Oc(15," "),n.gc()),2&e){const e=n.sc(3);n.Qb(3),n.Pc(n.uc(4,6,"address")),n.Qb(3),n.zc("ngIf",e.cipher.identity.address1),n.Qb(2),n.zc("ngIf",e.cipher.identity.address2),n.Qb(2),n.zc("ngIf",e.cipher.identity.address3),n.Qb(2),n.zc("ngIf",e.cipher.identity.fullAddressPart2),n.Qb(2),n.zc("ngIf",e.cipher.identity.country)}}function dp(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1," "),n.Mc(2,Yh,6,4,"div",34),n.Oc(3," "),n.Mc(4,$h,6,4,"div",34),n.Oc(5," "),n.Mc(6,Xh,6,4,"div",34),n.Oc(7," "),n.Mc(8,Zh,6,4,"div",34),n.Oc(9," "),n.Mc(10,ep,6,4,"div",34),n.Oc(11," "),n.Mc(12,tp,6,4,"div",34),n.Oc(13," "),n.Mc(14,ip,6,4,"div",34),n.Oc(15," "),n.Mc(16,np,6,4,"div",34),n.Oc(17," "),n.Mc(18,lp,16,8,"div",34),n.Oc(19," "),n.gc()),2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",e.cipher.identity.fullName),n.Qb(2),n.zc("ngIf",e.cipher.identity.username),n.Qb(2),n.zc("ngIf",e.cipher.identity.company),n.Qb(2),n.zc("ngIf",e.cipher.identity.ssn),n.Qb(2),n.zc("ngIf",e.cipher.identity.passportNumber),n.Qb(2),n.zc("ngIf",e.cipher.identity.licenseNumber),n.Qb(2),n.zc("ngIf",e.cipher.identity.email),n.Qb(2),n.zc("ngIf",e.cipher.identity.phone),n.Qb(2),n.zc("ngIf",e.cipher.identity.address1||e.cipher.identity.city||e.cipher.identity.country)}}function up(e,t){1&e&&(n.hc(0,"span",7),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"uri")))}function hp(e,t){1&e&&(n.hc(0,"span",7),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Pc(n.uc(2,1,"website")))}function pp(e,t){if(1&e){const e=n.ic();n.hc(0,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc().$implicit;return n.sc(3).launch(t)})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",39),n.Oc(4," "),n.gc()}2&e&&n.Ac("appA11yTitle",n.uc(1,1,"launch"))}function gp(e,t){if(1&e){const e=n.ic();n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.Mc(4,up,3,3,"span",36),n.Oc(5," "),n.Mc(6,hp,3,3,"span",36),n.Oc(7," "),n.hc(8,"span",37),n.Oc(9),n.gc(),n.Oc(10," "),n.gc(),n.Oc(11," "),n.hc(12,"div",17),n.Oc(13," "),n.Mc(14,pp,5,3,"a",38),n.Oc(15," "),n.hc(16,"a",18),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).copy(i.uri,i.isWebsite?"website":"uri","URI")})),n.tc(17,"i18n"),n.Oc(18," "),n.dc(19,"i",19),n.Oc(20," "),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.gc()}if(2&e){const e=t.$implicit;n.Qb(4),n.zc("ngIf",!e.isWebsite),n.Qb(2),n.zc("ngIf",e.isWebsite),n.Qb(2),n.Ac("title",e.uri),n.Qb(1),n.Pc(e.hostOrUri),n.Qb(5),n.zc("ngIf",e.canLaunch),n.Qb(2),n.Ac("appA11yTitle",n.uc(17,6,"copyUri"))}}function fp(e,t){if(1&e&&(n.hc(0,"div",3),n.Oc(1," "),n.hc(2,"div",5),n.Oc(3," "),n.Mc(4,gp,23,8,"div",35),n.Oc(5," "),n.gc(),n.Oc(6," "),n.gc()),2&e){const e=n.sc(2);n.Qb(4),n.zc("ngForOf",e.cipher.login.uris)}}function yp(e,t){if(1&e&&(n.hc(0,"div",3),n.Oc(1," "),n.hc(2,"div",4),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"div",5),n.Oc(7," "),n.hc(8,"div",40),n.Oc(9),n.gc(),n.Oc(10," "),n.gc(),n.Oc(11," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Qc(" ",n.uc(4,2,"notes")," "),n.Qb(6),n.Pc(e.cipher.notes)}}function mp(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1),n.gc()),2&e){const e=n.sc().$implicit;n.Qb(1),n.Qc(" ",e.value||" "," ")}}function vp(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1," "),n.hc(2,"span",41),n.Oc(3),n.gc(),n.Oc(4," "),n.hc(5,"span",20),n.Oc(6),n.gc(),n.Oc(7," "),n.gc()),2&e){const e=n.sc().$implicit;n.Qb(2),n.zc("hidden",!e.showValue),n.Qb(1),n.Pc(e.value),n.Qb(2),n.zc("hidden",e.showValue),n.Qb(1),n.Pc(e.maskedValue)}}function bp(e,t){1&e&&n.dc(0,"i",45)}function wp(e,t){1&e&&n.dc(0,"i",46)}function Op(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1," "),n.Mc(2,bp,1,0,"i",42),n.Oc(3," "),n.Mc(4,wp,1,0,"i",43),n.Oc(5," "),n.hc(6,"span",44),n.Oc(7),n.gc(),n.Oc(8," "),n.gc()),2&e){const e=n.sc().$implicit;n.Qb(2),n.zc("ngIf","true"===e.value),n.Qb(2),n.zc("ngIf","true"!==e.value),n.Qb(3),n.Pc(e.value)}}function Sp(e,t){if(1&e){const e=n.ic();n.hc(0,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc().$implicit;return n.sc(3).toggleFieldValue(t)})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",27),n.Oc(4," "),n.gc()}if(2&e){const e=n.sc().$implicit;n.Ac("appA11yTitle",n.uc(1,2,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(4,Fh,!e.showValue,e.showValue))}}function Cp(e,t){if(1&e){const e=n.ic();n.hc(0,"a",18),n.oc("click",(function(){n.Hc(e);const t=n.sc().$implicit,i=n.sc(3);return i.copy(t.value,"value",t.type===i.fieldType.Hidden?"H_Field":"Field")})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",19),n.Oc(4," "),n.gc()}2&e&&n.Ac("appA11yTitle",n.uc(1,1,"copyValue"))}function Pp(e,t){if(1&e&&(n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.hc(4,"span",7),n.Oc(5),n.gc(),n.Oc(6," "),n.Mc(7,mp,2,1,"div",8),n.Oc(8," "),n.Mc(9,vp,8,4,"div",8),n.Oc(10," "),n.Mc(11,Op,9,3,"div",8),n.Oc(12," "),n.gc(),n.Oc(13," "),n.hc(14,"div",17),n.Oc(15," "),n.Mc(16,Sp,5,7,"a",38),n.Oc(17," "),n.Mc(18,Cp,5,3,"a",38),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc()),2&e){const e=t.$implicit,i=n.sc(3);n.Qb(5),n.Pc(e.name),n.Qb(2),n.zc("ngIf",e.type===i.fieldType.Text),n.Qb(2),n.zc("ngIf",e.type===i.fieldType.Hidden),n.Qb(2),n.zc("ngIf",e.type===i.fieldType.Boolean),n.Qb(5),n.zc("ngIf",e.type===i.fieldType.Hidden&&i.cipher.viewPassword),n.Qb(2),n.zc("ngIf",e.value&&e.type!==i.fieldType.Boolean&&!(e.type===i.fieldType.Hidden&&!i.cipher.viewPassword))}}function xp(e,t){if(1&e&&(n.hc(0,"div",3),n.Oc(1," "),n.hc(2,"div",4),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"div",5),n.Oc(7," "),n.Mc(8,Pp,21,6,"div",35),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Qc(" ",n.uc(4,2,"customFields")," "),n.Qb(5),n.zc("ngForOf",e.cipher.fields)}}function kp(e,t){1&e&&n.dc(0,"i",52)}function Tp(e,t){1&e&&n.dc(0,"i",53)}function Ip(e,t){if(1&e){const e=n.ic();n.hc(0,"a",48),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc(3).downloadAttachment(i)})),n.Oc(1," "),n.hc(2,"span",15),n.Oc(3),n.gc(),n.Oc(4," "),n.hc(5,"small",49),n.Oc(6),n.gc(),n.Oc(7," "),n.Mc(8,kp,1,0,"i",50),n.Oc(9," "),n.Mc(10,Tp,1,0,"i",51),n.Oc(11," "),n.gc()}if(2&e){const e=t.$implicit;n.Qb(3),n.Pc(e.fileName),n.Qb(3),n.Pc(e.sizeName),n.Qb(2),n.zc("ngIf",!e.downloading),n.Qb(2),n.zc("ngIf",e.downloading)}}function Dp(e,t){if(1&e&&(n.hc(0,"div",3),n.Oc(1," "),n.hc(2,"div",4),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"div",5),n.Oc(7," "),n.Mc(8,Ip,12,4,"a",47),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Qc(" ",n.uc(4,2,"attachments")," "),n.Qb(5),n.zc("ngForOf",e.cipher.attachments)}}function Ap(e,t){if(1&e){const e=n.ic();n.hc(0,"button",59),n.oc("click",(function(){n.Hc(e);return n.sc(3).edit()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",60),n.Oc(4," "),n.hc(5,"span"),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.gc()}2&e&&(n.Ac("appA11yTitle",n.uc(1,2,"edit")),n.Qb(6),n.Pc(n.uc(7,4,"edit")))}function Mp(e,t){if(1&e){const e=n.ic();n.hc(0,"button",59),n.oc("click",(function(){n.Hc(e);return n.sc(3).restore()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",61),n.Oc(4," "),n.hc(5,"span"),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.gc()}2&e&&(n.Ac("appA11yTitle",n.uc(1,2,"restore")),n.Qb(6),n.Pc(n.uc(7,4,"restore")))}function zp(e,t){if(1&e){const e=n.ic();n.hc(0,"button",59),n.oc("click",(function(){n.Hc(e);return n.sc(3).clone()})),n.tc(1,"i18n"),n.Oc(2," "),n.dc(3,"i",62),n.Oc(4," "),n.hc(5,"span"),n.Oc(6),n.tc(7,"i18n"),n.gc(),n.Oc(8," "),n.gc()}2&e&&(n.Ac("appA11yTitle",n.uc(1,2,"clone")),n.Qb(6),n.Pc(n.uc(7,4,"clone")))}function Ep(e,t){if(1&e){const e=n.ic();n.hc(0,"div",54),n.Oc(1," "),n.Mc(2,Ap,9,6,"button",55),n.Oc(3," "),n.Mc(4,Mp,9,6,"button",55),n.Oc(5," "),n.Mc(6,zp,9,6,"button",55),n.Oc(7," "),n.hc(8,"div",56),n.Oc(9," "),n.hc(10,"button",57),n.oc("click",(function(){n.Hc(e);return n.sc(2).delete()})),n.tc(11,"i18n"),n.Oc(12," "),n.dc(13,"i",58),n.Oc(14," "),n.gc(),n.Oc(15," "),n.gc(),n.Oc(16," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(2),n.zc("ngIf",!e.cipher.isDeleted),n.Qb(2),n.zc("ngIf",e.cipher.isDeleted),n.Qb(2),n.zc("ngIf",!(null!=e.cipher&&e.cipher.organizationId||e.cipher.isDeleted)),n.Qb(4),n.Ac("appA11yTitle",n.uc(11,4,e.cipher.isDeleted?"permanentlyDelete":"delete"))}}function Up(e,t){if(1&e&&(n.hc(0,"div"),n.Oc(1," "),n.hc(2,"b",11),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5),n.tc(6,"date"),n.gc()),2&e){const e=n.sc(2);n.Qb(3),n.Qc("",n.uc(4,2,"datePasswordUpdated"),":"),n.Qb(2),n.Qc(" ",n.vc(6,4,e.cipher.passwordRevisionDisplayDate,"medium")," ")}}function Np(e,t){if(1&e){const e=n.ic();n.hc(0,"div"),n.Oc(1," "),n.hc(2,"b",11),n.Oc(3),n.tc(4,"i18n"),n.gc(),n.Oc(5," "),n.hc(6,"a",63),n.oc("click",(function(){n.Hc(e);return n.sc(2).viewHistory()})),n.tc(7,"i18n"),n.Oc(8," "),n.hc(9,"span",64),n.Oc(10),n.gc(),n.Oc(11," "),n.gc(),n.Oc(12," "),n.gc()}if(2&e){const e=n.sc(2);n.Qb(3),n.Qc("",n.uc(4,4,"passwordHistory"),":"),n.Qb(3),n.Cc("appA11yTitle","",n.uc(7,6,"passwordHistory"),", ",e.cipher.passwordHistory.length,""),n.Qb(4),n.Pc(e.cipher.passwordHistory.length)}}function Rp(e,t){if(1&e&&(n.hc(0,"div",2),n.Oc(1," "),n.hc(2,"div",3),n.Oc(3," "),n.hc(4,"div",4),n.Oc(5),n.tc(6,"i18n"),n.gc(),n.Oc(7," "),n.hc(8,"div",5),n.Oc(9," "),n.hc(10,"div",6),n.Oc(11," "),n.hc(12,"span",7),n.Oc(13),n.tc(14,"i18n"),n.gc(),n.Oc(15),n.gc(),n.Oc(16," "),n.Mc(17,jh,8,3,"div",8),n.Oc(18," "),n.Mc(19,Jh,12,5,"div",8),n.Oc(20," "),n.Mc(21,dp,20,9,"div",8),n.Oc(22," "),n.gc(),n.Oc(23," "),n.gc(),n.Oc(24," "),n.Mc(25,fp,7,1,"div",9),n.Oc(26," "),n.Mc(27,yp,12,4,"div",9),n.Oc(28," "),n.Mc(29,xp,11,4,"div",9),n.Oc(30," "),n.Mc(31,Dp,11,4,"div",9),n.Oc(32," "),n.Mc(33,Ep,17,6,"div",10),n.Oc(34," "),n.hc(35,"div",3),n.Oc(36," "),n.hc(37,"div"),n.Oc(38," "),n.hc(39,"b",11),n.Oc(40),n.tc(41,"i18n"),n.gc(),n.Oc(42),n.tc(43,"date"),n.gc(),n.Oc(44," "),n.Mc(45,Up,7,7,"div",8),n.Oc(46," "),n.Mc(47,Np,13,8,"div",8),n.Oc(48," "),n.gc(),n.Oc(49," "),n.gc()),2&e){const e=n.sc();n.Qb(5),n.Qc(" ",n.uc(6,15,"itemInformation")," "),n.Qb(8),n.Pc(n.uc(14,17,"name")),n.Qb(2),n.Qc(" ",e.cipher.name," "),n.Qb(2),n.zc("ngIf",e.cipher.login),n.Qb(2),n.zc("ngIf",e.cipher.card),n.Qb(2),n.zc("ngIf",e.cipher.identity),n.Qb(4),n.zc("ngIf",e.cipher.login&&e.cipher.login.hasUris),n.Qb(2),n.zc("ngIf",e.cipher.notes),n.Qb(2),n.zc("ngIf",e.cipher.hasFields),n.Qb(2),n.zc("ngIf",e.cipher.hasAttachments&&(e.canAccessPremium||e.cipher.organizationId)),n.Qb(2),n.zc("ngIf",e.cipher&&!e.isReadOnly),n.Qb(7),n.Qc("",n.uc(41,19,"dateUpdated"),":"),n.Qb(2),n.Qc(" ",n.vc(43,21,e.cipher.revisionDate,"medium")," "),n.Qb(3),n.zc("ngIf",e.cipher.passwordRevisionDisplayDate),n.Qb(2),n.zc("ngIf",e.cipher.hasPasswordHistory)}}class Fp extends Uh{constructor(e,t,i,s,r,o,c,a,l,d,u,h,p,g,f,y){super(e,t,i,s,r,o,c,window,a,l,d,u,h,p,f),this.messagingService=g,this.collectionService=y,this.onViewCipherPasswordHistory=new n.t,this.isReadOnly=!1}ngOnInit(){super.ngOnInit(),this.broadcasterService.subscribe("ViewComponent",e=>{this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})})}ngOnDestroy(){super.ngOnDestroy(),this.broadcasterService.unsubscribe("ViewComponent")}ngOnChanges(){const e=Object.create(null,{load:{get:()=>super.load}});var t;return Nh(this,void 0,void 0,(function*(){if(yield e.load.call(this),(null===(t=this.cipher.collectionIds)||void 0===t?void 0:t.length)>0){let e=!0;for(const t of this.cipher.collectionIds){if(!(yield this.collectionService.get(t)).readOnly){e=!1;break}}this.isReadOnly=e}else this.isReadOnly=!1}))}viewHistory(){this.onViewCipherPasswordHistory.emit(this.cipher)}copy(e,t,i){const n=Object.create(null,{copy:{get:()=>super.copy}});return Nh(this,void 0,void 0,(function*(){n.copy.call(this,e,t,i),this.messagingService.send("minimizeOnCopy")}))}onWindowHidden(){this.showPassword=!1,this.showCardCode=!1,null!==this.cipher&&this.cipher.hasFields&&this.cipher.fields.forEach(e=>{e.showValue=!1})}}Fp.ɵfac=function(e){return new(e||Fp)(n.cc(C),n.cc(Jd),n.cc(Or),n.cc(I.a),n.cc(x.a),n.cc(A.a),n.cc(Ia),n.cc(Sr),n.cc(n.M),n.cc(n.j),n.cc(z.a),n.cc(Da),n.cc(O),n.cc(a.a),n.cc(zh),n.cc(P))},Fp.ɵcmp=n.Wb({type:Fp,selectors:[["app-vault-view"]],outputs:{onViewCipherPasswordHistory:"onViewCipherPasswordHistory"},features:[n.Nb,n.Ob],decls:5,vars:1,consts:[[1,"content"],["class","inner-content",4,"ngIf"],[1,"inner-content"],[1,"box"],[1,"box-header"],[1,"box-content"],[1,"box-content-row"],[1,"row-label"],[4,"ngIf"],["class","box",4,"ngIf"],["class","footer",4,"ngIf"],[1,"font-weight-semibold"],["class","box-content-row box-content-row-flex",4,"ngIf"],["class","box-content-row box-content-row-flex totp",3,"ngClass",4,"ngIf"],[1,"box-content-row","box-content-row-flex"],[1,"row-main"],["draggable","true",1,"row-label","draggable",3,"dragstart"],[1,"action-buttons"],["href","#","appStopClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg","fa-clone"],[1,"monospaced",3,"hidden"],["appSelectCopy","",1,"monospaced","password-wrapper",3,"hidden","innerHTML"],["class","action-buttons",4,"ngIf"],["type","button","appBlurClick","",1,"row-btn","btn",3,"appA11yTitle","appApiAction","disabled","click"],["checkPasswordBtn",""],["aria-hidden","true",1,"fa","fa-lg","fa-check-circle",3,"hidden"],["aria-hidden","true",1,"fa","fa-lg","fa-spinner","fa-spin",3,"hidden"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],[1,"box-content-row","box-content-row-flex","totp",3,"ngClass"],[1,"totp-code"],[1,"totp-countdown"],[1,"totp-sec"],["r","12.6","cy","16","cx","16",1,"totp-circle","inner",3,"ngStyle"],["r","14","cy","16","cx","16",1,"totp-circle","outer"],["class","box-content-row",4,"ngIf"],["class","box-content-row box-content-row-flex",4,"ngFor","ngForOf"],["class","row-label",4,"ngIf"],[3,"title"],["class","row-btn","href","#","appStopClick","","role","button",3,"appA11yTitle","click",4,"ngIf"],["aria-hidden","true",1,"fa","fa-lg","fa-share-square-o"],[1,"box-content-row","pre-wrap"],[1,"monospaced","show-whitespace",3,"hidden"],["class","fa fa-check-square-o","aria-hidden","true",4,"ngIf"],["class","fa fa-square-o","aria-hidden","true",4,"ngIf"],[1,"sr-only"],["aria-hidden","true",1,"fa","fa-check-square-o"],["aria-hidden","true",1,"fa","fa-square-o"],["class","box-content-row box-content-row-flex text-default","href","#","appStopClick","","appBlurCLick","",3,"click",4,"ngFor","ngForOf"],["href","#","appStopClick","","appBlurCLick","",1,"box-content-row","box-content-row-flex","text-default",3,"click"],[1,"row-sub-label"],["class","fa fa-download fa-fw row-sub-icon","aria-hidden","true",4,"ngIf"],["class","fa fa-spinner fa-fw fa-spin row-sub-icon","aria-hidden","true",4,"ngIf"],["aria-hidden","true",1,"fa","fa-download","fa-fw","row-sub-icon"],["aria-hidden","true",1,"fa","fa-spinner","fa-fw","fa-spin","row-sub-icon"],[1,"footer"],["appBlurClick","","class","primary",3,"appA11yTitle","click",4,"ngIf"],[1,"right"],["appBlurClick","","type","button",1,"danger",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw"],["appBlurClick","",1,"primary",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-pencil","fa-fw","fa-lg"],["aria-hidden","true",1,"fa","fa-undo","fa-fw","fa-lg"],["aria-hidden","true",1,"fa","fa-files-o","fa-fw","fa-lg"],["href","#","appStopClick","","role","button",3,"appA11yTitle","click"],["aria-hidden","true"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.Mc(2,Rp,50,24,"div",1),n.Oc(3," "),n.gc(),n.Oc(4," ")),2&e&&(n.Qb(2),n.zc("ngIf",t.cipher))},directives:[Dr.k,Ar,Mr,rh,fr,hr,Dr.i,Dr.l,Dr.j],pipes:[yr.a,Dr.d,oh],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Fp,[{type:n.l,args:[{selector:"app-vault-view",templateUrl:"view.component.html"}]}],(function(){return[{type:C},{type:Jd},{type:Or},{type:I.a},{type:x.a},{type:A.a},{type:Ia},{type:Sr},{type:n.M},{type:n.j},{type:z.a},{type:Da},{type:O},{type:a.a},{type:zh},{type:P}]}),{onViewCipherPasswordHistory:[{type:n.O}]});var Qp=i(84),Vp=i(787);function Bp(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function Lp(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?Bp(Object(i),!0).forEach((function(t){zn()(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):Bp(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}var _p=function(e){var t=e.reactWrapperProps,i=e.confirmationMethods,n=e.showModal,s=void 0!==n&&n,r=e.closeModal,o=Lp(Lp({},i),{},{recipientConfirmationDialogContent:dd.a});return N.a.createElement($s,{reactWrapperProps:t},N.a.createElement(ud.a,{doctype:"com.bitwarden.organizations",documentType:"Organizations",previewPath:""},s&&N.a.createElement(Vp.a,{onClose:r,twoStepsConfirmationMethods:o})))};_p.propTypes={reactWrapperProps:Gs.isRequired,showModal:Xt.a.bool.isRequired,closeModal:Xt.a.func.isRequired};var jp=_p,Kp=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Hp extends Jt{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g,f){super(e,t,i,n,s,r,o,c,a,l,d,u,h,p),this.sharingService=g,this.broadcasterService=f,this.showModal=!1,this.waitForFirstSync=!0,this.usersToBeConfirmedCached=null}ngOnInit(){super.ngOnInit(),this.broadcasterService.subscribe("ConfirmTrustedUsersComponent",e=>{switch(e.command){case"syncCompleted":this.waitForFirstSync&&(this.waitForFirstSync=!1,this.showModal=!0,this.firstRenderReact())}})}getProps(){return Kp(this,void 0,void 0,(function*(){return{reactWrapperProps:yield this.getReactWrapperProps(),confirmationMethods:this.getTwoStepsConfirmationMethods(),showModal:this.showModal,closeModal:this.closeModal.bind(this)}}))}firstRenderReact(){return Kp(this,void 0,void 0,(function*(){this.usersToBeConfirmedCached=yield this.sharingService.loadAllUsersToBeConfirmed(),0!==this.usersToBeConfirmedCached.length&&this.renderReact()}))}renderReact(){return Kp(this,void 0,void 0,(function*(){R.render(U.createElement(jp,yield this.getProps()),this.getRootDomNode())}))}loadUsersToBeConfirmed(){return Kp(this,void 0,void 0,(function*(){if(this.usersToBeConfirmedCached){const e=this.usersToBeConfirmedCached;return this.usersToBeConfirmedCached=null,e}const e=yield this.sharingService.loadAllUsersToBeConfirmed();return 0===e.length&&!0===this.showModal&&this.closeModal(),e}))}confirmUser(e){return Kp(this,void 0,void 0,(function*(){return yield this.sharingService.confirmUser(e)}))}rejectUser(e){return Kp(this,void 0,void 0,(function*(){return yield this.sharingService.rejectUser(e)}))}getTwoStepsConfirmationMethods(){return{getRecipientsToBeConfirmed:this.loadUsersToBeConfirmed.bind(this),confirmRecipient:this.confirmUser.bind(this),rejectRecipient:this.rejectUser.bind(this)}}closeModal(){this.showModal=!1,this.renderReact()}}Hp.ɵfac=function(e){return new(e||Hp)(n.cc(y),n.cc(O),n.cc(k),n.cc(S),n.cc(M),n.cc(x.a),n.cc(C),n.cc(z.a),n.cc(P),n.cc(D),n.cc(E.a),n.cc(T),n.cc(I.a),n.cc(A.a),n.cc(ld),n.cc(Sr))},Hp.ɵcmp=n.Wb({type:Hp,selectors:[["app-confirm-trusted-users"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Hp,[{type:n.l,args:[{selector:"app-confirm-trusted-users",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],(function(){return[{type:y},{type:O},{type:k},{type:S},{type:M},{type:x.a},{type:C},{type:z.a},{type:P},{type:D},{type:E.a},{type:T},{type:I.a},{type:A.a},{type:ld},{type:Sr}]}),null);var Wp=i(451),qp=i(551),Gp=i(196),Jp=i(48),Yp=i.n(Jp),$p=i(884),Xp=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}return i},Zp=function(e){var t=e.vaultClient,i=Xp(e,["vaultClient"]),n=t.getImportOptions(),s=[].concat(Yp()(n.featured),Yp()(n.regular)).map((function(e){return{value:e.id,label:e.name}}));return N.a.createElement($p.a,Ui()({type:"select"},i,{options:s}))};Zp.propTypes={vaultClient:Xt.a.shape({getImportOptions:Xt.a.func}).isRequired};var eg=Zp,tg=function(e,t){return new Promise((function(i,n){var s=new FileReader;s.readAsText(e,"utf-8"),s.onload=function(s){if("lastpasscsv"===t&&"text/html"===e.type){var r=(new DOMParser).parseFromString(s.target.result,"text/html").querySelector("pre");return null!=r?void i(r.textContent):void n()}i(s.target.result)},s.onerror=function(){n()}}))},ig=i(433),ng=i.n(ig),sg="undefined"!=typeof window&&window.minilog?window.minilog:ng.a,rg=sg("passwords");sg.suggest.allow("passwords","log"),sg.suggest.allow("passwords","info");var og=rg,cg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))},ag=Object(Nn.c)((function(e){var t=e.vaultClient,i=Object(oi.e)().t,n=Object(vi.b)().isMobile,s=Object(U.useState)(),r=ei()(s,2),o=r[0],c=r[1],a=Object(U.useState)("waiting"),l=ei()(a,2),d=l[0],u=l[1],p=Object(U.useState)(null),g=ei()(p,2),f=g[0],y=g[1],m=Object(U.useRef)(null);return N.a.createElement(N.a.Fragment,null,N.a.createElement(cn,null,N.a.createElement(Qi,null,N.a.createElement(gi.a,{spacing:"l"},n?null:N.a.createElement(fi.b,null,i("ImportPage.title")),N.a.createElement("form",{onSubmit:function(e){return cg(void 0,void 0,void 0,ii.a.mark((function i(){return ii.a.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return e.preventDefault(),u("importing"),y(null),i.next=5,t.isLocked();case 5:if(i.sent){i.next=9;break}return i.next=9,cg(void 0,void 0,void 0,ii.a.mark((function e(){var i,n;return ii.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,tg(m.current.files[0]);case 3:i=e.sent,e.next=11;break;case 6:return e.prev=6,e.t0=e.catch(0),u("errored"),og.error(e.t0),e.abrupt("return");case 11:return e.prev=11,e.next=14,t.import(i,o.value);case 14:n=e.sent,y(n),u("imported"),e.next=23;break;case 19:return e.prev=19,e.t1=e.catch(11),u("errored"),e.abrupt("return");case 23:case"end":return e.stop()}}),e,null,[[0,6],[11,19]])})));case 9:case"end":return i.stop()}}),i)})))}},N.a.createElement(eg,{vaultClient:t,value:o,onChange:c,label:i("ImportPage.options.label"),placeholder:i("ImportPage.options.placeholder")}),N.a.createElement(Wp.a,{htmlFor:"file"},i("ImportPage.file.label")),N.a.createElement("input",{type:"file",ref:m,id:"file"}),N.a.createElement(pi.c,{type:"submit",label:i("ImportPage.submit"),extension:"full",className:"u-mt-1"}))))),"waiting"!==d?N.a.createElement(qp.b,{closable:!1},N.a.createElement(Gp.b,null,N.a.createElement(fi.b,null,"importing"===d?i("ImportPage.modal.importing.title"):null,"imported"===d?i("ImportPage.modal.imported.title"):null,"errored"===d?i("ImportPage.modal.errored.title"):null)),N.a.createElement(qp.a,null,"importing"===d?N.a.createElement("div",{className:"u-flex"},N.a.createElement(Yn.a,{size:"xxlarge",className:"u-mh-auto"})):null,h()("passwords.debug")&&f?N.a.createElement("pre",null,JSON.stringify(f,null,2)):null,"imported"===d?N.a.createElement("p",null,i("ImportPage.modal.imported.content")):null,"errored"===d?N.a.createElement("p",null,i("ImportPage.modal.errored.content")):null,"imported"===d||"errored"===d?N.a.createElement(pi.c,{extension:"full",onClick:function(){u("waiting")},label:i("ImportPage.modal.close")}):null)):null)})),lg=function(e){var t=e.reactWrapperProps;return N.a.createElement($s,{reactWrapperProps:t},N.a.createElement(ag,null))};lg.propTypes={reactWrapperProps:Gs.isRequired};var dg=lg,ug=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class hg extends Jt{getProps(){return ug(this,void 0,void 0,(function*(){return{reactWrapperProps:yield this.getReactWrapperProps()}}))}renderReact(){return ug(this,void 0,void 0,(function*(){R.render(U.createElement(dg,yield this.getProps()),this.getRootDomNode())}))}}hg.ɵfac=function(e){return pg(e||hg)},hg.ɵcmp=n.Wb({type:hg,selectors:[["app-import-page"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2});const pg=n.jc(hg);("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(hg,[{type:n.l,args:[{selector:"app-import-page",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],null,null);var gg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const fg=["passwordGenerator"],yg=["attachments"],mg=["passwordHistory"],vg=["share"],bg=["collections"],wg=["folderAddEdit"];function Og(e,t){if(1&e){const e=n.ic();n.hc(0,"app-vault-view",13),n.oc("onCloneCipher",(function(t){n.Hc(e);return n.sc().cloneCipher(t)}))("onEditCipher",(function(t){n.Hc(e);return n.sc().editCipher(t)}))("onViewCipherPasswordHistory",(function(t){n.Hc(e);return n.sc().viewCipherPasswordHistory(t)}))("onRestoredCipher",(function(t){n.Hc(e);return n.sc().restoredCipher(t)}))("onDeletedCipher",(function(t){n.Hc(e);return n.sc().deletedCipher(t)})),n.Oc(1," "),n.gc()}if(2&e){const e=n.sc();n.zc("cipherId",e.cipherId)}}function Sg(e,t){if(1&e){const e=n.ic();n.hc(0,"app-vault-add-edit",14),n.oc("onSavedCipher",(function(t){n.Hc(e);return n.sc().savedCipher(t)}))("onDeletedCipher",(function(t){n.Hc(e);return n.sc().deletedCipher(t)}))("onEditAttachments",(function(t){n.Hc(e);return n.sc().editCipherAttachments(t)}))("onCancelled",(function(t){n.Hc(e);return n.sc().cancelledAddEdit(t)}))("onShareCipher",(function(t){n.Hc(e);return n.sc().shareCipher(t)}))("onEditCollections",(function(t){n.Hc(e);return n.sc().cipherCollections(t)}))("onGeneratePassword",(function(){n.Hc(e);return n.sc().openPasswordGenerator(!0)})),n.Oc(1," "),n.gc()}if(2&e){const e=n.sc();n.zc("cloneMode","clone"===e.action)("folderId","add"===e.action&&"none"!==e.folderId?e.folderId:null)("organizationId","add"===e.action?e.addOrganizationId:null)("collectionIds","add"===e.action?e.addCollectionIds:null)("type","add"===e.action?e.addType?e.addType:e.type:null)("cipherId","edit"===e.action||"clone"===e.action?e.cipherId:null)}}function Cg(e,t){1&e&&(n.hc(0,"app-import-page",15),n.Oc(1," "),n.gc())}function Pg(e,t){1&e&&(n.hc(0,"div",16),n.Oc(1," "),n.hc(2,"div",17),n.Oc(3," "),n.hc(4,"div",18),n.Oc(5," "),n.rc(),n.hc(6,"svg",19),n.Oc(7," "),n.dc(8,"path",20),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc(),n.Oc(11," "),n.gc(),n.Oc(12," "),n.gc())}function xg(e,t){}function kg(e,t){}function Tg(e,t){}function Ig(e,t){}function Dg(e,t){}function Ag(e,t){}class Mg{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p,g,f,y){this.route=e,this.router=t,this.componentFactoryResolver=i,this.i18nService=n,this.broadcasterService=s,this.changeDetectorRef=r,this.ngZone=o,this.syncService=c,this.toasterService=a,this.messagingService=l,this.platformUtilsService=d,this.eventService=u,this.totpService=h,this.userService=p,this.passwordRepromptService=g,this.sanitizer=f,this.collectionService=y,this.action="view",this.cipherId=null,this.favorites=!1,this.type=null,this.folderId=null,this.collectionId=null,this.addType=null,this.addOrganizationId=null,this.addCollectionIds=null,this.showingModal=!1,this.deleted=!1,this.loaded=!1,this.userHasPremiumAccess=!1,this.modal=null,this.isAddonInstalled=!1,this.isAddonTested=!1}ngOnInit(){return gg(this,void 0,void 0,(function*(){this.isAddonInstalled=yield this.checkExtensionInit(),this.isAddonTested=!0,this.userHasPremiumAccess=yield this.userService.canAccessPremium(),this.broadcasterService.subscribe("VaultComponent",e=>{this.ngZone.run(()=>gg(this,void 0,void 0,(function*(){let t=!0;switch(e.command){case"newLogin":yield this.addCipher(B.a.Login);break;case"newCard":yield this.addCipher(B.a.Card);break;case"newIdentity":yield this.addCipher(B.a.Identity);break;case"newSecureNote":yield this.addCipher(B.a.SecureNote);break;case"focusSearch":document.querySelector("#search").select(),t=!1;break;case"openPasswordGenerator":yield this.openPasswordGenerator(!1);break;case"syncCompleted":this.loaded=!1,yield this.load();break;case"refreshCiphers":this.ciphersComponent.refresh();break;case"modalShown":this.showingModal=!0;break;case"modalClosed":this.showingModal=!1;break;case"copyUsername":const e=null==this.addEditComponent?this.viewComponent:this.addEditComponent,i=null!=e?e.cipher:null;null!=this.cipherId&&null!=i&&i.id===this.cipherId&&null!=i.login&&null!=i.login.username&&this.copyValue(i,i.login.username,"username","Username");break;case"copyPassword":const n=null==this.addEditComponent?this.viewComponent:this.addEditComponent,s=null!=n?n.cipher:null;null!=this.cipherId&&null!=s&&s.id===this.cipherId&&null!=s.login&&null!=s.login.password&&s.viewPassword&&this.copyValue(s,s.login.password,"password","Password");break;case"copyTotp":const r=null==this.addEditComponent?this.viewComponent:this.addEditComponent,o=null!=r?r.cipher:null;if(null!=this.cipherId&&null!=o&&o.id===this.cipherId&&null!=o.login&&o.login.hasTotp&&this.userHasPremiumAccess){const e=yield this.totpService.getCode(o.login.totp);this.copyValue(o,e,"verificationCodeTotp","TOTP")}default:t=!1}t&&this.changeDetectorRef.detectChanges()})))}),this.syncService.syncInProgress||(yield this.load()),document.body.classList.remove("layout_frontend")}))}ngOnDestroy(){this.broadcasterService.unsubscribe("VaultComponent"),document.body.classList.add("layout_frontend")}load(){return gg(this,void 0,void 0,(function*(){const e=this.route.queryParams.subscribe(t=>gg(this,void 0,void 0,(function*(){if(!this.loaded){if(yield this.groupingsComponent.load(),this.loaded=!0,null==t)this.groupingsComponent.selectedAll=!0,yield this.ciphersComponent.reload();else{if(t.cipherId){const e=new J.a;e.id=t.cipherId,"clone"===t.action?yield this.cloneCipher(e):"edit"===t.action?yield this.editCipher(e):(this.type=t.type,yield this.viewCipher(e))}else"add"===t.action&&(this.addType=Number(t.addType),this.addCipher(this.addType));if(t.deleted)this.groupingsComponent.selectedTrash=!0,yield this.filterDeleted(["cipherId"]);else if(t.favorites)this.groupingsComponent.selectedFavorites=!0,yield this.filterFavorites();else if(t.type&&"add"!==t.action){const e=parseInt(t.type,null);this.groupingsComponent.selectedType=e,yield this.filterCipherType(e,["cipherId"])}else t.folderId?(this.groupingsComponent.selectedFolder=!0,this.groupingsComponent.selectedFolderId=t.folderId,yield this.filterFolder(t.folderId,["cipherId"])):t.collectionId?(this.groupingsComponent.selectedCollectionId=t.collectionId,yield this.filterCollection(t.collectionId)):"import"===t.action?this.startImport():(this.groupingsComponent.selectedAll=!0,yield this.ciphersComponent.reload())}null!=e&&e.unsubscribe()}})))}))}shouldDisplayCiphersList(){return this.isAddonTested?"":"hidden"}viewCipher(e){return gg(this,void 0,void 0,(function*(){"view"===this.action&&this.cipherId===e.id||this.dirtyInput()&&(yield this.wantsToSaveChanges())||(this.cipherId=e.id,this.action="view",this.go())}))}viewCipherMenu(e){const t=[{label:this.i18nService.t("view"),click:()=>this.functionWithChangeDetection(()=>{this.viewCipher(e)})}];switch(e.isDeleted||(t.push({label:this.i18nService.t("edit"),click:()=>this.functionWithChangeDetection(()=>{this.editCipher(e)})}),t.push({label:this.i18nService.t("clone"),click:()=>this.functionWithChangeDetection(()=>{this.cloneCipher(e)})})),e.type){case B.a.Login:(e.login.canLaunch||null!=e.login.username||null!=e.login.password)&&t.push({type:"separator"}),e.login.canLaunch&&t.push({label:this.i18nService.t("launch"),click:()=>this.platformUtilsService.launchUri(e.login.launchUri)}),null!=e.login.username&&t.push({label:this.i18nService.t("copyUsername"),click:()=>this.copyValue(e,e.login.username,"username","Username")}),null!=e.login.password&&e.viewPassword&&t.push({label:this.i18nService.t("copyPassword"),click:()=>{this.copyValue(e,e.login.password,"password","Password"),this.eventService.collect(Aa.Cipher_ClientCopiedPassword,e.id)}}),e.login.hasTotp&&(e.organizationUseTotp||this.userHasPremiumAccess)&&t.push({label:this.i18nService.t("copyVerificationCodeTotp"),click:()=>gg(this,void 0,void 0,(function*(){const t=yield this.totpService.getCode(e.login.totp);this.copyValue(e,t,"verificationCodeTotp","TOTP")}))});break;case B.a.Card:null==e.card.number&&null==e.card.code||t.push({type:"separator"}),null!=e.card.number&&t.push({label:this.i18nService.t("copyNumber"),click:()=>this.copyValue(e,e.card.number,"number","Card Number")}),null!=e.card.code&&t.push({label:this.i18nService.t("copySecurityCode"),click:()=>{this.copyValue(e,e.card.code,"securityCode","Security Code"),this.eventService.collect(Aa.Cipher_ClientCopiedCardCode,e.id)}})}Object(s.a)(t)}editCipher(e){return gg(this,void 0,void 0,(function*(){"edit"===this.action&&this.cipherId===e.id||this.dirtyInput()&&(yield this.wantsToSaveChanges())||(e.reprompt===fe.a.None||(yield this.passwordRepromptService.showPasswordPrompt()))&&(this.cipherId=e.id,this.action="edit",this.go())}))}cloneCipher(e){return gg(this,void 0,void 0,(function*(){"clone"===this.action&&this.cipherId===e.id||this.dirtyInput()&&(yield this.wantsToSaveChanges())||(e.reprompt===fe.a.None||(yield this.passwordRepromptService.showPasswordPrompt()))&&(this.cipherId=e.id,this.action="clone",this.go())}))}addCipher(e=null){return gg(this,void 0,void 0,(function*(){"add"!==this.action&&(this.dirtyInput()&&(yield this.wantsToSaveChanges())||(this.addType=e,this.action="add",this.cipherId=null,this.updateCollectionProperties(),this.go()))}))}addCipherOptions(){const e=[{label:this.i18nService.t("typeLogin"),click:()=>this.addCipherWithChangeDetection(B.a.Login)},{label:this.i18nService.t("typeCard"),click:()=>this.addCipherWithChangeDetection(B.a.Card)},{label:this.i18nService.t("typeIdentity"),click:()=>this.addCipherWithChangeDetection(B.a.Identity)},{label:this.i18nService.t("typeSecureNote"),click:()=>this.addCipherWithChangeDetection(B.a.SecureNote)}];Object(s.a)(e)}savedCipher(e){return gg(this,void 0,void 0,(function*(){this.cipherId=e.id,this.action="view",this.go(),yield this.ciphersComponent.refresh()}))}deletedCipher(e){return gg(this,void 0,void 0,(function*(){this.cipherId=null,this.action=null,this.go(),yield this.ciphersComponent.refresh()}))}restoredCipher(e){return gg(this,void 0,void 0,(function*(){this.cipherId=null,this.action=null,this.go(),yield this.ciphersComponent.refresh()}))}editCipherAttachments(e){null!=this.modal&&this.modal.close();const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.attachmentsModalRef.createComponent(t).instance;const i=this.modal.show(ql,this.attachmentsModalRef,!0,t=>t.cipherId=e.id);let n=!1;i.onUploadedAttachment.subscribe(()=>n=!0),i.onDeletedAttachment.subscribe(()=>n=!0),this.modal.onClosed.subscribe(()=>gg(this,void 0,void 0,(function*(){this.modal=null,n&&(yield this.ciphersComponent.refresh()),n=!1})))}shareCipher(e){null!=this.modal&&this.modal.close();const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.shareModalRef.createComponent(t).instance;this.modal.show(Mh,this.shareModalRef,!0,t=>t.cipherId=e.id).onSharedCipher.subscribe(()=>gg(this,void 0,void 0,(function*(){this.modal.close(),this.viewCipher(e),yield this.ciphersComponent.refresh()}))),this.modal.onClosed.subscribe(()=>gg(this,void 0,void 0,(function*(){this.modal=null})))}cipherCollections(e){null!=this.modal&&this.modal.close();const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.collectionsModalRef.createComponent(t).instance;this.modal.show(Wd,this.collectionsModalRef,!0,t=>t.cipherId=e.id).onSavedCollections.subscribe(()=>{this.modal.close(),this.viewCipher(e)}),this.modal.onClosed.subscribe(()=>gg(this,void 0,void 0,(function*(){this.modal=null})))}viewCipherPasswordHistory(e){null!=this.modal&&this.modal.close();const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.passwordHistoryModalRef.createComponent(t).instance,this.modal.show(yh,this.passwordHistoryModalRef,!0,t=>t.cipherId=e.id),this.modal.onClosed.subscribe(()=>gg(this,void 0,void 0,(function*(){this.modal=null})))}cancelledAddEdit(e){this.cipherId=e.id,this.action=null!=this.cipherId?"view":null,this.go()}clearGroupingFilters(){return gg(this,void 0,void 0,(function*(){this.dirtyInput()&&(yield this.wantsToSaveChanges())?this.groupingsComponent.revertSelection():(this.ciphersComponent.searchPlaceholder=this.i18nService.t("searchVault"),yield this.ciphersComponent.reload(),this.clearFilters(),this.go())}))}filterFavorites(){return gg(this,void 0,void 0,(function*(){this.dirtyInput()&&(yield this.wantsToSaveChanges())?this.groupingsComponent.revertSelection():(this.ciphersComponent.searchPlaceholder=this.i18nService.t("searchFavorites"),yield this.ciphersComponent.reload(e=>e.favorite),this.clearFilters(),this.favorites=!0,this.go())}))}filterDeleted(e=[]){return gg(this,void 0,void 0,(function*(){this.dirtyInput()&&(yield this.wantsToSaveChanges())?this.groupingsComponent.revertSelection():(this.ciphersComponent.searchPlaceholder=this.i18nService.t("searchTrash"),this.ciphersComponent.deleted=!0,yield this.ciphersComponent.reload(null,!0),this.clearFilters(e),this.action="view",this.deleted=!0,this.go())}))}startImport(){return gg(this,void 0,void 0,(function*(){this.dirtyInput()&&(yield this.wantsToSaveChanges())?this.groupingsComponent.revertSelection():(this.clearFilters(),this.action="import",this.go())}))}filterCipherType(e,t=[]){return gg(this,void 0,void 0,(function*(){this.dirtyInput()&&(yield this.wantsToSaveChanges())?this.groupingsComponent.revertSelection():(this.ciphersComponent.searchPlaceholder=this.i18nService.t("searchType"),yield this.ciphersComponent.reload(t=>t.type===e),this.clearFilters(t),this.action="view",this.type=e,this.go())}))}filterFolder(e,t=[]){return gg(this,void 0,void 0,(function*(){this.dirtyInput()&&(yield this.wantsToSaveChanges())?this.groupingsComponent.revertSelection():(e="none"===e?null:e,this.ciphersComponent.searchPlaceholder=this.i18nService.t("searchFolder"),yield this.ciphersComponent.reload(t=>t.folderId===e),this.clearFilters(t),this.action="view",this.folderId=null==e?"none":e,this.go())}))}filterCollection(e){return gg(this,void 0,void 0,(function*(){if(this.dirtyInput()&&(yield this.wantsToSaveChanges()))return void this.groupingsComponent.revertSelection();this.ciphersComponent.searchPlaceholder=this.i18nService.t("searchFolder"),yield this.ciphersComponent.reload(t=>null!=t.collectionIds&&t.collectionIds.indexOf(e)>-1),this.clearFilters();const t=yield this.collectionService.get(e);this.ciphersComponent.isReadOnly=t.readOnly;const i=(yield this.collectionService.decryptMany([t]))[0];this.ciphersComponent.isCozyConnectors="Cozy Connectors"===i.name,this.collectionId=e,this.updateCollectionProperties(),this.go()}))}openPasswordGenerator(e){return gg(this,void 0,void 0,(function*(){null!=this.modal&&this.modal.close();const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.passwordGeneratorModalRef.createComponent(t).instance;this.modal.show(uh,this.passwordGeneratorModalRef,!0,t=>t.showSelect=e).onSelected.subscribe(e=>{this.modal.close(),null!=this.addEditComponent&&null!=this.addEditComponent.cipher&&this.addEditComponent.cipher.type===B.a.Login&&null!=this.addEditComponent.cipher.login&&(this.addEditComponent.markPasswordAsDirty(),this.addEditComponent.cipher.login.password=e)}),this.modal.onClosed.subscribe(()=>{this.modal=null})}))}addFolder(){return gg(this,void 0,void 0,(function*(){this.messagingService.send("newFolder")}))}editFolder(e){return gg(this,void 0,void 0,(function*(){null!=this.modal&&this.modal.close();const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.folderAddEditModalRef.createComponent(t).instance;const i=this.modal.show(eu,this.folderAddEditModalRef,!0,t=>t.folderId=e);i.onSavedFolder.subscribe(e=>gg(this,void 0,void 0,(function*(){this.modal.close(),yield this.groupingsComponent.loadFolders()}))),i.onDeletedFolder.subscribe(e=>gg(this,void 0,void 0,(function*(){this.modal.close(),yield this.groupingsComponent.loadFolders()}))),this.modal.onClosed.subscribe(()=>{this.modal=null})}))}shouldShowLogo(){return!this.cipherId&&"add"!==this.action&&"import"!==this.action}dirtyInput(){return("add"===this.action||"edit"===this.action||"clone"===this.action)&&document.querySelectorAll("app-vault-add-edit .ng-dirty").length>0}wantsToSaveChanges(){return gg(this,void 0,void 0,(function*(){return!(yield this.platformUtilsService.showDialog(this.i18nService.t("unsavedChangesConfirmation"),this.i18nService.t("unsavedChangesTitle"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning"))}))}clearFilters(e=[]){["folderId","collectionId","type","addCollectionIds","addType","addOrganizationId","cipherId","action"].filter(t=>!e.includes(t)).forEach(e=>{this[e]=null}),["favorites","deleted"].filter(t=>!e.includes(t)).forEach(e=>{this[e]=!1}),this.ciphersComponent.isReadOnly=!1,this.ciphersComponent.isCozyConnectors=!1}go(e=null){null==e&&(e={action:this.action,cipherId:this.cipherId,favorites:!!this.favorites||null,type:this.type,folderId:this.folderId,collectionId:this.collectionId,deleted:!!this.deleted||null}),this.router.navigate([],{relativeTo:this.route,queryParams:e,replaceUrl:!0})}addCipherWithChangeDetection(e=null){this.functionWithChangeDetection(()=>this.addCipher(e))}copyValue(e,t,i,n){this.functionWithChangeDetection(()=>gg(this,void 0,void 0,(function*(){e.reprompt!==fe.a.None&&this.passwordRepromptService.protectedFields().includes(n)&&!(yield this.passwordRepromptService.showPasswordPrompt())||(this.platformUtilsService.copyToClipboard(t),this.toasterService.popAsync("info",null,this.i18nService.t("valueCopied",this.i18nService.t(i))),"view"===this.action&&this.messagingService.send("minimizeOnCopy"))})))}functionWithChangeDetection(e){this.ngZone.run(()=>{e(),this.changeDetectorRef.detectChanges()})}updateCollectionProperties(){if(null!=this.collectionId){const e=this.groupingsComponent.collections.filter(e=>e.id===this.collectionId);if(e.length>0)return this.addOrganizationId=e[0].organizationId,void(this.addCollectionIds=[this.collectionId])}this.addOrganizationId=null,this.addCollectionIds=null}checkExtensionInit(){return new Promise((e,t)=>{const i=document.createEvent("Event");i.initEvent("cozy.passwordextension.check-status"),document.addEventListener("cozy.passwordextension.installed",t=>{e(!0)}),document.addEventListener("cozy.passwordextension.connected",t=>{e(!0)}),setTimeout(()=>{e(!1)},300),document.dispatchEvent(i)})}}Mg.ɵfac=function(e){return new(e||Mg)(n.cc(c.a),n.cc(c.b),n.cc(n.m),n.cc(I.a),n.cc(Sr),n.cc(n.j),n.cc(n.M),n.cc(M),n.cc(r.e),n.cc(a.a),n.cc(A.a),n.cc(Da),n.cc(Jd),n.cc(z.a),n.cc(zh),n.cc(Qp.b),n.cc(P))},Mg.ɵcmp=n.Wb({type:Mg,selectors:[["app-vault"]],viewQuery:function(e,t){if(1&e&&(n.Sc(Fp,1),n.Sc(fl,1),n.Sc(Bd,3),n.Sc(ih,3),n.Sc(fg,3,n.fb),n.Sc(yg,3,n.fb),n.Sc(mg,3,n.fb),n.Sc(vg,3,n.fb),n.Sc(bg,3,n.fb),n.Sc(wg,3,n.fb)),2&e){let e;n.Fc(e=n.pc())&&(t.viewComponent=e.first),n.Fc(e=n.pc())&&(t.addEditComponent=e.first),n.Fc(e=n.pc())&&(t.ciphersComponent=e.first),n.Fc(e=n.pc())&&(t.groupingsComponent=e.first),n.Fc(e=n.pc())&&(t.passwordGeneratorModalRef=e.first),n.Fc(e=n.pc())&&(t.attachmentsModalRef=e.first),n.Fc(e=n.pc())&&(t.passwordHistoryModalRef=e.first),n.Fc(e=n.pc())&&(t.shareModalRef=e.first),n.Fc(e=n.pc())&&(t.collectionsModalRef=e.first),n.Fc(e=n.pc())&&(t.folderAddEditModalRef=e.first)}},decls:37,vars:11,consts:[["id","vault",1,"vault"],["id","groupings",1,"groupings",3,"onAllClicked","onFavoritesClicked","onCipherTypeClicked","onFolderClicked","onAddFolder","onEditFolder","onCollectionClicked","onTrashClicked","onImportClicked"],["id","items",3,"hidden","activeCipherId","collectionId","onCipherClicked","onCipherRightClicked","onAddCipher","onAddCipherOptions","onDeletedCipher"],["id","details","class","details",3,"cipherId","onCloneCipher","onEditCipher","onViewCipherPasswordHistory","onRestoredCipher","onDeletedCipher",4,"ngIf"],["id","addEdit","class","details",3,"cloneMode","folderId","organizationId","collectionIds","type","cipherId","onSavedCipher","onDeletedCipher","onEditAttachments","onCancelled","onShareCipher","onEditCollections","onGeneratePassword",4,"ngIf"],["id","importPage","class","import-page",4,"ngIf"],["id","logo","class","logo",4,"ngIf"],["passwordGenerator",""],["attachments",""],["collections",""],["share",""],["folderAddEdit",""],["passwordHistory",""],["id","details",1,"details",3,"cipherId","onCloneCipher","onEditCipher","onViewCipherPasswordHistory","onRestoredCipher","onDeletedCipher"],["id","addEdit",1,"details",3,"cloneMode","folderId","organizationId","collectionIds","type","cipherId","onSavedCipher","onDeletedCipher","onEditAttachments","onCancelled","onShareCipher","onEditCollections","onGeneratePassword"],["id","importPage",1,"import-page"],["id","logo",1,"logo"],[1,"content"],[1,"inner-content"],["height","24","viewBox","0 2 32 32","width","24","xmlns","http://www.w3.org/2000/svg",1,"inner-cozy-logo",2,"overflow","visible"],["d","M19.314 17.561a.555.555 0 0 1-.82.12 4.044 4.044 0 0 1-2.499.862 4.04 4.04 0 0 1-2.494-.86.557.557 0 0 1-.815-.12.547.547 0 0 1 .156-.748c.214-.14.229-.421.229-.424a.555.555 0 0 1 .176-.385.504.504 0 0 1 .386-.145.544.544 0 0 1 .528.553c0 .004 0 .153-.054.36a2.954 2.954 0 0 0 3.784-.008 1.765 1.765 0 0 1-.053-.344.546.546 0 0 1 .536-.561h.01c.294 0 .538.237.545.532 0 0 .015.282.227.422a.544.544 0 0 1 .158.746m2.322-6.369a5.94 5.94 0 0 0-1.69-3.506A5.651 5.651 0 0 0 15.916 6a5.648 5.648 0 0 0-4.029 1.687 5.936 5.936 0 0 0-1.691 3.524 5.677 5.677 0 0 0-3.433 1.737 5.966 5.966 0 0 0-1.643 4.137C5.12 20.347 7.704 23 10.882 23h10.236c3.176 0 5.762-2.653 5.762-5.915 0-3.083-2.31-5.623-5.244-5.893","fill","#fafafa"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"app-vault-groupings",1),n.oc("onAllClicked",(function(){return t.clearGroupingFilters()}))("onFavoritesClicked",(function(){return t.filterFavorites()}))("onCipherTypeClicked",(function(e){return t.filterCipherType(e)}))("onFolderClicked",(function(e){return t.filterFolder(e.id)}))("onAddFolder",(function(){return t.addFolder()}))("onEditFolder",(function(e){return t.editFolder(e.id)}))("onCollectionClicked",(function(e){return t.filterCollection(e.id)}))("onTrashClicked",(function(){return t.filterDeleted()}))("onImportClicked",(function(){return t.startImport()})),n.Oc(3," "),n.gc(),n.Oc(4," "),n.hc(5,"app-vault-ciphers",2),n.oc("onCipherClicked",(function(e){return t.viewCipher(e)}))("onCipherRightClicked",(function(e){return t.viewCipherMenu(e)}))("onAddCipher",(function(e){return t.addCipher(e)}))("onAddCipherOptions",(function(){return t.addCipherOptions()}))("onDeletedCipher",(function(e){return t.deletedCipher(e)})),n.Oc(6," "),n.gc(),n.Oc(7," "),n.Mc(8,Og,2,1,"app-vault-view",3),n.Oc(9," "),n.Mc(10,Sg,2,6,"app-vault-add-edit",4),n.Oc(11," "),n.Mc(12,Cg,2,0,"app-import-page",5),n.Oc(13," "),n.Mc(14,Pg,13,0,"div",6),n.Oc(15," "),n.dc(16,"app-confirm-trusted-users"),n.Oc(17," "),n.gc(),n.Oc(18," "),n.Mc(19,xg,0,0,"ng-template",null,7,n.Nc),n.Oc(21," "),n.Mc(22,kg,0,0,"ng-template",null,8,n.Nc),n.Oc(24," "),n.Mc(25,Tg,0,0,"ng-template",null,9,n.Nc),n.Oc(27," "),n.Mc(28,Ig,0,0,"ng-template",null,10,n.Nc),n.Oc(30," "),n.Mc(31,Dg,0,0,"ng-template",null,11,n.Nc),n.Oc(33," "),n.Mc(34,Ag,0,0,"ng-template",null,12,n.Nc),n.Oc(36," ")),2&e&&(n.Rb("aria-hidden",t.showingModal),n.Qb(5),n.Tb("",t.shouldDisplayCiphersList()," items"),n.zc("hidden","import"===t.action)("activeCipherId",t.cipherId)("collectionId",t.collectionId),n.Qb(3),n.zc("ngIf",t.cipherId&&"view"===t.action),n.Qb(2),n.zc("ngIf","add"===t.action||"edit"===t.action||"clone"===t.action),n.Qb(2),n.zc("ngIf","import"===t.action),n.Qb(2),n.zc("ngIf",t.shouldShowLogo()))},directives:[ih,Bd,Dr.k,Hp,Fp,fl,hg],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Mg,[{type:n.l,args:[{selector:"app-vault",templateUrl:"vault.component.html"}]}],(function(){return[{type:c.a},{type:c.b},{type:n.m},{type:I.a},{type:Sr},{type:n.j},{type:n.M},{type:M},{type:r.e},{type:a.a},{type:A.a},{type:Da},{type:Jd},{type:z.a},{type:zh},{type:Qp.b},{type:P}]}),{viewComponent:[{type:n.eb,args:[Fp]}],addEditComponent:[{type:n.eb,args:[fl]}],ciphersComponent:[{type:n.eb,args:[Bd,{static:!0}]}],groupingsComponent:[{type:n.eb,args:[ih,{static:!0}]}],passwordGeneratorModalRef:[{type:n.eb,args:["passwordGenerator",{read:n.fb,static:!0}]}],attachmentsModalRef:[{type:n.eb,args:["attachments",{read:n.fb,static:!0}]}],passwordHistoryModalRef:[{type:n.eb,args:["passwordHistory",{read:n.fb,static:!0}]}],shareModalRef:[{type:n.eb,args:["share",{read:n.fb,static:!0}]}],collectionsModalRef:[{type:n.eb,args:["collections",{read:n.fb,static:!0}]}],folderAddEditModalRef:[{type:n.eb,args:["folderAddEdit",{read:n.fb,static:!0}]}]});const zg=[{path:"",redirectTo:"/vault",pathMatch:"full"},{path:"lock",component:Fr,canActivate:[nr,b]},{path:"login",component:ro,canActivate:[rr,b]},{path:"2fa",component:mc,canActivate:[b]},{path:"register",component:yo},{path:"vault",component:Mg,canActivate:[cr,b]},{path:"hint",component:mr},{path:"set-password",component:Lo,canActivate:[b]},{path:"sso",component:Ko},{path:"send",component:Ta,canActivate:[cr,b]},{path:"installation",component:tr,canActivate:[w]}];class Eg{}Eg.ɵfac=function(e){return new(e||Eg)},Eg.ɵmod=n.ac({type:Eg}),Eg.ɵinj=n.Zb({imports:[[c.e.forRoot(zg,{useHash:!0})],c.e]}),("undefined"==typeof ngJitMode||ngJitMode)&&n.Kc(Eg,{imports:[c.e],exports:[c.e]}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Eg,[{type:n.H,args:[{imports:[c.e.forRoot(zg,{useHash:!0})],exports:[c.e]}]}],null,null);var Ug=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Ng{constructor(){this.volatileStore=new Map,this.nonVolatileKeys=["accessToken","refreshToken","kdf","kdfIterations","securityStamp"],this.chromeStorageApi=window.localStorage,this.persistDataForDevPurposes=!1}get(e){return Ug(this,void 0,void 0,(function*(){return"kdfIterations"===e?JSON.parse("100000"):this.persistDataForDevPurposes&&this.nonVolatileKeys.includes(e)?this.localStorageGet(e):this.volatileGet(e)}))}save(e,t){return Ug(this,void 0,void 0,(function*(){return this.persistDataForDevPurposes&&this.nonVolatileKeys.includes(e)?this.localStorageSave(e,t):this.volatileSave(e,t)}))}remove(e){return Ug(this,void 0,void 0,(function*(){return this.persistDataForDevPurposes&&this.nonVolatileKeys.includes(e)?this.localStorageRemove(e):this.volatileRemove(e)}))}volatileGet(e){return Ug(this,void 0,void 0,(function*(){let t=this.volatileStore.get(e);if(null!==t){t=void 0===t?null:t,t="undefined"===t?null:t;try{t=JSON.parse(t)}catch(e){}return t}return null}))}volatileSave(e,t){return Ug(this,void 0,void 0,(function*(){return this.volatileStore.set(e,JSON.stringify(t))}))}volatileRemove(e){return Ug(this,void 0,void 0,(function*(){return this.volatileStore.delete(e)}))}localStorageGet(e){return Ug(this,void 0,void 0,(function*(){return new Promise(t=>{let i=this.chromeStorageApi.getItem(e);if(null===i)t(null);else{i=void 0===i?null:i,i="undefined"===i?null:i;try{i=JSON.parse(i)}catch(e){}t(i)}})}))}localStorageSave(e,t){return Ug(this,void 0,void 0,(function*(){return new Promise(i=>{this.chromeStorageApi.setItem(e,JSON.stringify(t)),i()})}))}localStorageRemove(e){return Ug(this,void 0,void 0,(function*(){return new Promise(t=>{this.chromeStorageApi.removeItem(e),t()})}))}}var Rg=i(831),Fg=i.n(Rg),Qg=i(832),Vg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Bg extends Qg.a{constructor(e,t,i,n){super(e,t,i,n)}showPasswordDialog(e,t,i){return Vg(this,void 0,void 0,(function*(){return(yield Fg.a.fire({heightAuto:!1,titleText:e,input:"password",text:t,confirmButtonText:this.i18nService.t("ok"),showCancelButton:!0,cancelButtonText:this.i18nService.t("cancel"),inputAttributes:{autocapitalize:"off",autocorrect:"off"},inputValidator:e=>Vg(this,void 0,void 0,(function*(){return!(yield i(e))&&this.i18nService.t("invalidMasterPassword")}))})).isConfirmed}))}}var Lg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var _g=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};Element;class jg{}var Kg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var Hg=function(e,t,i,n){var s,r=arguments.length,o=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(o=(r<3?s(o):r>3?s(t,i,o):s(t,i))||o);return r>3&&o&&Object.defineProperty(t,i,o),o},Wg=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},qg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Gg{constructor(e,t){this.cryptoFunctionService=e,this.apiService=t}passwordLeaked(e){return qg(this,void 0,void 0,(function*(){const t=yield this.cryptoFunctionService.hash(e,"sha1"),i=Q.a.fromBufferToHex(t).toUpperCase(),n=i.substr(0,5),s=i.substr(5),r=yield this.apiService.nativeFetch(new Request("https://api.pwnedpasswords.com/range/"+n)),o=(yield r.text()).split(/\r?\n/).find(e=>e.split(":")[0]===s);return null!=o?parseInt(o.split(":")[1],10):0}))}breachedAccounts(e){return qg(this,void 0,void 0,(function*(){try{return yield this.apiService.getHibpBreach(e)}catch(e){if(404===e.statusCode)return[];throw new Error}}))}}var Jg,Yg;Hg([(Jg=100,Yg=()=>"passwordLeaked",(e,t,i)=>{const n=i.value,s=new Map;return{value:function(...e){const t=(e=>{let t=s.get(e);return null!=t||(t=new Map,s.set(e,t)),t})(this),i=Yg(e);let r=t.get(i);return null==r&&(r=[],t.set(i,r)),new Promise((o,c)=>{const a=()=>{const l=()=>{r.splice(r.indexOf(a),1),r.length>=Jg?r[Jg-1]():0===r.length&&(t.delete(i),0===t.size&&s.delete(this))};n.apply(this,e).then(e=>(l(),e)).catch(e=>{throw l(),e}).then(o,c)};r.push(a),r.length<=Jg&&a()})}}}),Wg("design:type",Function),Wg("design:paramtypes",[String]),Wg("design:returntype",Promise)],Gg.prototype,"passwordLeaked",null);class $g{constructor(e){this.id=e.id,this.organizationId=e.organizationId,this.name=e.name,this.externalId=e.externalId,this.readOnly=e.readOnly}}var Xg=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Zg="collections_";class ef{}var tf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class nf{}class sf{}var rf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var of=i(130);class cf{constructor(e){this.message=e.humanReadableMessage,this.appIcon=e.appIcon,this.appName=e.appName,this.userId=e.userId,this.userName=e.userName,this.userEmail=e.userEmail,this.date=e.date,this.ip=e.ip,this.type=Aa[e.type]}}var af,lf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};!function(e){e[e.Direct=0]="Direct",e[e.Azure=1]="Azure"}(af||(af={}));var df=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class uf{constructor(e){this.logService=e}upload(e,t,i){return df(this,void 0,void 0,(function*(){return t.buffer.byteLength<=268435456?yield this.azureUploadBlob(e,t):yield this.azureUploadBlocks(e,t,i)}))}azureUploadBlob(e,t){return df(this,void 0,void 0,(function*(){const i=Q.a.getUrl(e),n=new Headers({"x-ms-date":(new Date).toUTCString(),"x-ms-version":i.searchParams.get("sv"),"Content-Length":t.buffer.byteLength.toString(),"x-ms-blob-type":"BlockBlob"}),s=new Request(e,{body:t.buffer,cache:"no-store",method:"PUT",headers:n}),r=yield fetch(s);if(201!==r.status)throw new Error("Failed to create Azure blob: "+r.status)}))}azureUploadBlocks(e,t,i){return df(this,void 0,void 0,(function*(){const n=Q.a.getUrl(e),s=this.getMaxBlockSize(n.searchParams.get("sv"));let r=0;const o=Math.ceil(t.buffer.byteLength/s),c=[];if(o>5e4)throw new Error("Cannot upload file, exceeds maximum size of "+5e4*s);try{for(;r<o;){e=yield this.renewUrlIfNecessary(e,i);const n=Q.a.getUrl(e),o=this.encodedBlockId(r);n.searchParams.append("comp","block"),n.searchParams.append("blockid",o);const a=r*s,l=t.buffer.slice(a,a+s),d=new Headers({"x-ms-date":(new Date).toUTCString(),"x-ms-version":n.searchParams.get("sv"),"Content-Length":l.byteLength.toString()}),u=new Request(n.toString(),{body:l,cache:"no-store",method:"PUT",headers:d}),h=yield fetch(u);if(201!==h.status){const e="Unsuccessful block PUT. Received status "+h.status;throw this.logService.error(e+"\n"+(yield h.json())),new Error(e)}c.push(o),r++}e=yield this.renewUrlIfNecessary(e,i);const n=Q.a.getUrl(e),a=this.blockListXml(c);n.searchParams.append("comp","blocklist");const l=new Headers({"x-ms-date":(new Date).toUTCString(),"x-ms-version":n.searchParams.get("sv"),"Content-Length":a.length.toString()}),d=new Request(n.toString(),{body:a,cache:"no-store",method:"PUT",headers:l}),u=yield fetch(d);if(201!==u.status){const e="Unsuccessful block list PUT. Received status "+u.status;throw this.logService.error(e+"\n"+(yield u.json())),new Error(e)}}catch(e){throw e}}))}renewUrlIfNecessary(e,t){var i;return df(this,void 0,void 0,(function*(){const n=Q.a.getUrl(e),s=new Date(null!==(i=n.searchParams.get("se"))&&void 0!==i?i:"");return isNaN(s.getTime())&&s.setTime(Date.now()+36e5),s.getTime()<Date.now()+1e3?yield t():e}))}encodedBlockId(e){const t=("000000000000000000000000000000000000000000000000"+e.toString()).slice(-48);return Q.a.fromUtf8ToB64(t)}blockListXml(e){let t='<?xml version="1.0" encoding="utf-8"?><BlockList>';return e.forEach(e=>{t+=`<Latest>${e}</Latest>`}),t+="</BlockList>",t}getMaxBlockSize(e){return hf.compare(e,"2019-12-12")>=0?4194304e3:hf.compare(e,"2016-05-31")>=0?104857600:4194304}}class hf{constructor(e){this.year=0,this.month=0,this.day=0;try{const t=e.split("-").map(e=>Number.parseInt(e,10));this.year=t[0],this.month=t[1],this.day=t[2]}catch(e){}}static compare(e,t){return"string"==typeof e&&(e=new hf(e)),"string"==typeof t&&(t=new hf(t)),e.year!==t.year?e.year-t.year:e.month!==t.month?e.month-t.month:e.day!==t.day?e.day-t.day:0}compare(e){return hf.compare(this,e)}}var pf=i(834),gf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class ff{constructor(e,t){this.userId=t,this.name=e.name,this.id=e.id,this.revisionDate=e.revisionDate}}var yf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const mf="folders_",vf="ciphers_";var bf=i(835);class wf{constructor(e,t){this.password=e,this.date=t}}class Of extends Y.a{constructor(){super(...arguments),this.defaultType="",this.minLength=0,this.useUppercase=!1,this.useLowercase=!1,this.useNumbers=!1,this.numberCount=0,this.useSpecial=!1,this.specialCount=0,this.minNumberWords=0,this.capitalize=!1,this.includeNumber=!1}inEffect(){return""!==this.defaultType||this.minLength>0||this.numberCount>0||this.specialCount>0||this.useUppercase||this.useLowercase||this.useNumbers||this.useSpecial||this.minNumberWords>0||this.capitalize||this.includeNumber}}const Sf=["abacus","abdomen","abdominal","abide","abiding","ability","ablaze","able","abnormal","abrasion","abrasive","abreast","abridge","abroad","abruptly","absence","absentee","absently","absinthe","absolute","absolve","abstain","abstract","absurd","accent","acclaim","acclimate","accompany","account","accuracy","accurate","accustom","acetone","achiness","aching","acid","acorn","acquaint","acquire","acre","acrobat","acronym","acting","action","activate","activator","active","activism","activist","activity","actress","acts","acutely","acuteness","aeration","aerobics","aerosol","aerospace","afar","affair","affected","affecting","affection","affidavit","affiliate","affirm","affix","afflicted","affluent","afford","affront","aflame","afloat","aflutter","afoot","afraid","afterglow","afterlife","aftermath","aftermost","afternoon","aged","ageless","agency","agenda","agent","aggregate","aghast","agile","agility","aging","agnostic","agonize","agonizing","agony","agreeable","agreeably","agreed","agreeing","agreement","aground","ahead","ahoy","aide","aids","aim","ajar","alabaster","alarm","albatross","album","alfalfa","algebra","algorithm","alias","alibi","alienable","alienate","aliens","alike","alive","alkaline","alkalize","almanac","almighty","almost","aloe","aloft","aloha","alone","alongside","aloof","alphabet","alright","although","altitude","alto","aluminum","alumni","always","amaretto","amaze","amazingly","amber","ambiance","ambiguity","ambiguous","ambition","ambitious","ambulance","ambush","amendable","amendment","amends","amenity","amiable","amicably","amid","amigo","amino","amiss","ammonia","ammonium","amnesty","amniotic","among","amount","amperage","ample","amplifier","amplify","amply","amuck","amulet","amusable","amused","amusement","amuser","amusing","anaconda","anaerobic","anagram","anatomist","anatomy","anchor","anchovy","ancient","android","anemia","anemic","aneurism","anew","angelfish","angelic","anger","angled","angler","angles","angling","angrily","angriness","anguished","angular","animal","animate","animating","animation","animator","anime","animosity","ankle","annex","annotate","announcer","annoying","annually","annuity","anointer","another","answering","antacid","antarctic","anteater","antelope","antennae","anthem","anthill","anthology","antibody","antics","antidote","antihero","antiquely","antiques","antiquity","antirust","antitoxic","antitrust","antiviral","antivirus","antler","antonym","antsy","anvil","anybody","anyhow","anymore","anyone","anyplace","anything","anytime","anyway","anywhere","aorta","apache","apostle","appealing","appear","appease","appeasing","appendage","appendix","appetite","appetizer","applaud","applause","apple","appliance","applicant","applied","apply","appointee","appraisal","appraiser","apprehend","approach","approval","approve","apricot","april","apron","aptitude","aptly","aqua","aqueduct","arbitrary","arbitrate","ardently","area","arena","arguable","arguably","argue","arise","armadillo","armband","armchair","armed","armful","armhole","arming","armless","armoire","armored","armory","armrest","army","aroma","arose","around","arousal","arrange","array","arrest","arrival","arrive","arrogance","arrogant","arson","art","ascend","ascension","ascent","ascertain","ashamed","ashen","ashes","ashy","aside","askew","asleep","asparagus","aspect","aspirate","aspire","aspirin","astonish","astound","astride","astrology","astronaut","astronomy","astute","atlantic","atlas","atom","atonable","atop","atrium","atrocious","atrophy","attach","attain","attempt","attendant","attendee","attention","attentive","attest","attic","attire","attitude","attractor","attribute","atypical","auction","audacious","audacity","audible","audibly","audience","audio","audition","augmented","august","authentic","author","autism","autistic","autograph","automaker","automated","automatic","autopilot","available","avalanche","avatar","avenge","avenging","avenue","average","aversion","avert","aviation","aviator","avid","avoid","await","awaken","award","aware","awhile","awkward","awning","awoke","awry","axis","babble","babbling","babied","baboon","backache","backboard","backboned","backdrop","backed","backer","backfield","backfire","backhand","backing","backlands","backlash","backless","backlight","backlit","backlog","backpack","backpedal","backrest","backroom","backshift","backside","backslid","backspace","backspin","backstab","backstage","backtalk","backtrack","backup","backward","backwash","backwater","backyard","bacon","bacteria","bacterium","badass","badge","badland","badly","badness","baffle","baffling","bagel","bagful","baggage","bagged","baggie","bagginess","bagging","baggy","bagpipe","baguette","baked","bakery","bakeshop","baking","balance","balancing","balcony","balmy","balsamic","bamboo","banana","banish","banister","banjo","bankable","bankbook","banked","banker","banking","banknote","bankroll","banner","bannister","banshee","banter","barbecue","barbed","barbell","barber","barcode","barge","bargraph","barista","baritone","barley","barmaid","barman","barn","barometer","barrack","barracuda","barrel","barrette","barricade","barrier","barstool","bartender","barterer","bash","basically","basics","basil","basin","basis","basket","batboy","batch","bath","baton","bats","battalion","battered","battering","battery","batting","battle","bauble","bazooka","blabber","bladder","blade","blah","blame","blaming","blanching","blandness","blank","blaspheme","blasphemy","blast","blatancy","blatantly","blazer","blazing","bleach","bleak","bleep","blemish","blend","bless","blighted","blimp","bling","blinked","blinker","blinking","blinks","blip","blissful","blitz","blizzard","bloated","bloating","blob","blog","bloomers","blooming","blooper","blot","blouse","blubber","bluff","bluish","blunderer","blunt","blurb","blurred","blurry","blurt","blush","blustery","boaster","boastful","boasting","boat","bobbed","bobbing","bobble","bobcat","bobsled","bobtail","bodacious","body","bogged","boggle","bogus","boil","bok","bolster","bolt","bonanza","bonded","bonding","bondless","boned","bonehead","boneless","bonelike","boney","bonfire","bonnet","bonsai","bonus","bony","boogeyman","boogieman","book","boondocks","booted","booth","bootie","booting","bootlace","bootleg","boots","boozy","borax","boring","borough","borrower","borrowing","boss","botanical","botanist","botany","botch","both","bottle","bottling","bottom","bounce","bouncing","bouncy","bounding","boundless","bountiful","bovine","boxcar","boxer","boxing","boxlike","boxy","breach","breath","breeches","breeching","breeder","breeding","breeze","breezy","brethren","brewery","brewing","briar","bribe","brick","bride","bridged","brigade","bright","brilliant","brim","bring","brink","brisket","briskly","briskness","bristle","brittle","broadband","broadcast","broaden","broadly","broadness","broadside","broadways","broiler","broiling","broken","broker","bronchial","bronco","bronze","bronzing","brook","broom","brought","browbeat","brownnose","browse","browsing","bruising","brunch","brunette","brunt","brush","brussels","brute","brutishly","bubble","bubbling","bubbly","buccaneer","bucked","bucket","buckle","buckshot","buckskin","bucktooth","buckwheat","buddhism","buddhist","budding","buddy","budget","buffalo","buffed","buffer","buffing","buffoon","buggy","bulb","bulge","bulginess","bulgur","bulk","bulldog","bulldozer","bullfight","bullfrog","bullhorn","bullion","bullish","bullpen","bullring","bullseye","bullwhip","bully","bunch","bundle","bungee","bunion","bunkbed","bunkhouse","bunkmate","bunny","bunt","busboy","bush","busily","busload","bust","busybody","buzz","cabana","cabbage","cabbie","cabdriver","cable","caboose","cache","cackle","cacti","cactus","caddie","caddy","cadet","cadillac","cadmium","cage","cahoots","cake","calamari","calamity","calcium","calculate","calculus","caliber","calibrate","calm","caloric","calorie","calzone","camcorder","cameo","camera","camisole","camper","campfire","camping","campsite","campus","canal","canary","cancel","candied","candle","candy","cane","canine","canister","cannabis","canned","canning","cannon","cannot","canola","canon","canopener","canopy","canteen","canyon","capable","capably","capacity","cape","capillary","capital","capitol","capped","capricorn","capsize","capsule","caption","captivate","captive","captivity","capture","caramel","carat","caravan","carbon","cardboard","carded","cardiac","cardigan","cardinal","cardstock","carefully","caregiver","careless","caress","caretaker","cargo","caring","carless","carload","carmaker","carnage","carnation","carnival","carnivore","carol","carpenter","carpentry","carpool","carport","carried","carrot","carrousel","carry","cartel","cartload","carton","cartoon","cartridge","cartwheel","carve","carving","carwash","cascade","case","cash","casing","casino","casket","cassette","casually","casualty","catacomb","catalog","catalyst","catalyze","catapult","cataract","catatonic","catcall","catchable","catcher","catching","catchy","caterer","catering","catfight","catfish","cathedral","cathouse","catlike","catnap","catnip","catsup","cattail","cattishly","cattle","catty","catwalk","caucasian","caucus","causal","causation","cause","causing","cauterize","caution","cautious","cavalier","cavalry","caviar","cavity","cedar","celery","celestial","celibacy","celibate","celtic","cement","census","ceramics","ceremony","certainly","certainty","certified","certify","cesarean","cesspool","chafe","chaffing","chain","chair","chalice","challenge","chamber","chamomile","champion","chance","change","channel","chant","chaos","chaperone","chaplain","chapped","chaps","chapter","character","charbroil","charcoal","charger","charging","chariot","charity","charm","charred","charter","charting","chase","chasing","chaste","chastise","chastity","chatroom","chatter","chatting","chatty","cheating","cheddar","cheek","cheer","cheese","cheesy","chef","chemicals","chemist","chemo","cherisher","cherub","chess","chest","chevron","chevy","chewable","chewer","chewing","chewy","chief","chihuahua","childcare","childhood","childish","childless","childlike","chili","chill","chimp","chip","chirping","chirpy","chitchat","chivalry","chive","chloride","chlorine","choice","chokehold","choking","chomp","chooser","choosing","choosy","chop","chosen","chowder","chowtime","chrome","chubby","chuck","chug","chummy","chump","chunk","churn","chute","cider","cilantro","cinch","cinema","cinnamon","circle","circling","circular","circulate","circus","citable","citadel","citation","citizen","citric","citrus","city","civic","civil","clad","claim","clambake","clammy","clamor","clamp","clamshell","clang","clanking","clapped","clapper","clapping","clarify","clarinet","clarity","clash","clasp","class","clatter","clause","clavicle","claw","clay","clean","clear","cleat","cleaver","cleft","clench","clergyman","clerical","clerk","clever","clicker","client","climate","climatic","cling","clinic","clinking","clip","clique","cloak","clobber","clock","clone","cloning","closable","closure","clothes","clothing","cloud","clover","clubbed","clubbing","clubhouse","clump","clumsily","clumsy","clunky","clustered","clutch","clutter","coach","coagulant","coastal","coaster","coasting","coastland","coastline","coat","coauthor","cobalt","cobbler","cobweb","cocoa","coconut","cod","coeditor","coerce","coexist","coffee","cofounder","cognition","cognitive","cogwheel","coherence","coherent","cohesive","coil","coke","cola","cold","coleslaw","coliseum","collage","collapse","collar","collected","collector","collide","collie","collision","colonial","colonist","colonize","colony","colossal","colt","coma","come","comfort","comfy","comic","coming","comma","commence","commend","comment","commerce","commode","commodity","commodore","common","commotion","commute","commuting","compacted","compacter","compactly","compactor","companion","company","compare","compel","compile","comply","component","composed","composer","composite","compost","composure","compound","compress","comprised","computer","computing","comrade","concave","conceal","conceded","concept","concerned","concert","conch","concierge","concise","conclude","concrete","concur","condense","condiment","condition","condone","conducive","conductor","conduit","cone","confess","confetti","confidant","confident","confider","confiding","configure","confined","confining","confirm","conflict","conform","confound","confront","confused","confusing","confusion","congenial","congested","congrats","congress","conical","conjoined","conjure","conjuror","connected","connector","consensus","consent","console","consoling","consonant","constable","constant","constrain","constrict","construct","consult","consumer","consuming","contact","container","contempt","contend","contented","contently","contents","contest","context","contort","contour","contrite","control","contusion","convene","convent","copartner","cope","copied","copier","copilot","coping","copious","copper","copy","coral","cork","cornball","cornbread","corncob","cornea","corned","corner","cornfield","cornflake","cornhusk","cornmeal","cornstalk","corny","coronary","coroner","corporal","corporate","corral","correct","corridor","corrode","corroding","corrosive","corsage","corset","cortex","cosigner","cosmetics","cosmic","cosmos","cosponsor","cost","cottage","cotton","couch","cough","could","countable","countdown","counting","countless","country","county","courier","covenant","cover","coveted","coveting","coyness","cozily","coziness","cozy","crabbing","crabgrass","crablike","crabmeat","cradle","cradling","crafter","craftily","craftsman","craftwork","crafty","cramp","cranberry","crane","cranial","cranium","crank","crate","crave","craving","crawfish","crawlers","crawling","crayfish","crayon","crazed","crazily","craziness","crazy","creamed","creamer","creamlike","crease","creasing","creatable","create","creation","creative","creature","credible","credibly","credit","creed","creme","creole","crepe","crept","crescent","crested","cresting","crestless","crevice","crewless","crewman","crewmate","crib","cricket","cried","crier","crimp","crimson","cringe","cringing","crinkle","crinkly","crisped","crisping","crisply","crispness","crispy","criteria","critter","croak","crock","crook","croon","crop","cross","crouch","crouton","crowbar","crowd","crown","crucial","crudely","crudeness","cruelly","cruelness","cruelty","crumb","crummiest","crummy","crumpet","crumpled","cruncher","crunching","crunchy","crusader","crushable","crushed","crusher","crushing","crust","crux","crying","cryptic","crystal","cubbyhole","cube","cubical","cubicle","cucumber","cuddle","cuddly","cufflink","culinary","culminate","culpable","culprit","cultivate","cultural","culture","cupbearer","cupcake","cupid","cupped","cupping","curable","curator","curdle","cure","curfew","curing","curled","curler","curliness","curling","curly","curry","curse","cursive","cursor","curtain","curtly","curtsy","curvature","curve","curvy","cushy","cusp","cussed","custard","custodian","custody","customary","customer","customize","customs","cut","cycle","cyclic","cycling","cyclist","cylinder","cymbal","cytoplasm","cytoplast","dab","dad","daffodil","dagger","daily","daintily","dainty","dairy","daisy","dallying","dance","dancing","dandelion","dander","dandruff","dandy","danger","dangle","dangling","daredevil","dares","daringly","darkened","darkening","darkish","darkness","darkroom","darling","darn","dart","darwinism","dash","dastardly","data","datebook","dating","daughter","daunting","dawdler","dawn","daybed","daybreak","daycare","daydream","daylight","daylong","dayroom","daytime","dazzler","dazzling","deacon","deafening","deafness","dealer","dealing","dealmaker","dealt","dean","debatable","debate","debating","debit","debrief","debtless","debtor","debug","debunk","decade","decaf","decal","decathlon","decay","deceased","deceit","deceiver","deceiving","december","decency","decent","deception","deceptive","decibel","decidable","decimal","decimeter","decipher","deck","declared","decline","decode","decompose","decorated","decorator","decoy","decrease","decree","dedicate","dedicator","deduce","deduct","deed","deem","deepen","deeply","deepness","deface","defacing","defame","default","defeat","defection","defective","defendant","defender","defense","defensive","deferral","deferred","defiance","defiant","defile","defiling","define","definite","deflate","deflation","deflator","deflected","deflector","defog","deforest","defraud","defrost","deftly","defuse","defy","degraded","degrading","degrease","degree","dehydrate","deity","dejected","delay","delegate","delegator","delete","deletion","delicacy","delicate","delicious","delighted","delirious","delirium","deliverer","delivery","delouse","delta","deluge","delusion","deluxe","demanding","demeaning","demeanor","demise","democracy","democrat","demote","demotion","demystify","denatured","deniable","denial","denim","denote","dense","density","dental","dentist","denture","deny","deodorant","deodorize","departed","departure","depict","deplete","depletion","deplored","deploy","deport","depose","depraved","depravity","deprecate","depress","deprive","depth","deputize","deputy","derail","deranged","derby","derived","desecrate","deserve","deserving","designate","designed","designer","designing","deskbound","desktop","deskwork","desolate","despair","despise","despite","destiny","destitute","destruct","detached","detail","detection","detective","detector","detention","detergent","detest","detonate","detonator","detoxify","detract","deuce","devalue","deviancy","deviant","deviate","deviation","deviator","device","devious","devotedly","devotee","devotion","devourer","devouring","devoutly","dexterity","dexterous","diabetes","diabetic","diabolic","diagnoses","diagnosis","diagram","dial","diameter","diaper","diaphragm","diary","dice","dicing","dictate","dictation","dictator","difficult","diffused","diffuser","diffusion","diffusive","dig","dilation","diligence","diligent","dill","dilute","dime","diminish","dimly","dimmed","dimmer","dimness","dimple","diner","dingbat","dinghy","dinginess","dingo","dingy","dining","dinner","diocese","dioxide","diploma","dipped","dipper","dipping","directed","direction","directive","directly","directory","direness","dirtiness","disabled","disagree","disallow","disarm","disarray","disaster","disband","disbelief","disburse","discard","discern","discharge","disclose","discolor","discount","discourse","discover","discuss","disdain","disengage","disfigure","disgrace","dish","disinfect","disjoin","disk","dislike","disliking","dislocate","dislodge","disloyal","dismantle","dismay","dismiss","dismount","disobey","disorder","disown","disparate","disparity","dispatch","dispense","dispersal","dispersed","disperser","displace","display","displease","disposal","dispose","disprove","dispute","disregard","disrupt","dissuade","distance","distant","distaste","distill","distinct","distort","distract","distress","district","distrust","ditch","ditto","ditzy","dividable","divided","dividend","dividers","dividing","divinely","diving","divinity","divisible","divisibly","division","divisive","divorcee","dizziness","dizzy","doable","docile","dock","doctrine","document","dodge","dodgy","doily","doing","dole","dollar","dollhouse","dollop","dolly","dolphin","domain","domelike","domestic","dominion","dominoes","donated","donation","donator","donor","donut","doodle","doorbell","doorframe","doorknob","doorman","doormat","doornail","doorpost","doorstep","doorstop","doorway","doozy","dork","dormitory","dorsal","dosage","dose","dotted","doubling","douche","dove","down","dowry","doze","drab","dragging","dragonfly","dragonish","dragster","drainable","drainage","drained","drainer","drainpipe","dramatic","dramatize","drank","drapery","drastic","draw","dreaded","dreadful","dreadlock","dreamboat","dreamily","dreamland","dreamless","dreamlike","dreamt","dreamy","drearily","dreary","drench","dress","drew","dribble","dried","drier","drift","driller","drilling","drinkable","drinking","dripping","drippy","drivable","driven","driver","driveway","driving","drizzle","drizzly","drone","drool","droop","drop-down","dropbox","dropkick","droplet","dropout","dropper","drove","drown","drowsily","drudge","drum","dry","dubbed","dubiously","duchess","duckbill","ducking","duckling","ducktail","ducky","duct","dude","duffel","dugout","duh","duke","duller","dullness","duly","dumping","dumpling","dumpster","duo","dupe","duplex","duplicate","duplicity","durable","durably","duration","duress","during","dusk","dust","dutiful","duty","duvet","dwarf","dweeb","dwelled","dweller","dwelling","dwindle","dwindling","dynamic","dynamite","dynasty","dyslexia","dyslexic","each","eagle","earache","eardrum","earflap","earful","earlobe","early","earmark","earmuff","earphone","earpiece","earplugs","earring","earshot","earthen","earthlike","earthling","earthly","earthworm","earthy","earwig","easeful","easel","easiest","easily","easiness","easing","eastbound","eastcoast","easter","eastward","eatable","eaten","eatery","eating","eats","ebay","ebony","ebook","ecard","eccentric","echo","eclair","eclipse","ecologist","ecology","economic","economist","economy","ecosphere","ecosystem","edge","edginess","edging","edgy","edition","editor","educated","education","educator","eel","effective","effects","efficient","effort","eggbeater","egging","eggnog","eggplant","eggshell","egomaniac","egotism","egotistic","either","eject","elaborate","elastic","elated","elbow","eldercare","elderly","eldest","electable","election","elective","elephant","elevate","elevating","elevation","elevator","eleven","elf","eligible","eligibly","eliminate","elite","elitism","elixir","elk","ellipse","elliptic","elm","elongated","elope","eloquence","eloquent","elsewhere","elude","elusive","elves","email","embargo","embark","embassy","embattled","embellish","ember","embezzle","emblaze","emblem","embody","embolism","emboss","embroider","emcee","emerald","emergency","emission","emit","emote","emoticon","emotion","empathic","empathy","emperor","emphases","emphasis","emphasize","emphatic","empirical","employed","employee","employer","emporium","empower","emptier","emptiness","empty","emu","enable","enactment","enamel","enchanted","enchilada","encircle","enclose","enclosure","encode","encore","encounter","encourage","encroach","encrust","encrypt","endanger","endeared","endearing","ended","ending","endless","endnote","endocrine","endorphin","endorse","endowment","endpoint","endurable","endurance","enduring","energetic","energize","energy","enforced","enforcer","engaged","engaging","engine","engorge","engraved","engraver","engraving","engross","engulf","enhance","enigmatic","enjoyable","enjoyably","enjoyer","enjoying","enjoyment","enlarged","enlarging","enlighten","enlisted","enquirer","enrage","enrich","enroll","enslave","ensnare","ensure","entail","entangled","entering","entertain","enticing","entire","entitle","entity","entomb","entourage","entrap","entree","entrench","entrust","entryway","entwine","enunciate","envelope","enviable","enviably","envious","envision","envoy","envy","enzyme","epic","epidemic","epidermal","epidermis","epidural","epilepsy","epileptic","epilogue","epiphany","episode","equal","equate","equation","equator","equinox","equipment","equity","equivocal","eradicate","erasable","erased","eraser","erasure","ergonomic","errand","errant","erratic","error","erupt","escalate","escalator","escapable","escapade","escapist","escargot","eskimo","esophagus","espionage","espresso","esquire","essay","essence","essential","establish","estate","esteemed","estimate","estimator","estranged","estrogen","etching","eternal","eternity","ethanol","ether","ethically","ethics","euphemism","evacuate","evacuee","evade","evaluate","evaluator","evaporate","evasion","evasive","even","everglade","evergreen","everybody","everyday","everyone","evict","evidence","evident","evil","evoke","evolution","evolve","exact","exalted","example","excavate","excavator","exceeding","exception","excess","exchange","excitable","exciting","exclaim","exclude","excluding","exclusion","exclusive","excretion","excretory","excursion","excusable","excusably","excuse","exemplary","exemplify","exemption","exerciser","exert","exes","exfoliate","exhale","exhaust","exhume","exile","existing","exit","exodus","exonerate","exorcism","exorcist","expand","expanse","expansion","expansive","expectant","expedited","expediter","expel","expend","expenses","expensive","expert","expire","expiring","explain","expletive","explicit","explode","exploit","explore","exploring","exponent","exporter","exposable","expose","exposure","express","expulsion","exquisite","extended","extending","extent","extenuate","exterior","external","extinct","extortion","extradite","extras","extrovert","extrude","extruding","exuberant","fable","fabric","fabulous","facebook","facecloth","facedown","faceless","facelift","faceplate","faceted","facial","facility","facing","facsimile","faction","factoid","factor","factsheet","factual","faculty","fade","fading","failing","falcon","fall","false","falsify","fame","familiar","family","famine","famished","fanatic","fancied","fanciness","fancy","fanfare","fang","fanning","fantasize","fantastic","fantasy","fascism","fastball","faster","fasting","fastness","faucet","favorable","favorably","favored","favoring","favorite","fax","feast","federal","fedora","feeble","feed","feel","feisty","feline","felt-tip","feminine","feminism","feminist","feminize","femur","fence","fencing","fender","ferment","fernlike","ferocious","ferocity","ferret","ferris","ferry","fervor","fester","festival","festive","festivity","fetal","fetch","fever","fiber","fiction","fiddle","fiddling","fidelity","fidgeting","fidgety","fifteen","fifth","fiftieth","fifty","figment","figure","figurine","filing","filled","filler","filling","film","filter","filth","filtrate","finale","finalist","finalize","finally","finance","financial","finch","fineness","finer","finicky","finished","finisher","finishing","finite","finless","finlike","fiscally","fit","five","flaccid","flagman","flagpole","flagship","flagstick","flagstone","flail","flakily","flaky","flame","flammable","flanked","flanking","flannels","flap","flaring","flashback","flashbulb","flashcard","flashily","flashing","flashy","flask","flatbed","flatfoot","flatly","flatness","flatten","flattered","flatterer","flattery","flattop","flatware","flatworm","flavored","flavorful","flavoring","flaxseed","fled","fleshed","fleshy","flick","flier","flight","flinch","fling","flint","flip","flirt","float","flock","flogging","flop","floral","florist","floss","flounder","flyable","flyaway","flyer","flying","flyover","flypaper","foam","foe","fog","foil","folic","folk","follicle","follow","fondling","fondly","fondness","fondue","font","food","fool","footage","football","footbath","footboard","footer","footgear","foothill","foothold","footing","footless","footman","footnote","footpad","footpath","footprint","footrest","footsie","footsore","footwear","footwork","fossil","foster","founder","founding","fountain","fox","foyer","fraction","fracture","fragile","fragility","fragment","fragrance","fragrant","frail","frame","framing","frantic","fraternal","frayed","fraying","frays","freckled","freckles","freebase","freebee","freebie","freedom","freefall","freehand","freeing","freeload","freely","freemason","freeness","freestyle","freeware","freeway","freewill","freezable","freezing","freight","french","frenzied","frenzy","frequency","frequent","fresh","fretful","fretted","friction","friday","fridge","fried","friend","frighten","frightful","frigidity","frigidly","frill","fringe","frisbee","frisk","fritter","frivolous","frolic","from","front","frostbite","frosted","frostily","frosting","frostlike","frosty","froth","frown","frozen","fructose","frugality","frugally","fruit","frustrate","frying","gab","gaffe","gag","gainfully","gaining","gains","gala","gallantly","galleria","gallery","galley","gallon","gallows","gallstone","galore","galvanize","gambling","game","gaming","gamma","gander","gangly","gangrene","gangway","gap","garage","garbage","garden","gargle","garland","garlic","garment","garnet","garnish","garter","gas","gatherer","gathering","gating","gauging","gauntlet","gauze","gave","gawk","gazing","gear","gecko","geek","geiger","gem","gender","generic","generous","genetics","genre","gentile","gentleman","gently","gents","geography","geologic","geologist","geology","geometric","geometry","geranium","gerbil","geriatric","germicide","germinate","germless","germproof","gestate","gestation","gesture","getaway","getting","getup","giant","gibberish","giblet","giddily","giddiness","giddy","gift","gigabyte","gigahertz","gigantic","giggle","giggling","giggly","gigolo","gilled","gills","gimmick","girdle","giveaway","given","giver","giving","gizmo","gizzard","glacial","glacier","glade","gladiator","gladly","glamorous","glamour","glance","glancing","glandular","glare","glaring","glass","glaucoma","glazing","gleaming","gleeful","glider","gliding","glimmer","glimpse","glisten","glitch","glitter","glitzy","gloater","gloating","gloomily","gloomy","glorified","glorifier","glorify","glorious","glory","gloss","glove","glowing","glowworm","glucose","glue","gluten","glutinous","glutton","gnarly","gnat","goal","goatskin","goes","goggles","going","goldfish","goldmine","goldsmith","golf","goliath","gonad","gondola","gone","gong","good","gooey","goofball","goofiness","goofy","google","goon","gopher","gore","gorged","gorgeous","gory","gosling","gossip","gothic","gotten","gout","gown","grab","graceful","graceless","gracious","gradation","graded","grader","gradient","grading","gradually","graduate","graffiti","grafted","grafting","grain","granddad","grandkid","grandly","grandma","grandpa","grandson","granite","granny","granola","grant","granular","grape","graph","grapple","grappling","grasp","grass","gratified","gratify","grating","gratitude","gratuity","gravel","graveness","graves","graveyard","gravitate","gravity","gravy","gray","grazing","greasily","greedily","greedless","greedy","green","greeter","greeting","grew","greyhound","grid","grief","grievance","grieving","grievous","grill","grimace","grimacing","grime","griminess","grimy","grinch","grinning","grip","gristle","grit","groggily","groggy","groin","groom","groove","grooving","groovy","grope","ground","grouped","grout","grove","grower","growing","growl","grub","grudge","grudging","grueling","gruffly","grumble","grumbling","grumbly","grumpily","grunge","grunt","guacamole","guidable","guidance","guide","guiding","guileless","guise","gulf","gullible","gully","gulp","gumball","gumdrop","gumminess","gumming","gummy","gurgle","gurgling","guru","gush","gusto","gusty","gutless","guts","gutter","guy","guzzler","gyration","habitable","habitant","habitat","habitual","hacked","hacker","hacking","hacksaw","had","haggler","haiku","half","halogen","halt","halved","halves","hamburger","hamlet","hammock","hamper","hamster","hamstring","handbag","handball","handbook","handbrake","handcart","handclap","handclasp","handcraft","handcuff","handed","handful","handgrip","handgun","handheld","handiness","handiwork","handlebar","handled","handler","handling","handmade","handoff","handpick","handprint","handrail","handsaw","handset","handsfree","handshake","handstand","handwash","handwork","handwoven","handwrite","handyman","hangnail","hangout","hangover","hangup","hankering","hankie","hanky","haphazard","happening","happier","happiest","happily","happiness","happy","harbor","hardcopy","hardcore","hardcover","harddisk","hardened","hardener","hardening","hardhat","hardhead","hardiness","hardly","hardness","hardship","hardware","hardwired","hardwood","hardy","harmful","harmless","harmonica","harmonics","harmonize","harmony","harness","harpist","harsh","harvest","hash","hassle","haste","hastily","hastiness","hasty","hatbox","hatchback","hatchery","hatchet","hatching","hatchling","hate","hatless","hatred","haunt","haven","hazard","hazelnut","hazily","haziness","hazing","hazy","headache","headband","headboard","headcount","headdress","headed","header","headfirst","headgear","heading","headlamp","headless","headlock","headphone","headpiece","headrest","headroom","headscarf","headset","headsman","headstand","headstone","headway","headwear","heap","heat","heave","heavily","heaviness","heaving","hedge","hedging","heftiness","hefty","helium","helmet","helper","helpful","helping","helpless","helpline","hemlock","hemstitch","hence","henchman","henna","herald","herbal","herbicide","herbs","heritage","hermit","heroics","heroism","herring","herself","hertz","hesitancy","hesitant","hesitate","hexagon","hexagram","hubcap","huddle","huddling","huff","hug","hula","hulk","hull","human","humble","humbling","humbly","humid","humiliate","humility","humming","hummus","humongous","humorist","humorless","humorous","humpback","humped","humvee","hunchback","hundredth","hunger","hungrily","hungry","hunk","hunter","hunting","huntress","huntsman","hurdle","hurled","hurler","hurling","hurray","hurricane","hurried","hurry","hurt","husband","hush","husked","huskiness","hut","hybrid","hydrant","hydrated","hydration","hydrogen","hydroxide","hyperlink","hypertext","hyphen","hypnoses","hypnosis","hypnotic","hypnotism","hypnotist","hypnotize","hypocrisy","hypocrite","ibuprofen","ice","iciness","icing","icky","icon","icy","idealism","idealist","idealize","ideally","idealness","identical","identify","identity","ideology","idiocy","idiom","idly","igloo","ignition","ignore","iguana","illicitly","illusion","illusive","image","imaginary","imagines","imaging","imbecile","imitate","imitation","immature","immerse","immersion","imminent","immobile","immodest","immorally","immortal","immovable","immovably","immunity","immunize","impaired","impale","impart","impatient","impeach","impeding","impending","imperfect","imperial","impish","implant","implement","implicate","implicit","implode","implosion","implosive","imply","impolite","important","importer","impose","imposing","impotence","impotency","impotent","impound","imprecise","imprint","imprison","impromptu","improper","improve","improving","improvise","imprudent","impulse","impulsive","impure","impurity","iodine","iodize","ion","ipad","iphone","ipod","irate","irk","iron","irregular","irrigate","irritable","irritably","irritant","irritate","islamic","islamist","isolated","isolating","isolation","isotope","issue","issuing","italicize","italics","item","itinerary","itunes","ivory","ivy","jab","jackal","jacket","jackknife","jackpot","jailbird","jailbreak","jailer","jailhouse","jalapeno","jam","janitor","january","jargon","jarring","jasmine","jaundice","jaunt","java","jawed","jawless","jawline","jaws","jaybird","jaywalker","jazz","jeep","jeeringly","jellied","jelly","jersey","jester","jet","jiffy","jigsaw","jimmy","jingle","jingling","jinx","jitters","jittery","job","jockey","jockstrap","jogger","jogging","john","joining","jokester","jokingly","jolliness","jolly","jolt","jot","jovial","joyfully","joylessly","joyous","joyride","joystick","jubilance","jubilant","judge","judgingly","judicial","judiciary","judo","juggle","juggling","jugular","juice","juiciness","juicy","jujitsu","jukebox","july","jumble","jumbo","jump","junction","juncture","june","junior","juniper","junkie","junkman","junkyard","jurist","juror","jury","justice","justifier","justify","justly","justness","juvenile","kabob","kangaroo","karaoke","karate","karma","kebab","keenly","keenness","keep","keg","kelp","kennel","kept","kerchief","kerosene","kettle","kick","kiln","kilobyte","kilogram","kilometer","kilowatt","kilt","kimono","kindle","kindling","kindly","kindness","kindred","kinetic","kinfolk","king","kinship","kinsman","kinswoman","kissable","kisser","kissing","kitchen","kite","kitten","kitty","kiwi","kleenex","knapsack","knee","knelt","knickers","knoll","koala","kooky","kosher","krypton","kudos","kung","labored","laborer","laboring","laborious","labrador","ladder","ladies","ladle","ladybug","ladylike","lagged","lagging","lagoon","lair","lake","lance","landed","landfall","landfill","landing","landlady","landless","landline","landlord","landmark","landmass","landmine","landowner","landscape","landside","landslide","language","lankiness","lanky","lantern","lapdog","lapel","lapped","lapping","laptop","lard","large","lark","lash","lasso","last","latch","late","lather","latitude","latrine","latter","latticed","launch","launder","laundry","laurel","lavender","lavish","laxative","lazily","laziness","lazy","lecturer","left","legacy","legal","legend","legged","leggings","legible","legibly","legislate","lego","legroom","legume","legwarmer","legwork","lemon","lend","length","lens","lent","leotard","lesser","letdown","lethargic","lethargy","letter","lettuce","level","leverage","levers","levitate","levitator","liability","liable","liberty","librarian","library","licking","licorice","lid","life","lifter","lifting","liftoff","ligament","likely","likeness","likewise","liking","lilac","lilly","lily","limb","limeade","limelight","limes","limit","limping","limpness","line","lingo","linguini","linguist","lining","linked","linoleum","linseed","lint","lion","lip","liquefy","liqueur","liquid","lisp","list","litigate","litigator","litmus","litter","little","livable","lived","lively","liver","livestock","lividly","living","lizard","lubricant","lubricate","lucid","luckily","luckiness","luckless","lucrative","ludicrous","lugged","lukewarm","lullaby","lumber","luminance","luminous","lumpiness","lumping","lumpish","lunacy","lunar","lunchbox","luncheon","lunchroom","lunchtime","lung","lurch","lure","luridness","lurk","lushly","lushness","luster","lustfully","lustily","lustiness","lustrous","lusty","luxurious","luxury","lying","lyrically","lyricism","lyricist","lyrics","macarena","macaroni","macaw","mace","machine","machinist","magazine","magenta","maggot","magical","magician","magma","magnesium","magnetic","magnetism","magnetize","magnifier","magnify","magnitude","magnolia","mahogany","maimed","majestic","majesty","majorette","majority","makeover","maker","makeshift","making","malformed","malt","mama","mammal","mammary","mammogram","manager","managing","manatee","mandarin","mandate","mandatory","mandolin","manger","mangle","mango","mangy","manhandle","manhole","manhood","manhunt","manicotti","manicure","manifesto","manila","mankind","manlike","manliness","manly","manmade","manned","mannish","manor","manpower","mantis","mantra","manual","many","map","marathon","marauding","marbled","marbles","marbling","march","mardi","margarine","margarita","margin","marigold","marina","marine","marital","maritime","marlin","marmalade","maroon","married","marrow","marry","marshland","marshy","marsupial","marvelous","marxism","mascot","masculine","mashed","mashing","massager","masses","massive","mastiff","matador","matchbook","matchbox","matcher","matching","matchless","material","maternal","maternity","math","mating","matriarch","matrimony","matrix","matron","matted","matter","maturely","maturing","maturity","mauve","maverick","maximize","maximum","maybe","mayday","mayflower","moaner","moaning","mobile","mobility","mobilize","mobster","mocha","mocker","mockup","modified","modify","modular","modulator","module","moisten","moistness","moisture","molar","molasses","mold","molecular","molecule","molehill","mollusk","mom","monastery","monday","monetary","monetize","moneybags","moneyless","moneywise","mongoose","mongrel","monitor","monkhood","monogamy","monogram","monologue","monopoly","monorail","monotone","monotype","monoxide","monsieur","monsoon","monstrous","monthly","monument","moocher","moodiness","moody","mooing","moonbeam","mooned","moonlight","moonlike","moonlit","moonrise","moonscape","moonshine","moonstone","moonwalk","mop","morale","morality","morally","morbidity","morbidly","morphine","morphing","morse","mortality","mortally","mortician","mortified","mortify","mortuary","mosaic","mossy","most","mothball","mothproof","motion","motivate","motivator","motive","motocross","motor","motto","mountable","mountain","mounted","mounting","mourner","mournful","mouse","mousiness","moustache","mousy","mouth","movable","move","movie","moving","mower","mowing","much","muck","mud","mug","mulberry","mulch","mule","mulled","mullets","multiple","multiply","multitask","multitude","mumble","mumbling","mumbo","mummified","mummify","mummy","mumps","munchkin","mundane","municipal","muppet","mural","murkiness","murky","murmuring","muscular","museum","mushily","mushiness","mushroom","mushy","music","musket","muskiness","musky","mustang","mustard","muster","mustiness","musty","mutable","mutate","mutation","mute","mutilated","mutilator","mutiny","mutt","mutual","muzzle","myself","myspace","mystified","mystify","myth","nacho","nag","nail","name","naming","nanny","nanometer","nape","napkin","napped","napping","nappy","narrow","nastily","nastiness","national","native","nativity","natural","nature","naturist","nautical","navigate","navigator","navy","nearby","nearest","nearly","nearness","neatly","neatness","nebula","nebulizer","nectar","negate","negation","negative","neglector","negligee","negligent","negotiate","nemeses","nemesis","neon","nephew","nerd","nervous","nervy","nest","net","neurology","neuron","neurosis","neurotic","neuter","neutron","never","next","nibble","nickname","nicotine","niece","nifty","nimble","nimbly","nineteen","ninetieth","ninja","nintendo","ninth","nuclear","nuclei","nucleus","nugget","nullify","number","numbing","numbly","numbness","numeral","numerate","numerator","numeric","numerous","nuptials","nursery","nursing","nurture","nutcase","nutlike","nutmeg","nutrient","nutshell","nuttiness","nutty","nuzzle","nylon","oaf","oak","oasis","oat","obedience","obedient","obituary","object","obligate","obliged","oblivion","oblivious","oblong","obnoxious","oboe","obscure","obscurity","observant","observer","observing","obsessed","obsession","obsessive","obsolete","obstacle","obstinate","obstruct","obtain","obtrusive","obtuse","obvious","occultist","occupancy","occupant","occupier","occupy","ocean","ocelot","octagon","octane","october","octopus","ogle","oil","oink","ointment","okay","old","olive","olympics","omega","omen","ominous","omission","omit","omnivore","onboard","oncoming","ongoing","onion","online","onlooker","only","onscreen","onset","onshore","onslaught","onstage","onto","onward","onyx","oops","ooze","oozy","opacity","opal","open","operable","operate","operating","operation","operative","operator","opium","opossum","opponent","oppose","opposing","opposite","oppressed","oppressor","opt","opulently","osmosis","other","otter","ouch","ought","ounce","outage","outback","outbid","outboard","outbound","outbreak","outburst","outcast","outclass","outcome","outdated","outdoors","outer","outfield","outfit","outflank","outgoing","outgrow","outhouse","outing","outlast","outlet","outline","outlook","outlying","outmatch","outmost","outnumber","outplayed","outpost","outpour","output","outrage","outrank","outreach","outright","outscore","outsell","outshine","outshoot","outsider","outskirts","outsmart","outsource","outspoken","outtakes","outthink","outward","outweigh","outwit","oval","ovary","oven","overact","overall","overarch","overbid","overbill","overbite","overblown","overboard","overbook","overbuilt","overcast","overcoat","overcome","overcook","overcrowd","overdraft","overdrawn","overdress","overdrive","overdue","overeager","overeater","overexert","overfed","overfeed","overfill","overflow","overfull","overgrown","overhand","overhang","overhaul","overhead","overhear","overheat","overhung","overjoyed","overkill","overlabor","overlaid","overlap","overlay","overload","overlook","overlord","overlying","overnight","overpass","overpay","overplant","overplay","overpower","overprice","overrate","overreach","overreact","override","overripe","overrule","overrun","overshoot","overshot","oversight","oversized","oversleep","oversold","overspend","overstate","overstay","overstep","overstock","overstuff","oversweet","overtake","overthrow","overtime","overtly","overtone","overture","overturn","overuse","overvalue","overview","overwrite","owl","oxford","oxidant","oxidation","oxidize","oxidizing","oxygen","oxymoron","oyster","ozone","paced","pacemaker","pacific","pacifier","pacifism","pacifist","pacify","padded","padding","paddle","paddling","padlock","pagan","pager","paging","pajamas","palace","palatable","palm","palpable","palpitate","paltry","pampered","pamperer","pampers","pamphlet","panama","pancake","pancreas","panda","pandemic","pang","panhandle","panic","panning","panorama","panoramic","panther","pantomime","pantry","pants","pantyhose","paparazzi","papaya","paper","paprika","papyrus","parabola","parachute","parade","paradox","paragraph","parakeet","paralegal","paralyses","paralysis","paralyze","paramedic","parameter","paramount","parasail","parasite","parasitic","parcel","parched","parchment","pardon","parish","parka","parking","parkway","parlor","parmesan","parole","parrot","parsley","parsnip","partake","parted","parting","partition","partly","partner","partridge","party","passable","passably","passage","passcode","passenger","passerby","passing","passion","passive","passivism","passover","passport","password","pasta","pasted","pastel","pastime","pastor","pastrami","pasture","pasty","patchwork","patchy","paternal","paternity","path","patience","patient","patio","patriarch","patriot","patrol","patronage","patronize","pauper","pavement","paver","pavestone","pavilion","paving","pawing","payable","payback","paycheck","payday","payee","payer","paying","payment","payphone","payroll","pebble","pebbly","pecan","pectin","peculiar","peddling","pediatric","pedicure","pedigree","pedometer","pegboard","pelican","pellet","pelt","pelvis","penalize","penalty","pencil","pendant","pending","penholder","penknife","pennant","penniless","penny","penpal","pension","pentagon","pentagram","pep","perceive","percent","perch","percolate","perennial","perfected","perfectly","perfume","periscope","perish","perjurer","perjury","perkiness","perky","perm","peroxide","perpetual","perplexed","persecute","persevere","persuaded","persuader","pesky","peso","pessimism","pessimist","pester","pesticide","petal","petite","petition","petri","petroleum","petted","petticoat","pettiness","petty","petunia","phantom","phobia","phoenix","phonebook","phoney","phonics","phoniness","phony","phosphate","photo","phrase","phrasing","placard","placate","placidly","plank","planner","plant","plasma","plaster","plastic","plated","platform","plating","platinum","platonic","platter","platypus","plausible","plausibly","playable","playback","player","playful","playgroup","playhouse","playing","playlist","playmaker","playmate","playoff","playpen","playroom","playset","plaything","playtime","plaza","pleading","pleat","pledge","plentiful","plenty","plethora","plexiglas","pliable","plod","plop","plot","plow","ploy","pluck","plug","plunder","plunging","plural","plus","plutonium","plywood","poach","pod","poem","poet","pogo","pointed","pointer","pointing","pointless","pointy","poise","poison","poker","poking","polar","police","policy","polio","polish","politely","polka","polo","polyester","polygon","polygraph","polymer","poncho","pond","pony","popcorn","pope","poplar","popper","poppy","popsicle","populace","popular","populate","porcupine","pork","porous","porridge","portable","portal","portfolio","porthole","portion","portly","portside","poser","posh","posing","possible","possibly","possum","postage","postal","postbox","postcard","posted","poster","posting","postnasal","posture","postwar","pouch","pounce","pouncing","pound","pouring","pout","powdered","powdering","powdery","power","powwow","pox","praising","prance","prancing","pranker","prankish","prankster","prayer","praying","preacher","preaching","preachy","preamble","precinct","precise","precision","precook","precut","predator","predefine","predict","preface","prefix","preflight","preformed","pregame","pregnancy","pregnant","preheated","prelaunch","prelaw","prelude","premiere","premises","premium","prenatal","preoccupy","preorder","prepaid","prepay","preplan","preppy","preschool","prescribe","preseason","preset","preshow","president","presoak","press","presume","presuming","preteen","pretended","pretender","pretense","pretext","pretty","pretzel","prevail","prevalent","prevent","preview","previous","prewar","prewashed","prideful","pried","primal","primarily","primary","primate","primer","primp","princess","print","prior","prism","prison","prissy","pristine","privacy","private","privatize","prize","proactive","probable","probably","probation","probe","probing","probiotic","problem","procedure","process","proclaim","procreate","procurer","prodigal","prodigy","produce","product","profane","profanity","professed","professor","profile","profound","profusely","progeny","prognosis","program","progress","projector","prologue","prolonged","promenade","prominent","promoter","promotion","prompter","promptly","prone","prong","pronounce","pronto","proofing","proofread","proofs","propeller","properly","property","proponent","proposal","propose","props","prorate","protector","protegee","proton","prototype","protozoan","protract","protrude","proud","provable","proved","proven","provided","provider","providing","province","proving","provoke","provoking","provolone","prowess","prowler","prowling","proximity","proxy","prozac","prude","prudishly","prune","pruning","pry","psychic","public","publisher","pucker","pueblo","pug","pull","pulmonary","pulp","pulsate","pulse","pulverize","puma","pumice","pummel","punch","punctual","punctuate","punctured","pungent","punisher","punk","pupil","puppet","puppy","purchase","pureblood","purebred","purely","pureness","purgatory","purge","purging","purifier","purify","purist","puritan","purity","purple","purplish","purposely","purr","purse","pursuable","pursuant","pursuit","purveyor","pushcart","pushchair","pusher","pushiness","pushing","pushover","pushpin","pushup","pushy","putdown","putt","puzzle","puzzling","pyramid","pyromania","python","quack","quadrant","quail","quaintly","quake","quaking","qualified","qualifier","qualify","quality","qualm","quantum","quarrel","quarry","quartered","quarterly","quarters","quartet","quench","query","quicken","quickly","quickness","quicksand","quickstep","quiet","quill","quilt","quintet","quintuple","quirk","quit","quiver","quizzical","quotable","quotation","quote","rabid","race","racing","racism","rack","racoon","radar","radial","radiance","radiantly","radiated","radiation","radiator","radio","radish","raffle","raft","rage","ragged","raging","ragweed","raider","railcar","railing","railroad","railway","raisin","rake","raking","rally","ramble","rambling","ramp","ramrod","ranch","rancidity","random","ranged","ranger","ranging","ranked","ranking","ransack","ranting","rants","rare","rarity","rascal","rash","rasping","ravage","raven","ravine","raving","ravioli","ravishing","reabsorb","reach","reacquire","reaction","reactive","reactor","reaffirm","ream","reanalyze","reappear","reapply","reappoint","reapprove","rearrange","rearview","reason","reassign","reassure","reattach","reawake","rebalance","rebate","rebel","rebirth","reboot","reborn","rebound","rebuff","rebuild","rebuilt","reburial","rebuttal","recall","recant","recapture","recast","recede","recent","recess","recharger","recipient","recital","recite","reckless","reclaim","recliner","reclining","recluse","reclusive","recognize","recoil","recollect","recolor","reconcile","reconfirm","reconvene","recopy","record","recount","recoup","recovery","recreate","rectal","rectangle","rectified","rectify","recycled","recycler","recycling","reemerge","reenact","reenter","reentry","reexamine","referable","referee","reference","refill","refinance","refined","refinery","refining","refinish","reflected","reflector","reflex","reflux","refocus","refold","reforest","reformat","reformed","reformer","reformist","refract","refrain","refreeze","refresh","refried","refueling","refund","refurbish","refurnish","refusal","refuse","refusing","refutable","refute","regain","regalia","regally","reggae","regime","region","register","registrar","registry","regress","regretful","regroup","regular","regulate","regulator","rehab","reheat","rehire","rehydrate","reimburse","reissue","reiterate","rejoice","rejoicing","rejoin","rekindle","relapse","relapsing","relatable","related","relation","relative","relax","relay","relearn","release","relenting","reliable","reliably","reliance","reliant","relic","relieve","relieving","relight","relish","relive","reload","relocate","relock","reluctant","rely","remake","remark","remarry","rematch","remedial","remedy","remember","reminder","remindful","remission","remix","remnant","remodeler","remold","remorse","remote","removable","removal","removed","remover","removing","rename","renderer","rendering","rendition","renegade","renewable","renewably","renewal","renewed","renounce","renovate","renovator","rentable","rental","rented","renter","reoccupy","reoccur","reopen","reorder","repackage","repacking","repaint","repair","repave","repaying","repayment","repeal","repeated","repeater","repent","rephrase","replace","replay","replica","reply","reporter","repose","repossess","repost","repressed","reprimand","reprint","reprise","reproach","reprocess","reproduce","reprogram","reps","reptile","reptilian","repugnant","repulsion","repulsive","repurpose","reputable","reputably","request","require","requisite","reroute","rerun","resale","resample","rescuer","reseal","research","reselect","reseller","resemble","resend","resent","reset","reshape","reshoot","reshuffle","residence","residency","resident","residual","residue","resigned","resilient","resistant","resisting","resize","resolute","resolved","resonant","resonate","resort","resource","respect","resubmit","result","resume","resupply","resurface","resurrect","retail","retainer","retaining","retake","retaliate","retention","rethink","retinal","retired","retiree","retiring","retold","retool","retorted","retouch","retrace","retract","retrain","retread","retreat","retrial","retrieval","retriever","retry","return","retying","retype","reunion","reunite","reusable","reuse","reveal","reveler","revenge","revenue","reverb","revered","reverence","reverend","reversal","reverse","reversing","reversion","revert","revisable","revise","revision","revisit","revivable","revival","reviver","reviving","revocable","revoke","revolt","revolver","revolving","reward","rewash","rewind","rewire","reword","rework","rewrap","rewrite","rhyme","ribbon","ribcage","rice","riches","richly","richness","rickety","ricotta","riddance","ridden","ride","riding","rifling","rift","rigging","rigid","rigor","rimless","rimmed","rind","rink","rinse","rinsing","riot","ripcord","ripeness","ripening","ripping","ripple","rippling","riptide","rise","rising","risk","risotto","ritalin","ritzy","rival","riverbank","riverbed","riverboat","riverside","riveter","riveting","roamer","roaming","roast","robbing","robe","robin","robotics","robust","rockband","rocker","rocket","rockfish","rockiness","rocking","rocklike","rockslide","rockstar","rocky","rogue","roman","romp","rope","roping","roster","rosy","rotten","rotting","rotunda","roulette","rounding","roundish","roundness","roundup","roundworm","routine","routing","rover","roving","royal","rubbed","rubber","rubbing","rubble","rubdown","ruby","ruckus","rudder","rug","ruined","rule","rumble","rumbling","rummage","rumor","runaround","rundown","runner","running","runny","runt","runway","rupture","rural","ruse","rush","rust","rut","sabbath","sabotage","sacrament","sacred","sacrifice","sadden","saddlebag","saddled","saddling","sadly","sadness","safari","safeguard","safehouse","safely","safeness","saffron","saga","sage","sagging","saggy","said","saint","sake","salad","salami","salaried","salary","saline","salon","saloon","salsa","salt","salutary","salute","salvage","salvaging","salvation","same","sample","sampling","sanction","sanctity","sanctuary","sandal","sandbag","sandbank","sandbar","sandblast","sandbox","sanded","sandfish","sanding","sandlot","sandpaper","sandpit","sandstone","sandstorm","sandworm","sandy","sanitary","sanitizer","sank","santa","sapling","sappiness","sappy","sarcasm","sarcastic","sardine","sash","sasquatch","sassy","satchel","satiable","satin","satirical","satisfied","satisfy","saturate","saturday","sauciness","saucy","sauna","savage","savanna","saved","savings","savior","savor","saxophone","say","scabbed","scabby","scalded","scalding","scale","scaling","scallion","scallop","scalping","scam","scandal","scanner","scanning","scant","scapegoat","scarce","scarcity","scarecrow","scared","scarf","scarily","scariness","scarring","scary","scavenger","scenic","schedule","schematic","scheme","scheming","schilling","schnapps","scholar","science","scientist","scion","scoff","scolding","scone","scoop","scooter","scope","scorch","scorebook","scorecard","scored","scoreless","scorer","scoring","scorn","scorpion","scotch","scoundrel","scoured","scouring","scouting","scouts","scowling","scrabble","scraggly","scrambled","scrambler","scrap","scratch","scrawny","screen","scribble","scribe","scribing","scrimmage","script","scroll","scrooge","scrounger","scrubbed","scrubber","scruffy","scrunch","scrutiny","scuba","scuff","sculptor","sculpture","scurvy","scuttle","secluded","secluding","seclusion","second","secrecy","secret","sectional","sector","secular","securely","security","sedan","sedate","sedation","sedative","sediment","seduce","seducing","segment","seismic","seizing","seldom","selected","selection","selective","selector","self","seltzer","semantic","semester","semicolon","semifinal","seminar","semisoft","semisweet","senate","senator","send","senior","senorita","sensation","sensitive","sensitize","sensually","sensuous","sepia","september","septic","septum","sequel","sequence","sequester","series","sermon","serotonin","serpent","serrated","serve","service","serving","sesame","sessions","setback","setting","settle","settling","setup","sevenfold","seventeen","seventh","seventy","severity","shabby","shack","shaded","shadily","shadiness","shading","shadow","shady","shaft","shakable","shakily","shakiness","shaking","shaky","shale","shallot","shallow","shame","shampoo","shamrock","shank","shanty","shape","shaping","share","sharpener","sharper","sharpie","sharply","sharpness","shawl","sheath","shed","sheep","sheet","shelf","shell","shelter","shelve","shelving","sherry","shield","shifter","shifting","shiftless","shifty","shimmer","shimmy","shindig","shine","shingle","shininess","shining","shiny","ship","shirt","shivering","shock","shone","shoplift","shopper","shopping","shoptalk","shore","shortage","shortcake","shortcut","shorten","shorter","shorthand","shortlist","shortly","shortness","shorts","shortwave","shorty","shout","shove","showbiz","showcase","showdown","shower","showgirl","showing","showman","shown","showoff","showpiece","showplace","showroom","showy","shrank","shrapnel","shredder","shredding","shrewdly","shriek","shrill","shrimp","shrine","shrink","shrivel","shrouded","shrubbery","shrubs","shrug","shrunk","shucking","shudder","shuffle","shuffling","shun","shush","shut","shy","siamese","siberian","sibling","siding","sierra","siesta","sift","sighing","silenced","silencer","silent","silica","silicon","silk","silliness","silly","silo","silt","silver","similarly","simile","simmering","simple","simplify","simply","sincere","sincerity","singer","singing","single","singular","sinister","sinless","sinner","sinuous","sip","siren","sister","sitcom","sitter","sitting","situated","situation","sixfold","sixteen","sixth","sixties","sixtieth","sixtyfold","sizable","sizably","size","sizing","sizzle","sizzling","skater","skating","skedaddle","skeletal","skeleton","skeptic","sketch","skewed","skewer","skid","skied","skier","skies","skiing","skilled","skillet","skillful","skimmed","skimmer","skimming","skimpily","skincare","skinhead","skinless","skinning","skinny","skintight","skipper","skipping","skirmish","skirt","skittle","skydiver","skylight","skyline","skype","skyrocket","skyward","slab","slacked","slacker","slacking","slackness","slacks","slain","slam","slander","slang","slapping","slapstick","slashed","slashing","slate","slather","slaw","sled","sleek","sleep","sleet","sleeve","slept","sliceable","sliced","slicer","slicing","slick","slider","slideshow","sliding","slighted","slighting","slightly","slimness","slimy","slinging","slingshot","slinky","slip","slit","sliver","slobbery","slogan","sloped","sloping","sloppily","sloppy","slot","slouching","slouchy","sludge","slug","slum","slurp","slush","sly","small","smartly","smartness","smasher","smashing","smashup","smell","smelting","smile","smilingly","smirk","smite","smith","smitten","smock","smog","smoked","smokeless","smokiness","smoking","smoky","smolder","smooth","smother","smudge","smudgy","smuggler","smuggling","smugly","smugness","snack","snagged","snaking","snap","snare","snarl","snazzy","sneak","sneer","sneeze","sneezing","snide","sniff","snippet","snipping","snitch","snooper","snooze","snore","snoring","snorkel","snort","snout","snowbird","snowboard","snowbound","snowcap","snowdrift","snowdrop","snowfall","snowfield","snowflake","snowiness","snowless","snowman","snowplow","snowshoe","snowstorm","snowsuit","snowy","snub","snuff","snuggle","snugly","snugness","speak","spearfish","spearhead","spearman","spearmint","species","specimen","specked","speckled","specks","spectacle","spectator","spectrum","speculate","speech","speed","spellbind","speller","spelling","spendable","spender","spending","spent","spew","sphere","spherical","sphinx","spider","spied","spiffy","spill","spilt","spinach","spinal","spindle","spinner","spinning","spinout","spinster","spiny","spiral","spirited","spiritism","spirits","spiritual","splashed","splashing","splashy","splatter","spleen","splendid","splendor","splice","splicing","splinter","splotchy","splurge","spoilage","spoiled","spoiler","spoiling","spoils","spoken","spokesman","sponge","spongy","sponsor","spoof","spookily","spooky","spool","spoon","spore","sporting","sports","sporty","spotless","spotlight","spotted","spotter","spotting","spotty","spousal","spouse","spout","sprain","sprang","sprawl","spray","spree","sprig","spring","sprinkled","sprinkler","sprint","sprite","sprout","spruce","sprung","spry","spud","spur","sputter","spyglass","squabble","squad","squall","squander","squash","squatted","squatter","squatting","squeak","squealer","squealing","squeamish","squeegee","squeeze","squeezing","squid","squiggle","squiggly","squint","squire","squirt","squishier","squishy","stability","stabilize","stable","stack","stadium","staff","stage","staging","stagnant","stagnate","stainable","stained","staining","stainless","stalemate","staleness","stalling","stallion","stamina","stammer","stamp","stand","stank","staple","stapling","starboard","starch","stardom","stardust","starfish","stargazer","staring","stark","starless","starlet","starlight","starlit","starring","starry","starship","starter","starting","startle","startling","startup","starved","starving","stash","state","static","statistic","statue","stature","status","statute","statutory","staunch","stays","steadfast","steadier","steadily","steadying","steam","steed","steep","steerable","steering","steersman","stegosaur","stellar","stem","stench","stencil","step","stereo","sterile","sterility","sterilize","sterling","sternness","sternum","stew","stick","stiffen","stiffly","stiffness","stifle","stifling","stillness","stilt","stimulant","stimulate","stimuli","stimulus","stinger","stingily","stinging","stingray","stingy","stinking","stinky","stipend","stipulate","stir","stitch","stock","stoic","stoke","stole","stomp","stonewall","stoneware","stonework","stoning","stony","stood","stooge","stool","stoop","stoplight","stoppable","stoppage","stopped","stopper","stopping","stopwatch","storable","storage","storeroom","storewide","storm","stout","stove","stowaway","stowing","straddle","straggler","strained","strainer","straining","strangely","stranger","strangle","strategic","strategy","stratus","straw","stray","streak","stream","street","strength","strenuous","strep","stress","stretch","strewn","stricken","strict","stride","strife","strike","striking","strive","striving","strobe","strode","stroller","strongbox","strongly","strongman","struck","structure","strudel","struggle","strum","strung","strut","stubbed","stubble","stubbly","stubborn","stucco","stuck","student","studied","studio","study","stuffed","stuffing","stuffy","stumble","stumbling","stump","stung","stunned","stunner","stunning","stunt","stupor","sturdily","sturdy","styling","stylishly","stylist","stylized","stylus","suave","subarctic","subatomic","subdivide","subdued","subduing","subfloor","subgroup","subheader","subject","sublease","sublet","sublevel","sublime","submarine","submerge","submersed","submitter","subpanel","subpar","subplot","subprime","subscribe","subscript","subsector","subside","subsiding","subsidize","subsidy","subsoil","subsonic","substance","subsystem","subtext","subtitle","subtly","subtotal","subtract","subtype","suburb","subway","subwoofer","subzero","succulent","such","suction","sudden","sudoku","suds","sufferer","suffering","suffice","suffix","suffocate","suffrage","sugar","suggest","suing","suitable","suitably","suitcase","suitor","sulfate","sulfide","sulfite","sulfur","sulk","sullen","sulphate","sulphuric","sultry","superbowl","superglue","superhero","superior","superjet","superman","supermom","supernova","supervise","supper","supplier","supply","support","supremacy","supreme","surcharge","surely","sureness","surface","surfacing","surfboard","surfer","surgery","surgical","surging","surname","surpass","surplus","surprise","surreal","surrender","surrogate","surround","survey","survival","survive","surviving","survivor","sushi","suspect","suspend","suspense","sustained","sustainer","swab","swaddling","swagger","swampland","swan","swapping","swarm","sway","swear","sweat","sweep","swell","swept","swerve","swifter","swiftly","swiftness","swimmable","swimmer","swimming","swimsuit","swimwear","swinger","swinging","swipe","swirl","switch","swivel","swizzle","swooned","swoop","swoosh","swore","sworn","swung","sycamore","sympathy","symphonic","symphony","symptom","synapse","syndrome","synergy","synopses","synopsis","synthesis","synthetic","syrup","system","t-shirt","tabasco","tabby","tableful","tables","tablet","tableware","tabloid","tackiness","tacking","tackle","tackling","tacky","taco","tactful","tactical","tactics","tactile","tactless","tadpole","taekwondo","tag","tainted","take","taking","talcum","talisman","tall","talon","tamale","tameness","tamer","tamper","tank","tanned","tannery","tanning","tantrum","tapeless","tapered","tapering","tapestry","tapioca","tapping","taps","tarantula","target","tarmac","tarnish","tarot","tartar","tartly","tartness","task","tassel","taste","tastiness","tasting","tasty","tattered","tattle","tattling","tattoo","taunt","tavern","thank","that","thaw","theater","theatrics","thee","theft","theme","theology","theorize","thermal","thermos","thesaurus","these","thesis","thespian","thicken","thicket","thickness","thieving","thievish","thigh","thimble","thing","think","thinly","thinner","thinness","thinning","thirstily","thirsting","thirsty","thirteen","thirty","thong","thorn","those","thousand","thrash","thread","threaten","threefold","thrift","thrill","thrive","thriving","throat","throbbing","throng","throttle","throwaway","throwback","thrower","throwing","thud","thumb","thumping","thursday","thus","thwarting","thyself","tiara","tibia","tidal","tidbit","tidiness","tidings","tidy","tiger","tighten","tightly","tightness","tightrope","tightwad","tigress","tile","tiling","till","tilt","timid","timing","timothy","tinderbox","tinfoil","tingle","tingling","tingly","tinker","tinkling","tinsel","tinsmith","tint","tinwork","tiny","tipoff","tipped","tipper","tipping","tiptoeing","tiptop","tiring","tissue","trace","tracing","track","traction","tractor","trade","trading","tradition","traffic","tragedy","trailing","trailside","train","traitor","trance","tranquil","transfer","transform","translate","transpire","transport","transpose","trapdoor","trapeze","trapezoid","trapped","trapper","trapping","traps","trash","travel","traverse","travesty","tray","treachery","treading","treadmill","treason","treat","treble","tree","trekker","tremble","trembling","tremor","trench","trend","trespass","triage","trial","triangle","tribesman","tribunal","tribune","tributary","tribute","triceps","trickery","trickily","tricking","trickle","trickster","tricky","tricolor","tricycle","trident","tried","trifle","trifocals","trillion","trilogy","trimester","trimmer","trimming","trimness","trinity","trio","tripod","tripping","triumph","trivial","trodden","trolling","trombone","trophy","tropical","tropics","trouble","troubling","trough","trousers","trout","trowel","truce","truck","truffle","trump","trunks","trustable","trustee","trustful","trusting","trustless","truth","try","tubby","tubeless","tubular","tucking","tuesday","tug","tuition","tulip","tumble","tumbling","tummy","turban","turbine","turbofan","turbojet","turbulent","turf","turkey","turmoil","turret","turtle","tusk","tutor","tutu","tux","tweak","tweed","tweet","tweezers","twelve","twentieth","twenty","twerp","twice","twiddle","twiddling","twig","twilight","twine","twins","twirl","twistable","twisted","twister","twisting","twisty","twitch","twitter","tycoon","tying","tyke","udder","ultimate","ultimatum","ultra","umbilical","umbrella","umpire","unabashed","unable","unadorned","unadvised","unafraid","unaired","unaligned","unaltered","unarmored","unashamed","unaudited","unawake","unaware","unbaked","unbalance","unbeaten","unbend","unbent","unbiased","unbitten","unblended","unblessed","unblock","unbolted","unbounded","unboxed","unbraided","unbridle","unbroken","unbuckled","unbundle","unburned","unbutton","uncanny","uncapped","uncaring","uncertain","unchain","unchanged","uncharted","uncheck","uncivil","unclad","unclaimed","unclamped","unclasp","uncle","unclip","uncloak","unclog","unclothed","uncoated","uncoiled","uncolored","uncombed","uncommon","uncooked","uncork","uncorrupt","uncounted","uncouple","uncouth","uncover","uncross","uncrown","uncrushed","uncured","uncurious","uncurled","uncut","undamaged","undated","undaunted","undead","undecided","undefined","underage","underarm","undercoat","undercook","undercut","underdog","underdone","underfed","underfeed","underfoot","undergo","undergrad","underhand","underline","underling","undermine","undermost","underpaid","underpass","underpay","underrate","undertake","undertone","undertook","undertow","underuse","underwear","underwent","underwire","undesired","undiluted","undivided","undocked","undoing","undone","undrafted","undress","undrilled","undusted","undying","unearned","unearth","unease","uneasily","uneasy","uneatable","uneaten","unedited","unelected","unending","unengaged","unenvied","unequal","unethical","uneven","unexpired","unexposed","unfailing","unfair","unfasten","unfazed","unfeeling","unfiled","unfilled","unfitted","unfitting","unfixable","unfixed","unflawed","unfocused","unfold","unfounded","unframed","unfreeze","unfrosted","unfrozen","unfunded","unglazed","ungloved","unglue","ungodly","ungraded","ungreased","unguarded","unguided","unhappily","unhappy","unharmed","unhealthy","unheard","unhearing","unheated","unhelpful","unhidden","unhinge","unhitched","unholy","unhook","unicorn","unicycle","unified","unifier","uniformed","uniformly","unify","unimpeded","uninjured","uninstall","uninsured","uninvited","union","uniquely","unisexual","unison","unissued","unit","universal","universe","unjustly","unkempt","unkind","unknotted","unknowing","unknown","unlaced","unlatch","unlawful","unleaded","unlearned","unleash","unless","unleveled","unlighted","unlikable","unlimited","unlined","unlinked","unlisted","unlit","unlivable","unloaded","unloader","unlocked","unlocking","unlovable","unloved","unlovely","unloving","unluckily","unlucky","unmade","unmanaged","unmanned","unmapped","unmarked","unmasked","unmasking","unmatched","unmindful","unmixable","unmixed","unmolded","unmoral","unmovable","unmoved","unmoving","unnamable","unnamed","unnatural","unneeded","unnerve","unnerving","unnoticed","unopened","unopposed","unpack","unpadded","unpaid","unpainted","unpaired","unpaved","unpeeled","unpicked","unpiloted","unpinned","unplanned","unplanted","unpleased","unpledged","unplowed","unplug","unpopular","unproven","unquote","unranked","unrated","unraveled","unreached","unread","unreal","unreeling","unrefined","unrelated","unrented","unrest","unretired","unrevised","unrigged","unripe","unrivaled","unroasted","unrobed","unroll","unruffled","unruly","unrushed","unsaddle","unsafe","unsaid","unsalted","unsaved","unsavory","unscathed","unscented","unscrew","unsealed","unseated","unsecured","unseeing","unseemly","unseen","unselect","unselfish","unsent","unsettled","unshackle","unshaken","unshaved","unshaven","unsheathe","unshipped","unsightly","unsigned","unskilled","unsliced","unsmooth","unsnap","unsocial","unsoiled","unsold","unsolved","unsorted","unspoiled","unspoken","unstable","unstaffed","unstamped","unsteady","unsterile","unstirred","unstitch","unstopped","unstuck","unstuffed","unstylish","unsubtle","unsubtly","unsuited","unsure","unsworn","untagged","untainted","untaken","untamed","untangled","untapped","untaxed","unthawed","unthread","untidy","untie","until","untimed","untimely","untitled","untoasted","untold","untouched","untracked","untrained","untreated","untried","untrimmed","untrue","untruth","unturned","untwist","untying","unusable","unused","unusual","unvalued","unvaried","unvarying","unveiled","unveiling","unvented","unviable","unvisited","unvocal","unwanted","unwarlike","unwary","unwashed","unwatched","unweave","unwed","unwelcome","unwell","unwieldy","unwilling","unwind","unwired","unwitting","unwomanly","unworldly","unworn","unworried","unworthy","unwound","unwoven","unwrapped","unwritten","unzip","upbeat","upchuck","upcoming","upcountry","update","upfront","upgrade","upheaval","upheld","uphill","uphold","uplifted","uplifting","upload","upon","upper","upright","uprising","upriver","uproar","uproot","upscale","upside","upstage","upstairs","upstart","upstate","upstream","upstroke","upswing","uptake","uptight","uptown","upturned","upward","upwind","uranium","urban","urchin","urethane","urgency","urgent","urging","urologist","urology","usable","usage","useable","used","uselessly","user","usher","usual","utensil","utility","utilize","utmost","utopia","utter","vacancy","vacant","vacate","vacation","vagabond","vagrancy","vagrantly","vaguely","vagueness","valiant","valid","valium","valley","valuables","value","vanilla","vanish","vanity","vanquish","vantage","vaporizer","variable","variably","varied","variety","various","varmint","varnish","varsity","varying","vascular","vaseline","vastly","vastness","veal","vegan","veggie","vehicular","velcro","velocity","velvet","vendetta","vending","vendor","veneering","vengeful","venomous","ventricle","venture","venue","venus","verbalize","verbally","verbose","verdict","verify","verse","version","versus","vertebrae","vertical","vertigo","very","vessel","vest","veteran","veto","vexingly","viability","viable","vibes","vice","vicinity","victory","video","viewable","viewer","viewing","viewless","viewpoint","vigorous","village","villain","vindicate","vineyard","vintage","violate","violation","violator","violet","violin","viper","viral","virtual","virtuous","virus","visa","viscosity","viscous","viselike","visible","visibly","vision","visiting","visitor","visor","vista","vitality","vitalize","vitally","vitamins","vivacious","vividly","vividness","vixen","vocalist","vocalize","vocally","vocation","voice","voicing","void","volatile","volley","voltage","volumes","voter","voting","voucher","vowed","vowel","voyage","wackiness","wad","wafer","waffle","waged","wager","wages","waggle","wagon","wake","waking","walk","walmart","walnut","walrus","waltz","wand","wannabe","wanted","wanting","wasabi","washable","washbasin","washboard","washbowl","washcloth","washday","washed","washer","washhouse","washing","washout","washroom","washstand","washtub","wasp","wasting","watch","water","waviness","waving","wavy","whacking","whacky","wham","wharf","wheat","whenever","whiff","whimsical","whinny","whiny","whisking","whoever","whole","whomever","whoopee","whooping","whoops","why","wick","widely","widen","widget","widow","width","wieldable","wielder","wife","wifi","wikipedia","wildcard","wildcat","wilder","wildfire","wildfowl","wildland","wildlife","wildly","wildness","willed","willfully","willing","willow","willpower","wilt","wimp","wince","wincing","wind","wing","winking","winner","winnings","winter","wipe","wired","wireless","wiring","wiry","wisdom","wise","wish","wisplike","wispy","wistful","wizard","wobble","wobbling","wobbly","wok","wolf","wolverine","womanhood","womankind","womanless","womanlike","womanly","womb","woof","wooing","wool","woozy","word","work","worried","worrier","worrisome","worry","worsening","worshiper","worst","wound","woven","wow","wrangle","wrath","wreath","wreckage","wrecker","wrecking","wrench","wriggle","wriggly","wrinkle","wrinkly","wrist","writing","written","wrongdoer","wronged","wrongful","wrongly","wrongness","wrought","xbox","xerox","yahoo","yam","yanking","yapping","yard","yarn","yeah","yearbook","yearling","yearly","yearning","yeast","yelling","yelp","yen","yesterday","yiddish","yield","yin","yippee","yo-yo","yodel","yoga","yogurt","yonder","yoyo","yummy","zap","zealous","zebra","zen","zeppelin","zero","zestfully","zesty","zigzagged","zipfile","zipping","zippy","zips","zit","zodiac","zombie","zone","zoning","zookeeper","zoologist","zoology","zoom"];var Cf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Pf={length:14,ambiguous:!1,number:!0,minNumber:1,uppercase:!0,minUppercase:0,lowercase:!0,minLowercase:0,special:!1,minSpecial:1,type:"password",numWords:3,wordSeparator:"-",capitalize:!1,includeNumber:!1},xf="passwordGenerationOptions",kf="generatedPasswordHistory";class Tf extends Y.a{constructor(){super(...arguments),this.minComplexity=0,this.minLength=0,this.requireUpper=!1,this.requireLower=!1,this.requireNumbers=!1,this.requireSpecial=!1}}class If extends Y.a{constructor(e){super(),null!=e&&(this.id=e.id,this.organizationId=e.organizationId,this.type=e.type,this.data=e.data,this.enabled=e.enabled)}}var Df=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Af="policies_";var Mf=i(180),zf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var Ef=i(836),Uf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Nf="settings_",Rf="equivalentDomains";var Ff=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var Qf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Vf="accessToken",Bf="refreshToken",Lf="twoFactorToken_";var _f=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const jf="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",Kf="23456789BCDFGHJKMNPQRTVWXY";var Hf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var Wf=i(122);class qf{}var Gf=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Jf extends yl.a{constructor(e){super(e),this.apiKey=this.getResponseProperty("ApiKey")}}class Yf extends yl.a{constructor(e){super(e),this.url=null,this.attachmentId=this.getResponseProperty("AttachmentId"),this.fileUploadType=this.getResponseProperty("FileUploadType");const t=this.getResponseProperty("CipherResponse"),i=this.getResponseProperty("CipherMiniResponse");this.cipherResponse=null==t?null:new Pl(t),this.cipherMiniResponse=null==i?null:new Pl(i),this.url=this.getResponseProperty("Url")}}class $f extends yl.a{constructor(e){super(e),this.invoices=[],this.transactions=[],this.balance=this.getResponseProperty("Balance");const t=this.getResponseProperty("PaymentSource"),i=this.getResponseProperty("Transactions"),n=this.getResponseProperty("Invoices");this.paymentSource=null==t?null:new Xf(t),null!=i&&(this.transactions=i.map(e=>new ey(e))),null!=n&&(this.invoices=n.map(e=>new Zf(e)))}}class Xf extends yl.a{constructor(e){super(e),this.type=this.getResponseProperty("Type"),this.cardBrand=this.getResponseProperty("CardBrand"),this.description=this.getResponseProperty("Description"),this.needsVerification=this.getResponseProperty("NeedsVerification")}}class Zf extends yl.a{constructor(e){super(e),this.url=this.getResponseProperty("Url"),this.pdfUrl=this.getResponseProperty("PdfUrl"),this.number=this.getResponseProperty("Number"),this.paid=this.getResponseProperty("Paid"),this.date=this.getResponseProperty("Date"),this.amount=this.getResponseProperty("Amount")}}class ey extends yl.a{constructor(e){super(e),this.createdDate=this.getResponseProperty("CreatedDate"),this.amount=this.getResponseProperty("Amount"),this.refunded=this.getResponseProperty("Refunded"),this.partiallyRefunded=this.getResponseProperty("PartiallyRefunded"),this.refundedAmount=this.getResponseProperty("RefundedAmount"),this.type=this.getResponseProperty("Type"),this.paymentMethodType=this.getResponseProperty("PaymentMethodType"),this.details=this.getResponseProperty("Details")}}class ty extends yl.a{constructor(e){super(e),this.addedDate=this.getResponseProperty("AddedDate"),this.breachDate=this.getResponseProperty("BreachDate"),this.dataClasses=this.getResponseProperty("DataClasses"),this.description=this.getResponseProperty("Description"),this.domain=this.getResponseProperty("Domain"),this.isActive=this.getResponseProperty("IsActive"),this.isVerified=this.getResponseProperty("IsVerified"),this.logoPath=this.getResponseProperty("LogoPath"),this.modifiedDate=this.getResponseProperty("ModifiedDate"),this.name=this.getResponseProperty("Name"),this.pwnCount=this.getResponseProperty("PwnCount"),this.title=this.getResponseProperty("Title")}}class iy extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.granteeId=this.getResponseProperty("GranteeId"),this.name=this.getResponseProperty("Name"),this.email=this.getResponseProperty("Email"),this.type=this.getResponseProperty("Type"),this.status=this.getResponseProperty("Status"),this.waitTimeDays=this.getResponseProperty("WaitTimeDays"),this.creationDate=this.getResponseProperty("CreationDate")}}class ny extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.grantorId=this.getResponseProperty("GrantorId"),this.name=this.getResponseProperty("Name"),this.email=this.getResponseProperty("Email"),this.type=this.getResponseProperty("Type"),this.status=this.getResponseProperty("Status"),this.waitTimeDays=this.getResponseProperty("WaitTimeDays"),this.creationDate=this.getResponseProperty("CreationDate")}}class sy extends yl.a{constructor(e){super(e),this.keyEncrypted=this.getResponseProperty("KeyEncrypted"),this.kdf=this.getResponseProperty("Kdf"),this.kdfIterations=this.getResponseProperty("KdfIterations")}}class ry extends yl.a{constructor(e){super(e),this.ciphers=[],this.keyEncrypted=this.getResponseProperty("KeyEncrypted");const t=this.getResponseProperty("Ciphers");null!=t&&(this.ciphers=t.map(e=>new Pl(e)))}}class oy extends yl.a{constructor(e){super(e),this.type=this.getResponseProperty("Type"),this.userId=this.getResponseProperty("UserId"),this.organizationId=this.getResponseProperty("OrganizationId"),this.cipherId=this.getResponseProperty("CipherId"),this.collectionId=this.getResponseProperty("CollectionId"),this.groupId=this.getResponseProperty("GroupId"),this.policyId=this.getResponseProperty("PolicyId"),this.organizationUserId=this.getResponseProperty("OrganizationUserId"),this.actingUserId=this.getResponseProperty("ActingUserId"),this.date=this.getResponseProperty("Date"),this.deviceType=this.getResponseProperty("DeviceType"),this.ipAddress=this.getResponseProperty("IpAddress")}}class cy extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.organizationId=this.getResponseProperty("OrganizationId"),this.name=this.getResponseProperty("Name"),this.accessAll=this.getResponseProperty("AccessAll"),this.externalId=this.getResponseProperty("ExternalId")}}class ay extends cy{constructor(e){super(e),this.collections=[];const t=this.getResponseProperty("Collections");null!=t&&(this.collections=t.map(e=>new xl(e)))}}class ly extends yl.a{constructor(e){super(e),this.type=this.getResponseProperty("Type"),this.product=this.getResponseProperty("Product"),this.name=this.getResponseProperty("Name"),this.isAnnual=this.getResponseProperty("IsAnnual"),this.nameLocalizationKey=this.getResponseProperty("NameLocalizationKey"),this.descriptionLocalizationKey=this.getResponseProperty("DescriptionLocalizationKey"),this.canBeUsedByBusiness=this.getResponseProperty("CanBeUsedByBusiness"),this.baseSeats=this.getResponseProperty("BaseSeats"),this.baseStorageGb=this.getResponseProperty("BaseStorageGb"),this.maxCollections=this.getResponseProperty("MaxCollections"),this.maxUsers=this.getResponseProperty("MaxUsers"),this.hasAdditionalSeatsOption=this.getResponseProperty("HasAdditionalSeatsOption"),this.maxAdditionalSeats=this.getResponseProperty("MaxAdditionalSeats"),this.hasAdditionalStorageOption=this.getResponseProperty("HasAdditionalStorageOption"),this.maxAdditionalStorage=this.getResponseProperty("MaxAdditionalStorage"),this.hasPremiumAccessOption=this.getResponseProperty("HasPremiumAccessOption"),this.trialPeriodDays=this.getResponseProperty("TrialPeriodDays"),this.hasSelfHost=this.getResponseProperty("HasSelfHost"),this.hasPolicies=this.getResponseProperty("HasPolicies"),this.hasGroups=this.getResponseProperty("HasGroups"),this.hasDirectory=this.getResponseProperty("HasDirectory"),this.hasEvents=this.getResponseProperty("HasEvents"),this.hasTotp=this.getResponseProperty("HasTotp"),this.has2fa=this.getResponseProperty("Has2fa"),this.hasApi=this.getResponseProperty("HasApi"),this.hasSso=this.getResponseProperty("HasSso"),this.usersGetPremium=this.getResponseProperty("UsersGetPremium"),this.upgradeSortOrder=this.getResponseProperty("UpgradeSortOrder"),this.displaySortOrder=this.getResponseProperty("SortOrder"),this.legacyYear=this.getResponseProperty("LegacyYear"),this.disabled=this.getResponseProperty("Disabled"),this.stripePlanId=this.getResponseProperty("StripePlanId"),this.stripeSeatPlanId=this.getResponseProperty("StripeSeatPlanId"),this.stripeStoragePlanId=this.getResponseProperty("StripeStoragePlanId"),this.stripePremiumAccessPlanId=this.getResponseProperty("StripePremiumAccessPlanId"),this.basePrice=this.getResponseProperty("BasePrice"),this.seatPrice=this.getResponseProperty("SeatPrice"),this.additionalStoragePricePerGb=this.getResponseProperty("AdditionalStoragePricePerGb"),this.premiumAccessOptionPrice=this.getResponseProperty("PremiumAccessOptionPrice")}}class dy extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.identifier=this.getResponseProperty("Identifier"),this.name=this.getResponseProperty("Name"),this.businessName=this.getResponseProperty("BusinessName"),this.businessAddress1=this.getResponseProperty("BusinessAddress1"),this.businessAddress2=this.getResponseProperty("BusinessAddress2"),this.businessAddress3=this.getResponseProperty("BusinessAddress3"),this.businessCountry=this.getResponseProperty("BusinessCountry"),this.businessTaxNumber=this.getResponseProperty("BusinessTaxNumber"),this.billingEmail=this.getResponseProperty("BillingEmail");const t=this.getResponseProperty("Plan");this.plan=null==t?null:new ly(t),this.planType=this.getResponseProperty("PlanType"),this.seats=this.getResponseProperty("Seats"),this.maxCollections=this.getResponseProperty("MaxCollections"),this.maxStorageGb=this.getResponseProperty("MaxStorageGb"),this.useGroups=this.getResponseProperty("UseGroups"),this.useDirectory=this.getResponseProperty("UseDirectory"),this.useEvents=this.getResponseProperty("UseEvents"),this.useTotp=this.getResponseProperty("UseTotp"),this.use2fa=this.getResponseProperty("Use2fa"),this.useApi=this.getResponseProperty("UseApi")}}class uy extends yl.a{constructor(e){super(e),this.storageName=this.getResponseProperty("StorageName"),this.storageGb=this.getResponseProperty("StorageGb"),this.maxStorageGb=this.getResponseProperty("MaxStorageGb"),this.license=this.getResponseProperty("License"),this.expiration=this.getResponseProperty("Expiration"),this.usingInAppPurchase=this.getResponseProperty("UsingInAppPurchase");const t=this.getResponseProperty("Subscription"),i=this.getResponseProperty("UpcomingInvoice");this.subscription=null==t?null:new hy(t),this.upcomingInvoice=null==i?null:new gy(i)}}class hy extends yl.a{constructor(e){super(e),this.items=[],this.trialEndDate=this.getResponseProperty("TrialStartDate"),this.trialEndDate=this.getResponseProperty("TrialEndDate"),this.periodStartDate=this.getResponseProperty("PeriodStartDate"),this.periodEndDate=this.getResponseProperty("PeriodEndDate"),this.cancelledDate=this.getResponseProperty("CancelledDate"),this.cancelAtEndDate=this.getResponseProperty("CancelAtEndDate"),this.status=this.getResponseProperty("Status"),this.cancelled=this.getResponseProperty("Cancelled");const t=this.getResponseProperty("Items");null!=t&&(this.items=t.map(e=>new py(e)))}}class py extends yl.a{constructor(e){super(e),this.name=this.getResponseProperty("Name"),this.amount=this.getResponseProperty("Amount"),this.quantity=this.getResponseProperty("Quantity"),this.interval=this.getResponseProperty("Interval")}}class gy extends yl.a{constructor(e){super(e),this.date=this.getResponseProperty("Date"),this.amount=this.getResponseProperty("Amount")}}class fy extends dy{constructor(e){super(e),this.storageName=this.getResponseProperty("StorageName"),this.storageGb=this.getResponseProperty("StorageGb");const t=this.getResponseProperty("Subscription");this.subscription=null==t?null:new hy(t);const i=this.getResponseProperty("UpcomingInvoice");this.upcomingInvoice=null==i?null:new gy(i),this.expiration=this.getResponseProperty("Expiration")}}class yy extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.userId=this.getResponseProperty("UserId"),this.type=this.getResponseProperty("Type"),this.status=this.getResponseProperty("Status"),this.permissions=new Nl(this.getResponseProperty("Permissions")),this.accessAll=this.getResponseProperty("AccessAll")}}class my extends yy{constructor(e){super(e),this.name=this.getResponseProperty("Name"),this.email=this.getResponseProperty("Email"),this.twoFactorEnabled=this.getResponseProperty("TwoFactorEnabled")}}class vy extends yy{constructor(e){super(e),this.collections=[];const t=this.getResponseProperty("Collections");null!=t&&(this.collections=t.map(e=>new xl(e)))}}class by extends yl.a{constructor(e){super(e);const t=this.getResponseProperty("UserProfile");null!=t&&(this.userProfile=new Fl(t)),this.paymentIntentClientSecret=this.getResponseProperty("PaymentIntentClientSecret"),this.success=this.getResponseProperty("Success")}}class wy extends yl.a{constructor(e){super(e),this.kdf=this.getResponseProperty("Kdf"),this.kdfIterations=this.getResponseProperty("KdfIterations")}}class Oy extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.type=this.getResponseProperty("Type"),this.name=this.getResponseProperty("Name");const t=this.getResponseProperty("Text");null!=t&&(this.text=new Bl.a(t));const i=this.getResponseProperty("File");null!=i&&(this.file=new Vl.a(i)),this.expirationDate=this.getResponseProperty("ExpirationDate"),this.creatorIdentifier=this.getResponseProperty("CreatorIdentifier")}}class Sy extends yl.a{constructor(e){super(e),this.id=null,this.url=null,this.id=this.getResponseProperty("Id"),this.url=this.getResponseProperty("Url")}}class Cy extends yl.a{constructor(e){super(e),this.url=null,this.fileUploadType=this.getResponseProperty("FileUploadType");const t=this.getResponseProperty("SendResponse");this.sendResponse=null==t?null:new Ll(t),this.url=this.getResponseProperty("Url")}}class Py extends yl.a{constructor(e){super(e),this.taxId=this.getResponseProperty("TaxIdNumber"),this.taxIdType=this.getResponseProperty("TaxIdType"),this.line1=this.getResponseProperty("Line1"),this.line2=this.getResponseProperty("Line2"),this.city=this.getResponseProperty("City"),this.state=this.getResponseProperty("State"),this.postalCode=this.getResponseProperty("PostalCode"),this.country=this.getResponseProperty("Country")}}class xy extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.country=this.getResponseProperty("Country"),this.state=this.getResponseProperty("State"),this.postalCode=this.getResponseProperty("PostalCode"),this.rate=this.getResponseProperty("Rate")}}class ky extends yl.a{constructor(e){super(e),this.enabled=this.getResponseProperty("Enabled"),this.key=this.getResponseProperty("Key")}}class Ty extends yl.a{constructor(e){super(e),this.enabled=this.getResponseProperty("Enabled"),this.host=this.getResponseProperty("Host"),this.secretKey=this.getResponseProperty("SecretKey"),this.integrationKey=this.getResponseProperty("IntegrationKey")}}class Iy extends yl.a{constructor(e){super(e),this.enabled=this.getResponseProperty("Enabled"),this.email=this.getResponseProperty("Email")}}class Dy extends yl.a{constructor(e){super(e),this.enabled=this.getResponseProperty("Enabled"),this.type=this.getResponseProperty("Type")}}class Ay extends yl.a{constructor(e){super(e),this.code=this.getResponseProperty("Code")}}class My extends yl.a{constructor(e){super(e),this.enabled=this.getResponseProperty("Enabled");const t=this.getResponseProperty("Keys");this.keys=null==t?null:t.map(e=>new zy(e))}}class zy extends yl.a{constructor(e){super(e),this.name=this.getResponseProperty("Name"),this.id=this.getResponseProperty("Id"),this.migrated=this.getResponseProperty("Migrated")}}class Ey extends yl.a{constructor(e){super(e),this.attestation=this.getResponseProperty("attestation"),this.authenticatorSelection=this.getResponseProperty("authenticatorSelection"),this.challenge=Q.a.fromUrlB64ToArray(this.getResponseProperty("challenge")),this.excludeCredentials=this.getResponseProperty("excludeCredentials").map(e=>(e.id=Q.a.fromUrlB64ToArray(e.id).buffer,e)),this.extensions=this.getResponseProperty("extensions"),this.pubKeyCredParams=this.getResponseProperty("pubKeyCredParams"),this.rp=this.getResponseProperty("rp"),this.timeout=this.getResponseProperty("timeout");const t=this.getResponseProperty("user");t.id=Q.a.fromUrlB64ToArray(t.id),this.user=t}}class Uy extends yl.a{constructor(e){super(e),this.enabled=this.getResponseProperty("Enabled"),this.key1=this.getResponseProperty("Key1"),this.key2=this.getResponseProperty("Key2"),this.key3=this.getResponseProperty("Key3"),this.key4=this.getResponseProperty("Key4"),this.key5=this.getResponseProperty("Key5"),this.nfc=this.getResponseProperty("Nfc")}}class Ny extends yl.a{constructor(e){super(e),this.userId=this.getResponseProperty("UserId"),this.publicKey=this.getResponseProperty("PublicKey")}}var Ry=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var Fy=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var Qy=i(426);class Vy{constructor(e){this.buffer=e}}class By{}var Ly=i(134),_y=function(e,t,i,n){var s,r=arguments.length,o=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(o=(r<3?s(o):r>3?s(t,i,o):s(t,i))||o);return r>3&&o&&Object.defineProperty(t,i,o),o},jy=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},Ky=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Hy="key",Wy="encOrgKeys",qy="encPrivateKey",Gy="encKey",Jy="keyHash";class Yy{constructor(e,t,i,n,s){this.storageService=e,this.secureStorageService=t,this.cryptoFunctionService=i,this.platformUtilService=n,this.logService=s}setKey(e){return Ky(this,void 0,void 0,(function*(){if(this.key=e,yield this.shouldStoreKey())return this.secureStorageService.save(Hy,e.keyB64)}))}setKeyHash(e){return this.keyHash=e,this.storageService.save(Jy,e)}setEncKey(e){return Ky(this,void 0,void 0,(function*(){null!=e&&(yield this.storageService.save(Gy,e),this.encKey=null)}))}setEncPrivateKey(e){return Ky(this,void 0,void 0,(function*(){null!=e&&(yield this.storageService.save(qy,e),this.privateKey=null)}))}setOrgKeys(e){const t={};return e.forEach(e=>{t[e.id]=e.key}),this.orgKeys=null,this.storageService.save(Wy,t)}getKey(){return Ky(this,void 0,void 0,(function*(){if(null!=this.key)return this.key;const e=yield this.secureStorageService.get(Hy);if(null!=e){if(!(yield this.shouldStoreKey()))return this.logService.warning("Throwing away stored key since settings have changed"),this.secureStorageService.remove(Hy),null;const t=new Ly.a(Q.a.fromB64ToArray(e).buffer);if(!(yield this.validateKey(t)))return this.logService.warning("Wrong key, throwing away stored key"),this.secureStorageService.remove(Hy),null;this.key=t}return null==e?null:this.key}))}getKeyHash(){return Ky(this,void 0,void 0,(function*(){if(null!=this.keyHash)return this.keyHash;const e=yield this.storageService.get(Jy);return null!=e&&(this.keyHash=e),null==e?null:this.keyHash}))}getEncKey(e=null){return Ky(this,void 0,void 0,(function*(){if(null!=this.encKey)return this.encKey;const t=yield this.storageService.get(Gy);if(null==t)return null;if(null==e&&(e=yield this.getKey()),null==e)return null;let i;const n=new me.a(t);if(n.encryptionType===Et.a.AesCbc256_B64)i=yield this.decryptToBytes(n,e);else{if(n.encryptionType!==Et.a.AesCbc256_HmacSha256_B64)throw new Error("Unsupported encKey type.");{const t=yield this.stretchKey(e);i=yield this.decryptToBytes(n,t)}}return null==i?null:(this.encKey=new Ly.a(i),this.encKey)}))}getPublicKey(){return Ky(this,void 0,void 0,(function*(){if(null!=this.publicKey)return this.publicKey;const e=yield this.getPrivateKey();return null==e?null:(this.publicKey=yield this.cryptoFunctionService.rsaExtractPublicKey(e),this.publicKey)}))}getPrivateKey(){return Ky(this,void 0,void 0,(function*(){if(null!=this.privateKey)return this.privateKey;const e=yield this.storageService.get(qy);return null==e?null:(this.privateKey=yield this.decryptToBytes(new me.a(e),null),this.privateKey)}))}getFingerprint(e,t){return Ky(this,void 0,void 0,(function*(){if(null==t&&(t=yield this.getPublicKey()),null===t)throw new Error("No public key available.");const i=yield this.cryptoFunctionService.hash(t,"sha256"),n=yield this.cryptoFunctionService.hkdfExpand(i,e,32,"sha256");return this.hashPhrase(n)}))}getOrgKeys(){return Ky(this,void 0,void 0,(function*(){if(null!=this.orgKeys&&this.orgKeys.size>0)return this.orgKeys;const e=yield this.storageService.get(Wy);if(null==e)return null;const t=new Map;let i=!1;for(const n in e){if(!e.hasOwnProperty(n))continue;const s=yield this.rsaDecrypt(e[n]);t.set(n,new Ly.a(s)),i=!0}return i&&(this.orgKeys=t),this.orgKeys}))}getOrgKey(e){return Ky(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.getOrgKeys();return null!=t&&t.has(e)?t.get(e):null}))}hasKey(){return Ky(this,void 0,void 0,(function*(){return null!=(yield this.getKey())}))}hasEncKey(){return Ky(this,void 0,void 0,(function*(){return null!=(yield this.storageService.get(Gy))}))}clearKey(){return this.key=this.legacyEtmKey=null,this.secureStorageService.remove(Hy)}clearKeyHash(){return this.keyHash=null,this.storageService.remove(Jy)}clearEncKey(e){return this.encKey=null,e?Promise.resolve():this.storageService.remove(Gy)}clearKeyPair(e){return this.privateKey=null,this.publicKey=null,e?Promise.resolve():this.storageService.remove(qy)}clearOrgKeys(e){return this.orgKeys=null,e?Promise.resolve():this.storageService.remove(Wy)}clearPinProtectedKey(){return this.storageService.remove(Pr.a.pinProtectedKey)}clearKeys(){return Promise.all([this.clearKey(),this.clearKeyHash(),this.clearOrgKeys(),this.clearEncKey(),this.clearKeyPair(),this.clearPinProtectedKey()])}toggleKey(){return Ky(this,void 0,void 0,(function*(){const e=yield this.getKey(),t=yield this.storageService.get(Pr.a.vaultTimeoutKey);if(!(yield this.storageService.get(Pr.a.biometricUnlockKey))&&this.platformUtilService.supportsSecureStorage()&&(null!=t||0===t))return yield this.clearKey(),void(this.key=e);yield this.setKey(e)}))}makeKey(e,t,i,n){return Ky(this,void 0,void 0,(function*(){let s=null;if(null!=i&&i!==ao.PBKDF2_SHA256)throw new Error("Unknown Kdf.");if(null==n)n=5e3;else if(n<5e3)throw new Error("PBKDF2 iteration minimum is 5000.");return s=yield this.cryptoFunctionService.pbkdf2(e,t,"sha256",n),new Ly.a(s)}))}makeKeyFromPin(e,t,i,n,s=null){return Ky(this,void 0,void 0,(function*(){if(null==s){const e=yield this.storageService.get(Pr.a.pinProtectedKey);if(null==e)throw new Error("No PIN protected key found.");s=new me.a(e)}const r=yield this.makePinKey(e,t,i,n),o=yield this.decryptToBytes(s,r);return new Ly.a(o)}))}makeShareKey(){return Ky(this,void 0,void 0,(function*(){const e=yield this.cryptoFunctionService.randomBytes(64),t=yield this.getPublicKey();return[yield this.rsaEncrypt(e,t),new Ly.a(e)]}))}makeKeyPair(e){return Ky(this,void 0,void 0,(function*(){const t=yield this.cryptoFunctionService.rsaGenerateKeyPair(2048);return[Q.a.fromBufferToB64(t[0]),yield this.encrypt(t[1],e)]}))}makePinKey(e,t,i,n){return Ky(this,void 0,void 0,(function*(){const s=yield this.makeKey(e,t,i,n);return yield this.stretchKey(s)}))}makeSendKey(e){return Ky(this,void 0,void 0,(function*(){const t=yield this.cryptoFunctionService.hkdf(e,"bitwarden-send","send",64,"sha256");return new Ly.a(t)}))}hashPassword(e,t){return Ky(this,void 0,void 0,(function*(){if(null==t&&(t=yield this.getKey()),null==e||null==t)throw new Error("Invalid parameters.");const i=yield this.cryptoFunctionService.pbkdf2(t.key,e,"sha256",1);return Q.a.fromBufferToB64(i)}))}makeEncKey(e){return Ky(this,void 0,void 0,(function*(){const t=yield this.getKeyForEncryption(e),i=yield this.cryptoFunctionService.randomBytes(64);return this.buildEncKey(t,i)}))}remakeEncKey(e,t){return Ky(this,void 0,void 0,(function*(){return null==t&&(t=yield this.getEncKey()),this.buildEncKey(e,t.key)}))}encrypt(e,t){return Ky(this,void 0,void 0,(function*(){if(null==e)return Promise.resolve(null);let i;i="string"==typeof e?Q.a.fromUtf8ToArray(e).buffer:e;const n=yield this.aesEncrypt(i,t),s=Q.a.fromBufferToB64(n.iv),r=Q.a.fromBufferToB64(n.data),o=null!=n.mac?Q.a.fromBufferToB64(n.mac):null;return new me.a(n.key.encType,r,s,o)}))}encryptToBytes(e,t){return Ky(this,void 0,void 0,(function*(){const i=yield this.aesEncrypt(e,t);let n=0;null!=i.mac&&(n=i.mac.byteLength);const s=new Uint8Array(1+i.iv.byteLength+n+i.data.byteLength);return s.set([i.key.encType]),s.set(new Uint8Array(i.iv),1),null!=i.mac&&s.set(new Uint8Array(i.mac),1+i.iv.byteLength),s.set(new Uint8Array(i.data),1+i.iv.byteLength+n),new Vy(s.buffer)}))}rsaEncrypt(e,t){return Ky(this,void 0,void 0,(function*(){if(null==t&&(t=yield this.getPublicKey()),null==t)throw new Error("Public key unavailable.");const i=yield this.cryptoFunctionService.rsaEncrypt(e,t,"sha1");return new me.a(Et.a.Rsa2048_OaepSha1_B64,Q.a.fromBufferToB64(i))}))}rsaDecrypt(e){return Ky(this,void 0,void 0,(function*(){const t=e.split(".");let i,n=null;if(1===t.length)n=Et.a.Rsa2048_OaepSha256_B64,i=[t[0]];else if(2===t.length)try{n=parseInt(t[0],null),i=t[1].split("|")}catch(e){}switch(n){case Et.a.Rsa2048_OaepSha256_B64:case Et.a.Rsa2048_OaepSha1_B64:case Et.a.Rsa2048_OaepSha256_HmacSha256_B64:case Et.a.Rsa2048_OaepSha1_HmacSha256_B64:break;default:throw new Error("encType unavailable.")}if(null==i||i.length<=0)throw new Error("encPieces unavailable.");const s=Q.a.fromB64ToArray(i[0]).buffer,r=yield this.getPrivateKey();if(null==r)throw new Error("No private key.");let o="sha1";switch(n){case Et.a.Rsa2048_OaepSha256_B64:case Et.a.Rsa2048_OaepSha256_HmacSha256_B64:o="sha256";break;case Et.a.Rsa2048_OaepSha1_B64:case Et.a.Rsa2048_OaepSha1_HmacSha256_B64:break;default:throw new Error("encType unavailable.")}return this.cryptoFunctionService.rsaDecrypt(s,r,o)}))}decryptToBytes(e,t){return Ky(this,void 0,void 0,(function*(){const i=Q.a.fromB64ToArray(e.iv).buffer,n=Q.a.fromB64ToArray(e.data).buffer,s=e.mac?Q.a.fromB64ToArray(e.mac).buffer:null,r=yield this.aesDecryptToBytes(e.encryptionType,n,i,s,t);return null==r?null:r}))}decryptToUtf8(e,t){return Ky(this,void 0,void 0,(function*(){return yield this.aesDecryptToUtf8(e.encryptionType,e.data,e.iv,e.mac,t)}))}decryptFromBytes(e,t){return Ky(this,void 0,void 0,(function*(){if(null==e)throw new Error("no encBuf.");const i=new Uint8Array(e),n=i[0];let s=null,r=null,o=null;switch(n){case Et.a.AesCbc128_HmacSha256_B64:case Et.a.AesCbc256_HmacSha256_B64:if(i.length<=49)return null;r=i.slice(1,17),o=i.slice(17,49),s=i.slice(49);break;case Et.a.AesCbc256_B64:if(i.length<=17)return null;r=i.slice(1,17),s=i.slice(17);break;default:return null}return yield this.aesDecryptToBytes(n,s.buffer,r.buffer,null!=o?o.buffer:null,t)}))}randomNumber(e,t){return Ky(this,void 0,void 0,(function*(){let i=0;const n=t-e+1,s=Math.ceil(Math.log2(n));if(s>53)throw new Error("We cannot generate numbers larger than 53 bits.");const r=Math.ceil(s/8),o=Math.pow(2,s)-1,c=new Uint8Array(yield this.cryptoFunctionService.randomBytes(r));let a=8*(r-1);for(let e=0;e<r;e++)i+=c[e]*Math.pow(2,a),a-=8;return i&=o,i>=n?this.randomNumber(e,t):e+i}))}validateKey(e){return Ky(this,void 0,void 0,(function*(){try{const t=yield this.storageService.get(qy);if(null==t)return!1;const i=yield this.getEncKey(e),n=yield this.decryptToBytes(new me.a(t),i);yield this.cryptoFunctionService.rsaExtractPublicKey(n)}catch(e){return!1}return!0}))}shouldStoreKey(){return Ky(this,void 0,void 0,(function*(){const e=yield this.storageService.get(Pr.a.vaultTimeoutKey),t=(yield this.storageService.get(Pr.a.biometricUnlockKey))&&this.platformUtilService.supportsSecureStorage();return null==e||t}))}aesEncrypt(e,t){return Ky(this,void 0,void 0,(function*(){const i=new By;if(i.key=yield this.getKeyForEncryption(t),i.iv=yield this.cryptoFunctionService.randomBytes(16),i.data=yield this.cryptoFunctionService.aesEncrypt(e,i.iv,i.key.encKey),null!=i.key.macKey){const e=new Uint8Array(i.iv.byteLength+i.data.byteLength);e.set(new Uint8Array(i.iv),0),e.set(new Uint8Array(i.data),i.iv.byteLength),i.mac=yield this.cryptoFunctionService.hmac(e.buffer,i.key.macKey,"sha256")}return i}))}aesDecryptToUtf8(e,t,i,n,s){return Ky(this,void 0,void 0,(function*(){const r=yield this.getKeyForEncryption(s),o=this.resolveLegacyKey(e,r);if(null!=o.macKey&&null==n)return this.logService.error("mac required."),null;if(o.encType!==e)return this.logService.error("encType unavailable."),null;const c=this.cryptoFunctionService.aesDecryptFastParameters(t,i,n,o);if(null!=c.macKey&&null!=c.mac){const e=yield this.cryptoFunctionService.hmacFast(c.macData,c.macKey,"sha256");if(!(yield this.cryptoFunctionService.compareFast(c.mac,e)))return this.logService.error("mac failed."),null}return this.cryptoFunctionService.aesDecryptFast(c)}))}aesDecryptToBytes(e,t,i,n,s){return Ky(this,void 0,void 0,(function*(){const r=yield this.getKeyForEncryption(s),o=this.resolveLegacyKey(e,r);if(null!=o.macKey&&null==n)return null;if(o.encType!==e)return null;if(null!=o.macKey&&null!=n){const e=new Uint8Array(i.byteLength+t.byteLength);e.set(new Uint8Array(i),0),e.set(new Uint8Array(t),i.byteLength);const s=yield this.cryptoFunctionService.hmac(e.buffer,o.macKey,"sha256");if(null===s)return null;if(!(yield this.cryptoFunctionService.compare(n,s)))return this.logService.error("mac failed."),null}return yield this.cryptoFunctionService.aesDecrypt(t,i,o.encKey)}))}getKeyForEncryption(e){return Ky(this,void 0,void 0,(function*(){if(null!=e)return e;const t=yield this.getEncKey();return null!=t?t:yield this.getKey()}))}resolveLegacyKey(e,t){return e===Et.a.AesCbc128_HmacSha256_B64&&t.encType===Et.a.AesCbc256_B64?(null==this.legacyEtmKey&&(this.legacyEtmKey=new Ly.a(t.key,Et.a.AesCbc128_HmacSha256_B64)),this.legacyEtmKey):t}stretchKey(e){return Ky(this,void 0,void 0,(function*(){const t=new Uint8Array(64),i=yield this.cryptoFunctionService.hkdfExpand(e.key,"enc",32,"sha256"),n=yield this.cryptoFunctionService.hkdfExpand(e.key,"mac",32,"sha256");return t.set(new Uint8Array(i)),t.set(new Uint8Array(n),32),new Ly.a(t.buffer)}))}hashPhrase(e,t=64){return Ky(this,void 0,void 0,(function*(){const i=Math.log(Sf.length)/Math.log(2);let n=Math.ceil(t/i);const s=Array.from(new Uint8Array(e));if(n*i>4*s.length)throw new Error("Output entropy of hash function is too small");const r=[];let o=Qy.fromArray(s,256);for(;n--;){const e=o.mod(Sf.length);o=o.divide(Sf.length),r.push(Sf[e])}return r}))}buildEncKey(e,t){return Ky(this,void 0,void 0,(function*(){let i=null;if(32===e.key.byteLength){const n=yield this.stretchKey(e);i=yield this.encrypt(t,n)}else{if(64!==e.key.byteLength)throw new Error("Invalid key size.");i=yield this.encrypt(t,e)}return[new Ly.a(t),i]}))}}_y([Object(mh.a)(()=>"getEncKey"),jy("design:type",Function),jy("design:paramtypes",[Ly.a]),jy("design:returntype",Promise)],Yy.prototype,"getEncKey",null),_y([Object(mh.a)(()=>"getOrgKeys"),jy("design:type",Function),jy("design:paramtypes",[]),jy("design:returntype",Promise)],Yy.prototype,"getOrgKeys",null);var $y=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Xy="encOrgKeys";var Zy,em=i(74),tm=i(886);!function(e){e[e.SyncCipherUpdate=0]="SyncCipherUpdate",e[e.SyncCipherCreate=1]="SyncCipherCreate",e[e.SyncLoginDelete=2]="SyncLoginDelete",e[e.SyncFolderDelete=3]="SyncFolderDelete",e[e.SyncCiphers=4]="SyncCiphers",e[e.SyncVault=5]="SyncVault",e[e.SyncOrgKeys=6]="SyncOrgKeys",e[e.SyncFolderCreate=7]="SyncFolderCreate",e[e.SyncFolderUpdate=8]="SyncFolderUpdate",e[e.SyncCipherDelete=9]="SyncCipherDelete",e[e.SyncSettings=10]="SyncSettings",e[e.LogOut=11]="LogOut",e[e.SyncSendCreate=12]="SyncSendCreate",e[e.SyncSendUpdate=13]="SyncSendUpdate",e[e.SyncSendDelete=14]="SyncSendDelete"}(Zy||(Zy={}));class im extends yl.a{constructor(e){super(e),this.contextId=this.getResponseProperty("ContextId"),this.type=this.getResponseProperty("Type");const t=this.getResponseProperty("Payload");switch(this.type){case Zy.SyncCipherCreate:case Zy.SyncCipherDelete:case Zy.SyncCipherUpdate:case Zy.SyncLoginDelete:this.payload=new nm(t);break;case Zy.SyncFolderCreate:case Zy.SyncFolderDelete:case Zy.SyncFolderUpdate:this.payload=new sm(t);break;case Zy.SyncVault:case Zy.SyncCiphers:case Zy.SyncOrgKeys:case Zy.SyncSettings:case Zy.LogOut:this.payload=new rm(t);break;case Zy.SyncSendCreate:case Zy.SyncSendUpdate:case Zy.SyncSendDelete:this.payload=new om(t)}}}class nm extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.userId=this.getResponseProperty("UserId"),this.organizationId=this.getResponseProperty("OrganizationId"),this.collectionIds=this.getResponseProperty("CollectionIds"),this.revisionDate=new Date(this.getResponseProperty("RevisionDate"))}}class sm extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.userId=this.getResponseProperty("UserId"),this.revisionDate=new Date(this.getResponseProperty("RevisionDate"))}}class rm extends yl.a{constructor(e){super(e),this.userId=this.getResponseProperty("UserId"),this.date=new Date(this.getResponseProperty("Date"))}}class om extends yl.a{constructor(e){super(e),this.id=this.getResponseProperty("Id"),this.userId=this.getResponseProperty("UserId"),this.revisionDate=new Date(this.getResponseProperty("RevisionDate"))}}var cm=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var am=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class lm{constructor(e){this.id=e.id,this.organizationId=e.organizationId,this.type=e.type,this.data=e.data,this.enabled=e.enabled}}var dm=i(249),um=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const hm="lastSync_";var pm=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class gm extends class{constructor(e,t,i,n,s,r,o,c,a,l,d,u){this.userService=e,this.apiService=t,this.settingsService=i,this.folderService=n,this.cipherService=s,this.cryptoService=r,this.collectionService=o,this.storageService=c,this.messagingService=a,this.policyService=l,this.sendService=d,this.logoutCallback=u,this.syncInProgress=!1}getLastSync(){return um(this,void 0,void 0,(function*(){const e=yield this.userService.getUserId();if(null==e)return null;const t=yield this.storageService.get(hm+e);return t?new Date(t):null}))}setLastSync(e){return um(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();null!=t&&(yield this.storageService.save(hm+t,e.toJSON()))}))}fullSync(e,t=!1){return um(this,void 0,void 0,(function*(){this.syncStarted();if(!(yield this.userService.isAuthenticated()))return this.syncCompleted(!1);const i=new Date;let n=!1;try{n=yield this.needsSyncing(e)}catch(e){if(t)throw e}if(!n)return yield this.setLastSync(i),this.syncCompleted(!1);const s=yield this.userService.getUserId();try{const e=yield this.apiService.getSync();return yield this.syncProfile(e.profile),yield this.syncFolders(s,e.folders),yield this.syncCollections(e.collections),yield this.syncCiphers(s,e.ciphers),yield this.syncSends(s,e.sends),yield this.syncSettings(s,e.domains),yield this.syncPolicies(e.policies),yield this.setLastSync(i),this.syncCompleted(!0)}catch(e){if(t)throw e;return this.syncCompleted(!1)}}))}syncUpsertFolder(e,t){return um(this,void 0,void 0,(function*(){if(this.syncStarted(),yield this.userService.isAuthenticated())try{const i=yield this.folderService.get(e.id);if(!t&&null==i||t&&null!=i&&i.revisionDate<e.revisionDate){const t=yield this.apiService.getFolder(e.id);if(null!=t){const i=yield this.userService.getUserId();return yield this.folderService.upsert(new ff(t,i)),this.messagingService.send("syncedUpsertedFolder",{folderId:e.id}),this.syncCompleted(!0)}}}catch(e){}return this.syncCompleted(!1)}))}syncDeleteFolder(e){return um(this,void 0,void 0,(function*(){return this.syncStarted(),(yield this.userService.isAuthenticated())?(yield this.folderService.delete(e.id),this.messagingService.send("syncedDeletedFolder",{folderId:e.id}),this.syncCompleted(!0),!0):this.syncCompleted(!1)}))}syncUpsertCipher(e,t){return um(this,void 0,void 0,(function*(){if(this.syncStarted(),yield this.userService.isAuthenticated())try{let i=!0;const n=yield this.cipherService.get(e.id);null!=n&&n.revisionDate>=e.revisionDate&&(i=!1);let s=!1;if(i&&(t?(i=null!=n,s=!0):null==e.collectionIds||null==e.organizationId?i=null==n:(i=!1,s=!0)),!i&&s&&null!=e.organizationId&&null!=e.collectionIds&&e.collectionIds.length>0){const t=yield this.collectionService.getAll();if(null!=t)for(let n=0;n<t.length;n++)if(e.collectionIds.indexOf(t[n].id)>-1){i=!0;break}}if(i){const t=yield this.apiService.getCipher(e.id);if(null!=t){const i=yield this.userService.getUserId();return yield this.cipherService.upsert(new of.a(t,i)),this.messagingService.send("syncedUpsertedCipher",{cipherId:e.id}),this.syncCompleted(!0)}}}catch(i){if(null!=i&&404===i.statusCode&&t)return yield this.cipherService.delete(e.id),this.messagingService.send("syncedDeletedCipher",{cipherId:e.id}),this.syncCompleted(!0)}return this.syncCompleted(!1)}))}syncDeleteCipher(e){return um(this,void 0,void 0,(function*(){return this.syncStarted(),(yield this.userService.isAuthenticated())?(yield this.cipherService.delete(e.id),this.messagingService.send("syncedDeletedCipher",{cipherId:e.id}),this.syncCompleted(!0)):this.syncCompleted(!1)}))}syncUpsertSend(e,t){return um(this,void 0,void 0,(function*(){if(this.syncStarted(),yield this.userService.isAuthenticated())try{const i=yield this.sendService.get(e.id);if(!t&&null==i||t&&null!=i&&i.revisionDate<e.revisionDate){const t=yield this.apiService.getSend(e.id);if(null!=t){const i=yield this.userService.getUserId();return yield this.sendService.upsert(new dm.a(t,i)),this.messagingService.send("syncedUpsertedSend",{sendId:e.id}),this.syncCompleted(!0)}}}catch(e){}return this.syncCompleted(!1)}))}syncDeleteSend(e){return um(this,void 0,void 0,(function*(){return this.syncStarted(),(yield this.userService.isAuthenticated())?(yield this.sendService.delete(e.id),this.messagingService.send("syncedDeletedSend",{sendId:e.id}),this.syncCompleted(!0),!0):this.syncCompleted(!1)}))}syncStarted(){this.syncInProgress=!0,this.messagingService.send("syncStarted")}syncCompleted(e){return this.syncInProgress=!1,this.messagingService.send("syncCompleted",{successfully:e}),e}needsSyncing(e){return um(this,void 0,void 0,(function*(){if(e)return!0;const t=yield this.getLastSync();if(null==t||0===t.getTime())return!0;const i=yield this.apiService.getAccountRevisionDate();return!(new Date(i)<=t)}))}syncProfile(e){return um(this,void 0,void 0,(function*(){const t=yield this.userService.getSecurityStamp();if(null!=t&&t!==e.securityStamp)throw null!=this.logoutCallback&&(yield this.logoutCallback(!0)),new Error("Stamp has changed");yield this.cryptoService.setEncKey(e.key),yield this.cryptoService.setEncPrivateKey(e.privateKey),yield this.cryptoService.setOrgKeys(e.organizations),yield this.userService.setSecurityStamp(e.securityStamp),yield this.userService.setEmailVerified(e.emailVerified);const i={};return e.organizations.forEach(e=>{i[e.id]=new tu(e)}),yield this.userService.replaceOrganizations(i)}))}syncFolders(e,t){return um(this,void 0,void 0,(function*(){const i={};return t.forEach(t=>{i[t.id]=new ff(t,e)}),yield this.folderService.replace(i)}))}syncCollections(e){return um(this,void 0,void 0,(function*(){const t={};return e.forEach(e=>{t[e.id]=new $g(e)}),yield this.collectionService.replace(t)}))}syncCiphers(e,t){return um(this,void 0,void 0,(function*(){const i={};return t.forEach(t=>{i[t.id]=new of.a(t,e)}),yield this.cipherService.replace(i)}))}syncSends(e,t){return um(this,void 0,void 0,(function*(){const i={};return t.forEach(t=>{i[t.id]=new dm.a(t,e)}),yield this.sendService.replace(i)}))}syncSettings(e,t){return um(this,void 0,void 0,(function*(){let e=[];return null!=t&&null!=t.equivalentDomains&&(e=e.concat(t.equivalentDomains)),null!=t&&null!=t.globalEquivalentDomains&&t.globalEquivalentDomains.forEach(t=>{t.domains.length>0&&e.push(t.domains)}),this.settingsService.setEquivalentDomains(e)}))}syncPolicies(e){return um(this,void 0,void 0,(function*(){const t={};return null!=e&&e.forEach(e=>{t[e.id]=new lm(e)}),yield this.policyService.replace(t)}))}}{constructor(e,t,i,n,s,r,o,c,a,l,d,u,h,p){super(e,t,i,n,s,r,o,c,a,l,d,u),this.tokenService=h,this.clientService=p,this.syncInProgress=!1,this.localCollectionService=o,this.localApiService=t,this.localUserService=e,this.localMessagingService=a,this.localCryptoService=r,this.localStorageService=c}refreshIdentityToken(){return pm(this,void 0,void 0,(function*(){if(!(yield this.localUserService.isAuthenticated()))return;const e=this.tokenService.getUserId();yield this.localApiService.refreshIdentityToken();const t=this.tokenService.getUserId();if(e!==t){const e=this.tokenService.getEmail(),i=yield this.localUserService.getKdf(),n=yield this.localUserService.getKdfIterations();yield this.localUserService.setInformation(t,e,i,n)}}))}fullSync(e,t=!1){const i=Object.create(null,{fullSync:{get:()=>super.fullSync}});return pm(this,void 0,void 0,(function*(){return yield this.refreshIdentityToken(),yield i.fullSync.call(this,e,t)}))}syncUpsertCipher(e,t){const i=Object.create(null,{syncUpsertCipher:{get:()=>super.syncUpsertCipher}});return pm(this,void 0,void 0,(function*(){if(!(yield this.localUserService.isAuthenticated()))return!1;this.localSyncStarted();try{return yield new Promise(e=>setTimeout(e,3e3)),yield this.upsertOrganization(e.organizationId,t),i.syncUpsertCipher.call(this,e,t)}catch(e){return this.localSyncCompleted(!1)}}))}syncUpsertOrganization(e,t){return pm(this,void 0,void 0,(function*(){return this.localSyncStarted(),(yield this.localUserService.isAuthenticated())?(yield this.upsertOrganization(e,t),this.localSyncCompleted(!0)):this.localSyncCompleted(!1)}))}syncDeleteOrganization(e){return pm(this,void 0,void 0,(function*(){if(this.localSyncStarted(),yield this.localUserService.isAuthenticated()){const t=(yield this.localCollectionService.getAll()).filter(t=>t.organizationId===e);for(const e of t)yield this.localCollectionService.delete(e.id);return yield this.localUserService.deleteOrganization(e),this.localSyncCompleted(!0)}return this.localSyncCompleted(!1)}))}getOrganizationKey(e){return pm(this,void 0,void 0,(function*(){const t=this.clientService.GetClient(),i=yield t.stackClient.fetchJSON("GET","/data/com.bitwarden.organizations/"+e,[]),n=yield this.localUserService.getUserId(),s=Object.values(i.members).find(e=>e.user_id===n);return(null==s?void 0:s.key)||""}))}syncUpsertOrganizationKey(e){return pm(this,void 0,void 0,(function*(){const t=yield this.getOrganizationKey(e);yield this.localCryptoService.upsertOrganizationKey(e,t)}))}upsertOrganization(e,t){return pm(this,void 0,void 0,(function*(){if(!e)return;const i=yield this.localUserService.getOrganization(e),n=yield this.localCryptoService.getOrgKey(e);if(null!==i&&null!=n)return;const s=yield this.localApiService.getOrganization(e),r=s.response,o=new Rl(r);null!==s&&(yield this.localUserService.upsertOrganization(o),yield this.syncUpsertOrganizationKey(e),yield this.syncUpsertCollections(e,t))}))}syncUpsertCollections(e,t){return pm(this,void 0,void 0,(function*(){const t=yield this.localApiService.getCollections(e);yield this.localCollectionService.upsert(t.data.map(e=>({externalId:e.externalId,id:e.id,name:e.name,organizationId:e.organizationId,readOnly:e.readOnly})))}))}localSyncStarted(){this.syncInProgress=!0,this.localMessagingService.send("syncStarted")}localSyncCompleted(e){return this.syncInProgress=!1,this.localMessagingService.send("syncCompleted",{successfully:e}),e}}class fm{}class ym{}class mm{}class vm{}var bm=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var wm=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Om=new y,Sm=new class extends ae{constructor(e=null){super(Object(s.b)(),e),this.filter=e,this.timersMap=new Map}},Cm=new class extends class{constructor(e,t,i){this.systemLanguage=e,this.localesDirectory=t,this.getLocalesJson=i,this.supportedTranslationLocales=["en"],this.localeNames=new Map([["af","Afrikaans"],["be","Беларуская"],["bg","български"],["ca","català"],["cs","čeština"],["da","dansk"],["de","Deutsch"],["el","Ελληνικά"],["en","English"],["en-GB","English (British)"],["eo","Esperanto"],["es","español"],["et","eesti"],["fa","فارسی"],["fi","suomi"],["fr","français"],["he","עברית"],["hi","हिन्दी"],["hr","hrvatski"],["hu","magyar"],["id","Bahasa Indonesia"],["it","italiano"],["ja","日本語"],["ko","한국어"],["lv","Latvietis"],["ml","മലയാളം"],["nb","norsk (bokmål)"],["nl","Nederlands"],["pl","polski"],["pt-BR","português do Brasil"],["pt-PT","português"],["ro","română"],["ru","русский"],["sk","slovenčina"],["sr","Српски"],["sv","svenska"],["th","ไทย"],["tr","Türkçe"],["uk","українська"],["vi","Tiếng Việt"],["zh-CN","中文（中国大陆）"],["zh-TW","中文（台灣）"]]),this.defaultMessages={},this.localeMessages={},this.systemLanguage=e.replace("_","-")}init(e){return Lg(this,void 0,void 0,(function*(){if(this.inited)throw new Error("i18n already initialized.");if(null==this.supportedTranslationLocales||0===this.supportedTranslationLocales.length)throw new Error("supportedTranslationLocales not set.");this.inited=!0,this.locale=this.translationLocale=null!=e?e:this.systemLanguage;try{this.collator=new Intl.Collator(this.locale,{numeric:!0,sensitivity:"base"})}catch(e){this.collator=null}-1===this.supportedTranslationLocales.indexOf(this.translationLocale)&&(this.translationLocale=this.translationLocale.slice(0,2),-1===this.supportedTranslationLocales.indexOf(this.translationLocale)&&(this.translationLocale=this.supportedTranslationLocales[0])),null!=this.localesDirectory&&(yield this.loadMessages(this.translationLocale,this.localeMessages),this.translationLocale!==this.supportedTranslationLocales[0]&&(yield this.loadMessages(this.supportedTranslationLocales[0],this.defaultMessages)))}))}t(e,t,i,n){return this.translate(e,t,i,n)}translate(e,t,i,n){let s;return s=this.localeMessages.hasOwnProperty(e)&&this.localeMessages[e]?this.localeMessages[e]:this.defaultMessages.hasOwnProperty(e)&&this.defaultMessages[e]?this.defaultMessages[e]:"",""!==s&&(null!=t&&(s=s.split("__$1__").join(t)),null!=i&&(s=s.split("__$2__").join(i)),null!=n&&(s=s.split("__$3__").join(n))),s}loadMessages(e,t){return Lg(this,void 0,void 0,(function*(){const i=e.replace("-","_"),n=yield this.getLocalesJson(i);for(const e in n)if(n.hasOwnProperty(e)&&(t[e]=n[e].message,n[e].placeholders))for(const i in n[e].placeholders){if(!n[e].placeholders.hasOwnProperty(i)||!n[e].placeholders[i].content)continue;const s="\\$"+i.toUpperCase()+"\\$";let r=n[e].placeholders[i].content;"$1"!==r&&"$2"!==r&&"$3"!==r||(r="__$"+r+"__"),t[e]=t[e].replace(new RegExp(s,"g"),r)}}))}}{constructor(e,t){super(e,t,e=>_g(this,void 0,void 0,(function*(){const e=this.getCozyLanguage(),t=yield fetch(`locales/${e}/messages.json`,{mode:"no-cors"});return yield t.json()}))),this.supportedTranslationLocales=["en","be","bg","ca","cs","da","de","el","en-GB","es","et","fa","fi","fr","he","hr","hu","id","it","ja","ko","nb","nl","pl","pt-BR","pt-PT","ro","ru","sk","sv","th","tr","uk","vi","zh-CN","zh-TW"]}t(e,t,i,n){return this.translate(e,t,i,n)}getCozyLanguage(){var e,t;const i=document.querySelector("[role=application]");return null!==(t=JSON.parse(null===(e=null==i?void 0:i.dataset)||void 0===e?void 0:e.cozy).locale)&&void 0!==t?t:"en"}}(window.navigator.language,"./locales"),Pm=new class{constructor(){this.state={}}get(e){return this.state.hasOwnProperty(e)?Promise.resolve(this.state[e]):Promise.resolve(null)}save(e,t){return this.state[e]=t,Promise.resolve()}remove(e){return delete this.state[e],Promise.resolve()}purge(){return this.state={},Promise.resolve()}},xm=new Sr,km=new class{constructor(e){this.broadcasterService=e,this.syncCounter=0,this.lastUpdateRk=0,this.debouncedCountSync=function(e,t,i){let n;return(...s)=>{clearTimeout(n),n=window.setTimeout(()=>(n=null,e.apply(i,s)),t)}}(this.debouncedCountSync,1e3,this)}send(e,t={}){const i=Object.assign({},{command:e},t);"syncCompleted"===i.command?this.countSync():this.broadcasterService.send(i)}countSync(){this.syncCounter+=1,(this.syncCounter<3||this.syncCounter-this.lastUpdateRk>50)&&(this.lastUpdateRk=this.syncCounter,this.broadcasterService.send({command:"syncCompleted",successfully:!0})),this.debouncedCountSync()}debouncedCountSync(){this.syncCounter>2&&this.broadcasterService.send({command:"fullSync"}),this.syncCounter=0,this.lastUpdateRk=0}}(xm),Tm=new Ng,Im=new Bg(Cm,km,!0,Tm),Dm=new Ng,Am=new class{constructor(e,t){this.win=e,this.platformUtilsService=t,this.crypto=void 0!==e.crypto?e.crypto:null,this.subtle=this.crypto&&void 0!==e.crypto.subtle?e.crypto.subtle:null,this.isIE=t.isIE();const i=e.navigator.userAgent;this.isOldSafari=t.isSafari()&&(i.indexOf(" Version/10.")>-1||i.indexOf(" Version/9.")>-1)}pbkdf2(e,t,i,n){return Gf(this,void 0,void 0,(function*(){if(this.isIE||this.isOldSafari){const s="sha256"===i?32:64,r=this.toByteString(e),o=this.toByteString(t),c=Wf.pbkdf2(r,o,n,s,i);return Q.a.fromByteStringToArray(c).buffer}const s="sha256"===i?256:512,r=this.toBuf(e),o={name:"PBKDF2",salt:this.toBuf(t),iterations:n,hash:{name:this.toWebCryptoAlgorithm(i)}},c=yield this.subtle.importKey("raw",r,{name:"PBKDF2"},!1,["deriveBits"]);return yield this.subtle.deriveBits(o,c,s)}))}hkdf(e,t,i,n,s){return Gf(this,void 0,void 0,(function*(){const r={name:"HKDF",salt:this.toBuf(t),info:this.toBuf(i),hash:{name:this.toWebCryptoAlgorithm(s)}},o=yield this.subtle.importKey("raw",e,{name:"HKDF"},!1,["deriveBits"]);return yield this.subtle.deriveBits(r,o,8*n)}))}hkdfExpand(e,t,i,n){return Gf(this,void 0,void 0,(function*(){const s="sha256"===n?32:64;if(i>255*s)throw new Error("outputByteSize is too large.");if(new Uint8Array(e).length<s)throw new Error("prk is too small.");const r=this.toBuf(t),o=new Uint8Array(r);let c=0,a=new Uint8Array(0);const l=Math.ceil(i/s),d=new Uint8Array(l*s);for(let t=0;t<l;t++){const s=new Uint8Array(a.length+o.length+1);if(s.set(a),s.set(o,a.length),s.set([t+1],s.length-1),a=new Uint8Array(yield this.hmac(s.buffer,e,n)),d.set(a,c),c+=a.length,c>=i)break}return d.slice(0,i).buffer}))}hash(e,t){return Gf(this,void 0,void 0,(function*(){if(this.isIE&&"sha1"===t||"md5"===t){const i="md5"===t?Wf.md.md5.create():Wf.md.sha1.create(),n=this.toByteString(e);return i.update(n,"raw"),Q.a.fromByteStringToArray(i.digest().data).buffer}const i=this.toBuf(e);return yield this.subtle.digest({name:this.toWebCryptoAlgorithm(t)},i)}))}hmac(e,t,i){return Gf(this,void 0,void 0,(function*(){if(this.isIE&&"sha512"===i){const n=Wf.hmac.create(),s=this.toByteString(t),r=this.toByteString(e);return n.start(i,s),n.update(r,"raw"),Q.a.fromByteStringToArray(n.digest().data).buffer}const n={name:"HMAC",hash:{name:this.toWebCryptoAlgorithm(i)}},s=yield this.subtle.importKey("raw",t,n,!1,["sign"]);return yield this.subtle.sign(n,s,e)}))}compare(e,t){return Gf(this,void 0,void 0,(function*(){const i=yield this.randomBytes(32),n={name:"HMAC",hash:{name:"SHA-256"}},s=yield this.subtle.importKey("raw",i,n,!1,["sign"]),r=yield this.subtle.sign(n,s,e),o=yield this.subtle.sign(n,s,t);if(r.byteLength!==o.byteLength)return!1;const c=new Uint8Array(r),a=new Uint8Array(o);for(let e=0;e<a.length;e++)if(c[e]!==a[e])return!1;return!0}))}hmacFast(e,t,i){const n=Wf.hmac.create();n.start(i,t),n.update(e);const s=n.digest().getBytes();return Promise.resolve(s)}compareFast(e,t){return Gf(this,void 0,void 0,(function*(){const i=yield this.randomBytes(32),n=new Uint32Array(i),s=Wf.util.createBuffer();for(let e=0;e<n.length;e++)s.putInt32(n[e]);const r=s.getBytes(),o=Wf.hmac.create();o.start("sha256",r),o.update(e);const c=o.digest().getBytes();o.start(null,null),o.update(t);return c===o.digest().getBytes()}))}aesEncrypt(e,t,i){return Gf(this,void 0,void 0,(function*(){const n=yield this.subtle.importKey("raw",i,{name:"AES-CBC"},!1,["encrypt"]);return yield this.subtle.encrypt({name:"AES-CBC",iv:t},n,e)}))}aesDecryptFastParameters(e,t,i,n){const s=new qf;return null!=n.meta&&(s.encKey=n.meta.encKeyByteString,s.macKey=n.meta.macKeyByteString),null==s.encKey&&(s.encKey=Wf.util.decode64(n.encKeyB64)),s.data=Wf.util.decode64(e),s.iv=Wf.util.decode64(t),s.macData=s.iv+s.data,null==s.macKey&&null!=n.macKeyB64&&(s.macKey=Wf.util.decode64(n.macKeyB64)),null!=i&&(s.mac=Wf.util.decode64(i)),null==n.meta&&(n.meta={}),null==n.meta.encKeyByteString&&(n.meta.encKeyByteString=s.encKey),null!=s.macKey&&null==n.meta.macKeyByteString&&(n.meta.macKeyByteString=s.macKey),s}aesDecryptFast(e){const t=Wf.util.createBuffer(e.data),i=Wf.cipher.createDecipher("AES-CBC",e.encKey);i.start({iv:e.iv}),i.update(t),i.finish();const n=i.output.toString("utf8");return Promise.resolve(n)}aesDecrypt(e,t,i){return Gf(this,void 0,void 0,(function*(){const n=yield this.subtle.importKey("raw",i,{name:"AES-CBC"},!1,["decrypt"]);return yield this.subtle.decrypt({name:"AES-CBC",iv:t},n,e)}))}rsaEncrypt(e,t,i){return Gf(this,void 0,void 0,(function*(){const n={name:"RSA-OAEP",hash:{name:this.toWebCryptoAlgorithm(i)}},s=yield this.subtle.importKey("spki",t,n,!1,["encrypt"]);return yield this.subtle.encrypt(n,s,e)}))}rsaDecrypt(e,t,i){return Gf(this,void 0,void 0,(function*(){const n={name:"RSA-OAEP",hash:{name:this.toWebCryptoAlgorithm(i)}},s=yield this.subtle.importKey("pkcs8",t,n,!1,["decrypt"]);return yield this.subtle.decrypt(n,s,e)}))}rsaExtractPublicKey(e){return Gf(this,void 0,void 0,(function*(){const t={name:"RSA-OAEP",hash:{name:this.toWebCryptoAlgorithm("sha1")}},i=yield this.subtle.importKey("pkcs8",e,t,!0,["decrypt"]),n=yield this.subtle.exportKey("jwk",i),s={kty:"RSA",e:n.e,n:n.n,alg:"RSA-OAEP",ext:!0},r=yield this.subtle.importKey("jwk",s,t,!0,["encrypt"]);return yield this.subtle.exportKey("spki",r)}))}rsaGenerateKeyPair(e){return Gf(this,void 0,void 0,(function*(){const t={name:"RSA-OAEP",modulusLength:e,publicExponent:new Uint8Array([1,0,1]),hash:{name:this.toWebCryptoAlgorithm("sha1")}},i=yield this.subtle.generateKey(t,!0,["encrypt","decrypt"]);return[yield this.subtle.exportKey("spki",i.publicKey),yield this.subtle.exportKey("pkcs8",i.privateKey)]}))}randomBytes(e){const t=new Uint8Array(e);return this.crypto.getRandomValues(t),Promise.resolve(t.buffer)}toBuf(e){let t;return t="string"==typeof e?Q.a.fromUtf8ToArray(e).buffer:e,t}toByteString(e){let t;return t="string"==typeof e?Wf.util.encodeUtf8(e):Q.a.fromBufferToByteString(e),t}toWebCryptoAlgorithm(e){if("md5"===e)throw new Error("MD5 is not supported in WebCrypto.");return"sha1"===e?"SHA-1":"sha256"===e?"SHA-256":"SHA-512"}}(window,Im),Mm=new class extends Yy{constructor(e,t,i,n,s){super(e,t,i,n,s),this.localStorageService=e}upsertOrganizationKey(e,t){return $y(this,void 0,void 0,(function*(){if(""===t)return;const i=yield this.localStorageService.get(Xy);i[e]=t,yield this.clearOrgKeys(),yield this.localStorageService.save(Xy,i)}))}setOrgKeys(e){const t=e.filter(e=>""!==e.key);return super.setOrgKeys(t)}}(Tm,Dm,Am,Im,Sm),zm=new class{constructor(e){this.storageService=e}setTokens(e,t){return Promise.all([this.setToken(e),this.setRefreshToken(t)])}setToken(e){return Qf(this,void 0,void 0,(function*(){if(this.token=e,this.decodedToken=null,!(yield this.skipTokenStorage()))return this.storageService.save(Vf,e)}))}getToken(){return Qf(this,void 0,void 0,(function*(){return null!=this.token||(this.token=yield this.storageService.get(Vf)),this.token}))}setRefreshToken(e){return Qf(this,void 0,void 0,(function*(){if(this.refreshToken=e,!(yield this.skipTokenStorage()))return this.storageService.save(Bf,e)}))}getRefreshToken(){return Qf(this,void 0,void 0,(function*(){return null!=this.refreshToken||(this.refreshToken=yield this.storageService.get(Bf)),this.refreshToken}))}toggleTokens(){return Qf(this,void 0,void 0,(function*(){const e=yield this.getToken(),t=yield this.getRefreshToken(),i=yield this.storageService.get(Pr.a.vaultTimeoutKey),n=yield this.storageService.get(Pr.a.vaultTimeoutActionKey);if((null!=i||0===i)&&"logOut"===n)return yield this.clearToken(),this.token=e,void(this.refreshToken=t);yield this.setToken(e),yield this.setRefreshToken(t)}))}setTwoFactorToken(e,t){return this.storageService.save(Lf+t,e)}getTwoFactorToken(e){return this.storageService.get(Lf+e)}clearTwoFactorToken(e){return this.storageService.remove(Lf+e)}clearToken(){return this.token=null,this.decodedToken=null,this.refreshToken=null,Promise.all([this.storageService.remove(Vf),this.storageService.remove(Bf)])}decodeToken(){if(this.decodedToken)return this.decodedToken;if(null==this.token)throw new Error("Token not found.");const e=this.token.split(".");if(3!==e.length)throw new Error("JWT must have 3 parts");const t=Q.a.fromUrlB64ToUtf8(e[1]);if(null==t)throw new Error("Cannot decode the token");return this.decodedToken=JSON.parse(t),this.decodedToken}getTokenExpirationDate(){const e=this.decodeToken();if(void 0===e.exp)return null;const t=new Date(0);return t.setUTCSeconds(e.exp),t}tokenSecondsRemaining(e=0){const t=this.getTokenExpirationDate();if(null==t)return 0;const i=t.valueOf()-((new Date).valueOf()+1e3*e);return Math.round(i/1e3)}tokenNeedsRefresh(e=5){return this.tokenSecondsRemaining()<60*e}getUserId(){const e=this.decodeToken();if(void 0===e.sub)throw new Error("No user id found");return e.sub}getEmail(){const e=this.decodeToken();if(void 0===e.email)throw new Error("No email found");return e.email}getEmailVerified(){const e=this.decodeToken();if(void 0===e.email_verified)throw new Error("No email verification found");return e.email_verified}getName(){const e=this.decodeToken();return void 0===e.name?null:e.name}getPremium(){const e=this.decodeToken();return void 0!==e.premium&&e.premium}getIssuer(){const e=this.decodeToken();if(void 0===e.iss)throw new Error("No issuer found");return e.iss}skipTokenStorage(){return Qf(this,void 0,void 0,(function*(){const e=yield this.storageService.get(Pr.a.vaultTimeoutKey),t=yield this.storageService.get(Pr.a.vaultTimeoutActionKey);return null!=e&&"logOut"===t}))}}(Tm),Em=new class{constructor(e){this.storageService=e}getAppId(){return this.makeAndGetAppId("appId")}getAnonymousAppId(){return this.makeAndGetAppId("anonymousAppId")}makeAndGetAppId(e){return Kg(this,void 0,void 0,(function*(){const t=yield this.storageService.get(e);if(null!=t)return t;const i=Q.a.newGuid();return yield this.storageService.save(e,i),i}))}}(Tm),Um=new class extends class{constructor(e,t,i,n=null){this.tokenService=e,this.platformUtilsService=t,this.logoutCallback=i,this.customUserAgent=n,this.urlsSet=!1,this.isWebClient=!1,this.isDesktopClient=!1,this.usingBaseUrl=!1,this.device=t.getDevice(),this.deviceType=this.device.toString(),this.isWebClient=this.device===zt.a.IEBrowser||this.device===zt.a.ChromeBrowser||this.device===zt.a.EdgeBrowser||this.device===zt.a.FirefoxBrowser||this.device===zt.a.OperaBrowser||this.device===zt.a.SafariBrowser||this.device===zt.a.UnknownBrowser||this.device===zt.a.VivaldiBrowser,this.isDesktopClient=this.device===zt.a.WindowsDesktop||this.device===zt.a.MacOsDesktop||this.device===zt.a.LinuxDesktop}setUrls(e){if(this.urlsSet=!0,null!=e.base)return this.usingBaseUrl=!0,this.apiBaseUrl=e.base+"/api",this.identityBaseUrl=e.base+"/identity",void(this.eventsBaseUrl=e.base+"/events");this.apiBaseUrl=e.api,this.identityBaseUrl=e.identity,this.eventsBaseUrl=e.events,null==this.apiBaseUrl&&(this.apiBaseUrl="https://api.bitwarden.com"),null==this.identityBaseUrl&&(this.identityBaseUrl="https://identity.bitwarden.com"),null==this.eventsBaseUrl&&(this.eventsBaseUrl="https://events.bitwarden.com")}postIdentityToken(e){var t;return Ry(this,void 0,void 0,(function*(){const i=new Headers({"Content-Type":"application/x-www-form-urlencoded; charset=utf-8",Accept:"application/json","Device-Type":this.deviceType});null!=this.customUserAgent&&i.set("User-Agent",this.customUserAgent);const n=yield this.fetch(new Request(this.identityBaseUrl+"/connect/token",{body:this.qsStringify(e.toIdentityToken(null!==(t=e.clientId)&&void 0!==t?t:this.platformUtilsService.identityClientId)),credentials:this.getCredentials(),cache:"no-store",headers:i,method:"POST"}));let s=null;if(this.isJsonResponse(n)&&(s=yield n.json()),null!=s){if(200===n.status)return new zl(s);if(400===n.status&&s.TwoFactorProviders2&&Object.keys(s.TwoFactorProviders2).length)return yield this.tokenService.clearTwoFactorToken(e.email),new El(s)}return Promise.reject(new q.a(s,n.status,!0))}))}refreshIdentityToken(){return Ry(this,void 0,void 0,(function*(){try{yield this.doRefreshToken()}catch(e){return Promise.reject(null)}}))}getProfile(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/accounts/profile",null,!0,!0);return new Fl(e)}))}getUserBilling(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/accounts/billing",null,!0,!0);return new $f(e)}))}getUserSubscription(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/accounts/subscription",null,!0,!0);return new uy(e)}))}getTaxInfo(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/accounts/tax",null,!0,!0);return new Py(e)}))}putProfile(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/accounts/profile",e,!0,!0);return new Fl(t)}))}putTaxInfo(e){return this.send("PUT","/accounts/tax",e,!0,!1)}postPrelogin(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/accounts/prelogin",e,!1,!0);return new wy(t)}))}postEmailToken(e){return this.send("POST","/accounts/email-token",e,!0,!1)}postEmail(e){return this.send("POST","/accounts/email",e,!0,!1)}postPassword(e){return this.send("POST","/accounts/password",e,!0,!1)}setPassword(e){return this.send("POST","/accounts/set-password",e,!0,!1)}postSecurityStamp(e){return this.send("POST","/accounts/security-stamp",e,!0,!1)}deleteAccount(e){return this.send("DELETE","/accounts",e,!0,!1)}getAccountRevisionDate(){return Ry(this,void 0,void 0,(function*(){return yield this.send("GET","/accounts/revision-date",null,!0,!0)}))}postPasswordHint(e){return this.send("POST","/accounts/password-hint",e,!1,!1)}postRegister(e){return this.send("POST","/accounts/register",e,!1,!1)}postPremium(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/accounts/premium",e,!0,!0);return new by(t)}))}postIapCheck(e){return Ry(this,void 0,void 0,(function*(){return this.send("POST","/accounts/iap-check",e,!0,!1)}))}postReinstatePremium(){return this.send("POST","/accounts/reinstate-premium",null,!0,!1)}postCancelPremium(){return this.send("POST","/accounts/cancel-premium",null,!0,!1)}postAccountStorage(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/accounts/storage",e,!0,!0);return new by(t)}))}postAccountPayment(e){return this.send("POST","/accounts/payment",e,!0,!1)}postAccountLicense(e){return this.send("POST","/accounts/license",e,!0,!1)}postAccountKeys(e){return this.send("POST","/accounts/keys",e,!0,!1)}postAccountKey(e){return this.send("POST","/accounts/key",e,!0,!1)}postAccountVerifyEmail(){return this.send("POST","/accounts/verify-email",null,!0,!1)}postAccountVerifyEmailToken(e){return this.send("POST","/accounts/verify-email-token",e,!1,!1)}postAccountVerifyPassword(e){return this.send("POST","/accounts/verify-password",e,!0,!1)}postAccountRecoverDelete(e){return this.send("POST","/accounts/delete-recover",e,!1,!1)}postAccountRecoverDeleteToken(e){return this.send("POST","/accounts/delete-recover-token",e,!1,!1)}postAccountKdf(e){return this.send("POST","/accounts/kdf",e,!0,!1)}getEnterprisePortalSignInToken(){return Ry(this,void 0,void 0,(function*(){return yield this.send("GET","/accounts/enterprise-portal-signin-token",null,!0,!0)}))}deleteSsoUser(e){return Ry(this,void 0,void 0,(function*(){return this.send("DELETE","/accounts/sso/"+e,null,!0,!1)}))}getSsoUserIdentifier(){return Ry(this,void 0,void 0,(function*(){return this.send("GET","/accounts/sso/user-identifier",null,!0,!0)}))}postUserApiKey(e,t){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("POST","/accounts/api-key",t,!0,!0);return new Jf(e)}))}postUserRotateApiKey(e,t){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("POST","/accounts/rotate-api-key",t,!0,!0);return new Jf(e)}))}getFolder(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/folders/"+e,null,!0,!0);return new Ml(t)}))}postFolder(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/folders",e,!0,!0);return new Ml(t)}))}putFolder(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/folders/"+e,t,!0,!0);return new Ml(i)}))}deleteFolder(e){return this.send("DELETE","/folders/"+e,null,!0,!1)}getSend(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/sends/"+e,null,!0,!0);return new Ll(t)}))}postSendAccess(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=yield this.send("POST","/sends/access/"+e,t,!1,!0,i);return new Oy(n)}))}getSendFileDownloadData(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=yield this.send("POST","/sends/"+e.id+"/access/file/"+e.file.id,t,!1,!0,i);return new Sy(n)}))}getSends(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/sends",null,!0,!0);return new Ul(e,Ll)}))}postSend(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/sends",e,!0,!0);return new Ll(t)}))}postFileTypeSend(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/sends/file/v2",e,!0,!0);return new Cy(t)}))}renewSendFileUploadUrl(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("GET","/sends/"+e+"/file/"+t,null,!0,!0);return new Cy(i)}))}postSendFile(e,t,i){return this.send("POST","/sends/"+e+"/file/"+t,i,!0,!1)}postSendFileLegacy(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/sends/file",e,!0,!0);return new Ll(t)}))}putSend(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/sends/"+e,t,!0,!0);return new Ll(i)}))}putSendRemovePassword(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/sends/"+e+"/remove-password",null,!0,!0);return new Ll(t)}))}deleteSend(e){return this.send("DELETE","/sends/"+e,null,!0,!1)}getCipher(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/ciphers/"+e,null,!0,!0);return new Pl(t)}))}getCipherAdmin(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/ciphers/"+e+"/admin",null,!0,!0);return new Pl(t)}))}getCiphersOrganization(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/ciphers/organization-details?organizationId="+e,null,!0,!0);return new Ul(t,Pl)}))}postCipher(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/ciphers",e,!0,!0);return new Pl(t)}))}postCipherCreate(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/ciphers/create",e,!0,!0);return new Pl(t)}))}postCipherAdmin(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/ciphers/admin",e,!0,!0);return new Pl(t)}))}putCipher(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/ciphers/"+e,t,!0,!0);return new Pl(i)}))}putCipherAdmin(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/ciphers/"+e+"/admin",t,!0,!0);return new Pl(i)}))}deleteCipher(e){return this.send("DELETE","/ciphers/"+e,null,!0,!1)}deleteCipherAdmin(e){return this.send("DELETE","/ciphers/"+e+"/admin",null,!0,!1)}deleteManyCiphers(e){return this.send("DELETE","/ciphers",e,!0,!1)}deleteManyCiphersAdmin(e){return this.send("DELETE","/ciphers/admin",e,!0,!1)}putMoveCiphers(e){return this.send("PUT","/ciphers/move",e,!0,!1)}putShareCipher(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/ciphers/"+e+"/share",t,!0,!0);return new Pl(i)}))}putShareCiphers(e){return this.send("PUT","/ciphers/share",e,!0,!1)}putCipherCollections(e,t){return this.send("PUT","/ciphers/"+e+"/collections",t,!0,!1)}putCipherCollectionsAdmin(e,t){return this.send("PUT","/ciphers/"+e+"/collections-admin",t,!0,!1)}postPurgeCiphers(e,t=null){let i="/ciphers/purge";return null!=t&&(i+="?organizationId="+t),this.send("POST",i,e,!0,!1)}postImportCiphers(e){return this.send("POST","/ciphers/import",e,!0,!1)}postImportOrganizationCiphers(e,t){return this.send("POST","/ciphers/import-organization?organizationId="+e,t,!0,!1)}putDeleteCipher(e){return this.send("PUT","/ciphers/"+e+"/delete",null,!0,!1)}putDeleteCipherAdmin(e){return this.send("PUT","/ciphers/"+e+"/delete-admin",null,!0,!1)}putDeleteManyCiphers(e){return this.send("PUT","/ciphers/delete",e,!0,!1)}putDeleteManyCiphersAdmin(e){return this.send("PUT","/ciphers/delete-admin",e,!0,!1)}putRestoreCipher(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/ciphers/"+e+"/restore",null,!0,!0);return new Pl(t)}))}putRestoreCipherAdmin(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/ciphers/"+e+"/restore-admin",null,!0,!0);return new Pl(t)}))}putRestoreManyCiphers(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/ciphers/restore",e,!0,!0);return new Ul(t,Pl)}))}getAttachmentData(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=(null!=i?"/emergency-access/"+i+"/":"/ciphers/")+e+"/attachment/"+t,s=yield this.send("GET",n,null,!0,!0);return new ml(s)}))}postCipherAttachment(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/ciphers/"+e+"/attachment/v2",t,!0,!0);return new Yf(i)}))}postCipherAttachmentLegacy(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/ciphers/"+e+"/attachment",t,!0,!0);return new Pl(i)}))}postCipherAttachmentAdminLegacy(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/ciphers/"+e+"/attachment-admin",t,!0,!0);return new Pl(i)}))}deleteCipherAttachment(e,t){return this.send("DELETE","/ciphers/"+e+"/attachment/"+t,null,!0,!1)}deleteCipherAttachmentAdmin(e,t){return this.send("DELETE","/ciphers/"+e+"/attachment/"+t+"/admin",null,!0,!1)}postShareCipherAttachment(e,t,i,n){return this.send("POST","/ciphers/"+e+"/attachment/"+t+"/share?organizationId="+n,i,!0,!1)}renewAttachmentUploadUrl(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("GET","/ciphers/"+e+"/attachment/"+t+"/renew",null,!0,!0);return new Yf(i)}))}postAttachmentFile(e,t,i){return this.send("POST","/ciphers/"+e+"/attachment/"+t,i,!0,!1)}getCollectionDetails(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("GET","/organizations/"+e+"/collections/"+t+"/details",null,!0,!0);return new Il(i)}))}getUserCollections(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/collections",null,!0,!0);return new Ul(e,kl)}))}getCollections(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/collections",null,!0,!0);return new Ul(t,kl)}))}getCollectionUsers(e,t){return Ry(this,void 0,void 0,(function*(){return(yield this.send("GET","/organizations/"+e+"/collections/"+t+"/users",null,!0,!0)).map(e=>new xl(e))}))}postCollection(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/collections",t,!0,!0);return new kl(i)}))}putCollection(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=yield this.send("PUT","/organizations/"+e+"/collections/"+t,i,!0,!0);return new kl(n)}))}putCollectionUsers(e,t,i){return Ry(this,void 0,void 0,(function*(){yield this.send("PUT","/organizations/"+e+"/collections/"+t+"/users",i,!0,!1)}))}deleteCollection(e,t){return this.send("DELETE","/organizations/"+e+"/collections/"+t,null,!0,!1)}deleteCollectionUser(e,t,i){return this.send("DELETE","/organizations/"+e+"/collections/"+t+"/user/"+i,null,!0,!1)}getGroupDetails(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("GET","/organizations/"+e+"/groups/"+t+"/details",null,!0,!0);return new ay(i)}))}getGroups(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/groups",null,!0,!0);return new Ul(t,cy)}))}getGroupUsers(e,t){return Ry(this,void 0,void 0,(function*(){return yield this.send("GET","/organizations/"+e+"/groups/"+t+"/users",null,!0,!0)}))}postGroup(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/groups",t,!0,!0);return new cy(i)}))}putGroup(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=yield this.send("PUT","/organizations/"+e+"/groups/"+t,i,!0,!0);return new cy(n)}))}putGroupUsers(e,t,i){return Ry(this,void 0,void 0,(function*(){yield this.send("PUT","/organizations/"+e+"/groups/"+t+"/users",i,!0,!1)}))}deleteGroup(e,t){return this.send("DELETE","/organizations/"+e+"/groups/"+t,null,!0,!1)}deleteGroupUser(e,t,i){return this.send("DELETE","/organizations/"+e+"/groups/"+t+"/user/"+i,null,!0,!1)}getPolicy(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("GET","/organizations/"+e+"/policies/"+t,null,!0,!0);return new Ql(i)}))}getPolicies(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/policies",null,!0,!0);return new Ul(t,Ql)}))}getPoliciesByToken(e,t,i,n){return Ry(this,void 0,void 0,(function*(){const s=yield this.send("GET","/organizations/"+e+"/policies/token?token="+encodeURIComponent(t)+"&email="+encodeURIComponent(i)+"&organizationUserId="+n,null,!1,!0);return new Ul(s,Ql)}))}putPolicy(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=yield this.send("PUT","/organizations/"+e+"/policies/"+t,i,!0,!0);return new Ql(n)}))}getOrganizationUser(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("GET","/organizations/"+e+"/users/"+t,null,!0,!0);return new vy(i)}))}getOrganizationUserGroups(e,t){return Ry(this,void 0,void 0,(function*(){return yield this.send("GET","/organizations/"+e+"/users/"+t+"/groups",null,!0,!0)}))}getOrganizationUsers(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/users",null,!0,!0);return new Ul(t,my)}))}postOrganizationUserInvite(e,t){return this.send("POST","/organizations/"+e+"/users/invite",t,!0,!1)}postOrganizationUserReinvite(e,t){return this.send("POST","/organizations/"+e+"/users/"+t+"/reinvite",null,!0,!1)}postManyOrganizationUserReinvite(e,t){return this.send("POST","/organizations/"+e+"/users/reinvite",t,!0,!1)}postOrganizationUserAccept(e,t,i){return this.send("POST","/organizations/"+e+"/users/"+t+"/accept",i,!0,!1)}postOrganizationUserConfirm(e,t,i){return this.send("POST","/organizations/"+e+"/users/"+t+"/confirm",i,!0,!1)}putOrganizationUser(e,t,i){return this.send("PUT","/organizations/"+e+"/users/"+t,i,!0,!1)}putOrganizationUserGroups(e,t,i){return this.send("PUT","/organizations/"+e+"/users/"+t+"/groups",i,!0,!1)}putOrganizationUserResetPasswordEnrollment(e,t,i){return this.send("PUT","/organizations/"+e+"/users/"+t+"/reset-password-enrollment",i,!0,!1)}deleteOrganizationUser(e,t){return this.send("DELETE","/organizations/"+e+"/users/"+t,null,!0,!1)}deleteManyOrganizationUsers(e,t){return this.send("DELETE","/organizations/"+e+"/users",t,!0,!1)}getPlans(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/plans/",null,!0,!0);return new Ul(e,ly)}))}postImportDirectory(e,t){return Ry(this,void 0,void 0,(function*(){return this.send("POST","/organizations/"+e+"/import",t,!0,!1)}))}getTaxRates(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/plans/sales-tax-rates/",null,!0,!0);return new Ul(e,xy)}))}getSettingsDomains(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/settings/domains",null,!0,!0);return new Al(e)}))}putSettingsDomains(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/settings/domains",e,!0,!0);return new Al(t)}))}getSync(){return Ry(this,void 0,void 0,(function*(){const e=this.isDesktopClient||this.isWebClient?"/sync?excludeDomains=true":"/sync",t=yield this.send("GET",e,null,!0,!0);return new _l(t)}))}getTwoFactorProviders(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/two-factor",null,!0,!0);return new Ul(e,Dy)}))}getTwoFactorOrganizationProviders(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/two-factor",null,!0,!0);return new Ul(t,Dy)}))}getTwoFactorAuthenticator(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-authenticator",e,!0,!0);return new ky(t)}))}getTwoFactorEmail(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-email",e,!0,!0);return new Iy(t)}))}getTwoFactorDuo(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-duo",e,!0,!0);return new Ty(t)}))}getTwoFactorOrganizationDuo(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/two-factor/get-duo",t,!0,!0);return new Ty(i)}))}getTwoFactorYubiKey(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-yubikey",e,!0,!0);return new Uy(t)}))}getTwoFactorWebAuthn(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-webauthn",e,!0,!0);return new My(t)}))}getTwoFactorWebAuthnChallenge(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-webauthn-challenge",e,!0,!0);return new Ey(t)}))}getTwoFactorRecover(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/two-factor/get-recover",e,!0,!0);return new Ay(t)}))}putTwoFactorAuthenticator(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/two-factor/authenticator",e,!0,!0);return new ky(t)}))}putTwoFactorEmail(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/two-factor/email",e,!0,!0);return new Iy(t)}))}putTwoFactorDuo(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/two-factor/duo",e,!0,!0);return new Ty(t)}))}putTwoFactorOrganizationDuo(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/organizations/"+e+"/two-factor/duo",t,!0,!0);return new Ty(i)}))}putTwoFactorYubiKey(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/two-factor/yubikey",e,!0,!0);return new Uy(t)}))}putTwoFactorWebAuthn(e){return Ry(this,void 0,void 0,(function*(){const t=e.deviceResponse.response,i=Object.assign({},e);i.deviceResponse={id:e.deviceResponse.id,rawId:btoa(e.deviceResponse.id),type:e.deviceResponse.type,extensions:e.deviceResponse.getClientExtensionResults(),response:{AttestationObject:Q.a.fromBufferToB64(t.attestationObject),clientDataJson:Q.a.fromBufferToB64(t.clientDataJSON)}};const n=yield this.send("PUT","/two-factor/webauthn",i,!0,!0);return new My(n)}))}deleteTwoFactorWebAuthn(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("DELETE","/two-factor/webauthn",e,!0,!0);return new My(t)}))}putTwoFactorDisable(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("PUT","/two-factor/disable",e,!0,!0);return new Dy(t)}))}putTwoFactorOrganizationDisable(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/organizations/"+e+"/two-factor/disable",t,!0,!0);return new Dy(i)}))}postTwoFactorRecover(e){return this.send("POST","/two-factor/recover",e,!1,!1)}postTwoFactorEmailSetup(e){return this.send("POST","/two-factor/send-email",e,!0,!1)}postTwoFactorEmail(e){return this.send("POST","/two-factor/send-email-login",e,!1,!1)}getEmergencyAccessTrusted(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/emergency-access/trusted",null,!0,!0);return new Ul(e,iy)}))}getEmergencyAccessGranted(){return Ry(this,void 0,void 0,(function*(){const e=yield this.send("GET","/emergency-access/granted",null,!0,!0);return new Ul(e,ny)}))}getEmergencyAccess(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/emergency-access/"+e,null,!0,!0);return new iy(t)}))}getEmergencyGrantorPolicies(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/emergency-access/"+e+"/policies",null,!0,!0);return new Ul(t,Ql)}))}putEmergencyAccess(e,t){return this.send("PUT","/emergency-access/"+e,t,!0,!1)}deleteEmergencyAccess(e){return this.send("DELETE","/emergency-access/"+e,null,!0,!1)}postEmergencyAccessInvite(e){return this.send("POST","/emergency-access/invite",e,!0,!1)}postEmergencyAccessReinvite(e){return this.send("POST","/emergency-access/"+e+"/reinvite",null,!0,!1)}postEmergencyAccessAccept(e,t){return this.send("POST","/emergency-access/"+e+"/accept",t,!0,!1)}postEmergencyAccessConfirm(e,t){return this.send("POST","/emergency-access/"+e+"/confirm",t,!0,!1)}postEmergencyAccessInitiate(e){return this.send("POST","/emergency-access/"+e+"/initiate",null,!0,!1)}postEmergencyAccessApprove(e){return this.send("POST","/emergency-access/"+e+"/approve",null,!0,!1)}postEmergencyAccessReject(e){return this.send("POST","/emergency-access/"+e+"/reject",null,!0,!1)}postEmergencyAccessTakeover(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/emergency-access/"+e+"/takeover",null,!0,!0);return new sy(t)}))}postEmergencyAccessPassword(e,t){return Ry(this,void 0,void 0,(function*(){yield this.send("POST","/emergency-access/"+e+"/password",t,!0,!0)}))}postEmergencyAccessView(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/emergency-access/"+e+"/view",null,!0,!0);return new ry(t)}))}getOrganization(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e,null,!0,!0);return new dy(t)}))}getOrganizationBilling(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/billing",null,!0,!0);return new $f(t)}))}getOrganizationSubscription(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/subscription",null,!0,!0);return new fy(t)}))}getOrganizationLicense(e,t){return Ry(this,void 0,void 0,(function*(){return this.send("GET","/organizations/"+e+"/license?installationId="+t,null,!0,!0)}))}getOrganizationTaxInfo(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/organizations/"+e+"/tax",null,!0,!0);return new Py(t)}))}postOrganization(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/organizations",e,!0,!0);return new dy(t)}))}putOrganization(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("PUT","/organizations/"+e,t,!0,!0);return new dy(i)}))}putOrganizationTaxInfo(e,t){return Ry(this,void 0,void 0,(function*(){return this.send("PUT","/organizations/"+e+"/tax",t,!0,!1)}))}postLeaveOrganization(e){return this.send("POST","/organizations/"+e+"/leave",null,!0,!1)}postOrganizationLicense(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("POST","/organizations/license",e,!0,!0);return new dy(t)}))}postOrganizationLicenseUpdate(e,t){return Ry(this,void 0,void 0,(function*(){return this.send("POST","/organizations/"+e+"/license",t,!0,!1)}))}postOrganizationApiKey(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/api-key",t,!0,!0);return new Jf(i)}))}postOrganizationRotateApiKey(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/rotate-api-key",t,!0,!0);return new Jf(i)}))}postOrganizationUpgrade(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/upgrade",t,!0,!0);return new by(i)}))}postOrganizationSeat(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/seat",t,!0,!0);return new by(i)}))}postOrganizationStorage(e,t){return Ry(this,void 0,void 0,(function*(){const i=yield this.send("POST","/organizations/"+e+"/storage",t,!0,!0);return new by(i)}))}postOrganizationPayment(e,t){return this.send("POST","/organizations/"+e+"/payment",t,!0,!1)}postOrganizationVerifyBank(e,t){return this.send("POST","/organizations/"+e+"/verify-bank",t,!0,!1)}postOrganizationCancel(e){return this.send("POST","/organizations/"+e+"/cancel",null,!0,!1)}postOrganizationReinstate(e){return this.send("POST","/organizations/"+e+"/reinstate",null,!0,!1)}deleteOrganization(e,t){return this.send("DELETE","/organizations/"+e,t,!0,!1)}getEvents(e,t,i){return Ry(this,void 0,void 0,(function*(){const n=yield this.send("GET",this.addEventParameters("/events",e,t,i),null,!0,!0);return new Ul(n,oy)}))}getEventsCipher(e,t,i,n){return Ry(this,void 0,void 0,(function*(){const s=yield this.send("GET",this.addEventParameters("/ciphers/"+e+"/events",t,i,n),null,!0,!0);return new Ul(s,oy)}))}getEventsOrganization(e,t,i,n){return Ry(this,void 0,void 0,(function*(){const s=yield this.send("GET",this.addEventParameters("/organizations/"+e+"/events",t,i,n),null,!0,!0);return new Ul(s,oy)}))}getEventsOrganizationUser(e,t,i,n,s){return Ry(this,void 0,void 0,(function*(){const r=yield this.send("GET",this.addEventParameters("/organizations/"+e+"/users/"+t+"/events",i,n,s),null,!0,!0);return new Ul(r,oy)}))}postEventsCollect(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.getActiveBearerToken(),i=new Headers({"Device-Type":this.deviceType,Authorization:"Bearer "+t,"Content-Type":"application/json; charset=utf-8"});null!=this.customUserAgent&&i.set("User-Agent",this.customUserAgent);if(200!==(yield this.fetch(new Request(this.eventsBaseUrl+"/collect",{cache:"no-store",credentials:this.getCredentials(),method:"POST",body:JSON.stringify(e),headers:i}))).status)return Promise.reject("Event post failed.")}))}getUserPublicKey(e){return Ry(this,void 0,void 0,(function*(){const t=yield this.send("GET","/users/"+e+"/public-key",null,!0,!0);return new Ny(t)}))}getHibpBreach(e){return Ry(this,void 0,void 0,(function*(){return(yield this.send("GET","/hibp/breach?username="+e,null,!0,!0)).map(e=>new ty(e))}))}postBitPayInvoice(e){return Ry(this,void 0,void 0,(function*(){return yield this.send("POST","/bitpay-invoice",e,!0,!0)}))}postSetupPayment(){return Ry(this,void 0,void 0,(function*(){return yield this.send("POST","/setup-payment",null,!0,!0)}))}getActiveBearerToken(){return Ry(this,void 0,void 0,(function*(){let e=yield this.tokenService.getToken();if(this.tokenService.tokenNeedsRefresh()){e=(yield this.doRefreshToken()).accessToken}return e}))}fetch(e){return"GET"===e.method&&(e.headers.set("Cache-Control","no-store"),e.headers.set("Pragma","no-cache")),this.nativeFetch(e)}nativeFetch(e){return fetch(e)}preValidateSso(e){return Ry(this,void 0,void 0,(function*(){if(null==e||""===e)throw new Error("Organization Identifier was not provided.");const t=new Headers({Accept:"application/json","Device-Type":this.deviceType});null!=this.customUserAgent&&t.set("User-Agent",this.customUserAgent);const i="/account/prevalidate?domainHint="+encodeURIComponent(e),n=yield this.fetch(new Request(this.identityBaseUrl+i,{cache:"no-store",credentials:this.getCredentials(),headers:t,method:"GET"}));if(200===n.status)return!0;{const e=yield this.handleError(n,!1,!0);return Promise.reject(e)}}))}send(e,t,i,n,s,r){return Ry(this,void 0,void 0,(function*(){r=Q.a.isNullOrWhitespace(r)?this.apiBaseUrl:r;const o=new Headers({"Device-Type":this.deviceType});null!=this.customUserAgent&&o.set("User-Agent",this.customUserAgent);const c={cache:"no-store",credentials:this.getCredentials(),method:e};if(n){const e=yield this.getActiveBearerToken();o.set("Authorization","Bearer "+e)}null!=i&&("string"==typeof i?(c.body=i,o.set("Content-Type","application/x-www-form-urlencoded; charset=utf-8")):"object"==typeof i&&(i instanceof FormData?c.body=i:(o.set("Content-Type","application/json; charset=utf-8"),c.body=JSON.stringify(i)))),s&&o.set("Accept","application/json"),c.headers=o;const a=yield this.fetch(new Request(r+t,c));if(s&&200===a.status){return yield a.json()}if(200!==a.status){const e=yield this.handleError(a,!1,n);return Promise.reject(e)}}))}handleError(e,t,i){return Ry(this,void 0,void 0,(function*(){if(i&&(t&&400===e.status||401===e.status||403===e.status))return yield this.logoutCallback(!0),null;let n=null;return this.isJsonResponse(e)?n=yield e.json():this.isTextResponse(e)&&(n={Message:yield e.text()}),new q.a(n,e.status,t)}))}doRefreshToken(){return Ry(this,void 0,void 0,(function*(){const e=yield this.tokenService.getRefreshToken();if(null==e||""===e)throw new Error;const t=new Headers({"Content-Type":"application/x-www-form-urlencoded; charset=utf-8",Accept:"application/json","Device-Type":this.deviceType});null!=this.customUserAgent&&t.set("User-Agent",this.customUserAgent);const i=this.tokenService.decodeToken(),n=yield this.fetch(new Request(this.identityBaseUrl+"/connect/token",{body:this.qsStringify({grant_type:"refresh_token",client_id:i.client_id,refresh_token:e}),cache:"no-store",credentials:this.getCredentials(),headers:t,method:"POST"}));if(200===n.status){const e=yield n.json(),t=new zl(e);return yield this.tokenService.setTokens(t.accessToken,t.refreshToken),t}{const e=yield this.handleError(n,!0,!0);return Promise.reject(e)}}))}qsStringify(e){return Object.keys(e).map(t=>encodeURIComponent(t)+"="+encodeURIComponent(e[t])).join("&")}getCredentials(){if(!this.isWebClient||this.usingBaseUrl)return"include"}addEventParameters(e,t,i,n){return null!=t&&(e+="?start="+t),null!=i&&(e+=e.indexOf("?")>-1?"&":"?",e+="end="+i),null!=n&&(e+=e.indexOf("?")>-1?"&":"?",e+="continuationToken="+n),e}isJsonResponse(e){const t=e.headers.get("content-type");return null!=t&&t.indexOf("application/json")>-1}isTextResponse(e){const t=e.headers.get("content-type");return null!=t&&t.indexOf("text")>-1}}{constructor(e,t,i,n=null){super(e,t,i,n),this.localLogoutCallback=i,this.localCustomUserAgent=n,this.localIsWebClient=!1,this.localUsingBaseUrl=!1,this.localDevice=t.getDevice(),this.localDeviceType=this.localDevice.toString(),this.localIsWebClient=this.localDevice===zt.a.IEBrowser||this.localDevice===zt.a.ChromeBrowser||this.localDevice===zt.a.EdgeBrowser||this.localDevice===zt.a.FirefoxBrowser||this.localDevice===zt.a.OperaBrowser||this.localDevice===zt.a.SafariBrowser||this.localDevice===zt.a.UnknownBrowser||this.localDevice===zt.a.VivaldiBrowser}setUrls(e){super.setUrls(e),null!=e.base&&(this.localUsingBaseUrl=!0)}getCollections(e){return Fy(this,void 0,void 0,(function*(){const t=yield this.localSend("GET","/organizations/"+e+"/collections",null,!0,!0);return new Ul(t,Tl)}))}localSend(e,t,i,n,s,r){return Fy(this,void 0,void 0,(function*(){r=Q.a.isNullOrWhitespace(r)?this.apiBaseUrl:r;const o=new Headers({"Device-Type":this.localDeviceType});null!=this.localCustomUserAgent&&o.set("User-Agent",this.localCustomUserAgent);const c={cache:"no-store",credentials:this.localGetCredentials(),method:e};if(n){const e=yield this.getActiveBearerToken();o.set("Authorization","Bearer "+e)}null!=i&&("string"==typeof i?(c.body=i,o.set("Content-Type","application/x-www-form-urlencoded; charset=utf-8")):"object"==typeof i&&(i instanceof FormData?c.body=i:(o.set("Content-Type","application/json; charset=utf-8"),c.body=JSON.stringify(i)))),s&&o.set("Accept","application/json"),c.headers=o;const a=yield this.fetch(new Request(r+t,c));if(s&&200===a.status){return yield a.json()}if(200!==a.status){const e=yield this.localHandleError(a,!1,n);return Promise.reject(e)}}))}localGetCredentials(){if(!this.localIsWebClient||this.localUsingBaseUrl)return"include"}localHandleError(e,t,i){return Fy(this,void 0,void 0,(function*(){if(i&&(t&&400===e.status||401===e.status||403===e.status))return yield this.localLogoutCallback(!0),null;let n=null;return this.localIsJsonResponse(e)?n=yield e.json():this.localIsTextResponse(e)&&(n={Message:yield e.text()}),new q.a(n,e.status,t)}))}localIsJsonResponse(e){const t=e.headers.get("content-type");return null!=t&&t.indexOf("application/json")>-1}localIsTextResponse(e){const t=e.headers.get("content-type");return null!=t&&t.indexOf("text")>-1}}(zm,Im,e=>wm(void 0,void 0,void 0,(function*(){return km.send("logout",{expired:e})}))),Nm=new pu(zm,Tm,Mm,Um),Rm=new ld(Um,Om,Mm,Cm,Im,Nm),Fm=new class{constructor(e,t){this.userService=e,this.storageService=t}clearCache(){this.settingsCache=null}getEquivalentDomains(){return this.getSettingsKey(Rf)}setEquivalentDomains(e){return Uf(this,void 0,void 0,(function*(){yield this.setSettingsKey(Rf,e)}))}clear(e){return Uf(this,void 0,void 0,(function*(){yield this.storageService.remove(Nf+e),this.clearCache()}))}getSettings(){return Uf(this,void 0,void 0,(function*(){if(null==this.settingsCache){const e=yield this.userService.getUserId();this.settingsCache=this.storageService.get(Nf+e)}return this.settingsCache}))}getSettingsKey(e){return Uf(this,void 0,void 0,(function*(){const t=yield this.getSettings();return null!=t&&t[e]?t[e]:null}))}setSettingsKey(e,t){return Uf(this,void 0,void 0,(function*(){const i=yield this.userService.getUserId();let n=yield this.getSettings();n||(n={}),n[e]=t,yield this.storageService.save(Nf+i,n),this.settingsCache=n}))}}(Nm,Tm);let Qm=null;const Vm=new class{constructor(e,t){this.logService=e,this.apiService=t,this.azureFileUploadService=new uf(e),this.bitwardenFileUploadService=new pf.a(t)}uploadSendFile(e,t,i){return gf(this,void 0,void 0,(function*(){try{switch(e.fileUploadType){case af.Direct:yield this.bitwardenFileUploadService.upload(t.encryptedString,i,t=>this.apiService.postSendFile(e.sendResponse.id,e.sendResponse.file.id,t));break;case af.Azure:const n=()=>gf(this,void 0,void 0,(function*(){return(yield this.apiService.renewSendFileUploadUrl(e.sendResponse.id,e.sendResponse.file.id)).url}));yield this.azureFileUploadService.upload(e.url,i,n);break;default:throw new Error("Unknown file upload type")}}catch(t){throw yield this.apiService.deleteSend(e.sendResponse.id),t}}))}uploadCipherAttachment(e,t,i,n){return gf(this,void 0,void 0,(function*(){const s=e?t.cipherMiniResponse:t.cipherResponse;try{switch(t.fileUploadType){case af.Direct:yield this.bitwardenFileUploadService.upload(i,n,e=>this.apiService.postAttachmentFile(s.id,t.attachmentId,e));break;case af.Azure:const e=()=>gf(this,void 0,void 0,(function*(){return(yield this.apiService.renewAttachmentUploadUrl(s.id,t.attachmentId)).url}));yield this.azureFileUploadService.upload(t.url,n,e);break;default:throw new Error("Unknown file upload type.")}}catch(i){throw e?yield this.apiService.deleteCipherAttachmentAdmin(s.id,t.attachmentId):yield this.apiService.deleteCipherAttachment(s.id,t.attachmentId),i}}))}}(Sm,Um),Bm=new Sh(Mm,Nm,Fm,Um,Vm,Tm,Cm,()=>Qm),Lm=new class{constructor(e,t,i,n,s,r){this.cryptoService=e,this.userService=t,this.apiService=i,this.storageService=n,this.i18nService=s,this.cipherService=r}clearCache(){this.decryptedFolderCache=null}encrypt(e,t){return yf(this,void 0,void 0,(function*(){const i=new Fe;return i.id=e.id,i.name=yield this.cryptoService.encrypt(e.name,t),i}))}get(e){return yf(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(mf+t);return null!=i&&i.hasOwnProperty(e)?new Fe(i[e]):null}))}getAll(){return yf(this,void 0,void 0,(function*(){const e=yield this.userService.getUserId(),t=yield this.storageService.get(mf+e),i=[];for(const e in t)t.hasOwnProperty(e)&&i.push(new Fe(t[e]));return i}))}getAllDecrypted(){return yf(this,void 0,void 0,(function*(){if(null!=this.decryptedFolderCache)return this.decryptedFolderCache;if(!(yield this.cryptoService.hasKey()))throw new Error("No key.");const e=[],t=[];(yield this.getAll()).forEach(i=>{t.push(i.decrypt().then(t=>e.push(t)))}),yield Promise.all(t),e.sort(Q.a.getSortFunction(this.i18nService,"name"));const i=new te;return i.name=this.i18nService.t("noneFolder"),e.push(i),this.decryptedFolderCache=e,this.decryptedFolderCache}))}getAllNested(){return yf(this,void 0,void 0,(function*(){const e=yield this.getAllDecrypted(),t=[];return e.forEach(e=>{const i=new te;i.id=e.id,i.revisionDate=e.revisionDate;const n=null!=e.name?e.name.replace(/^\/+|\/+$/g,"").split("/"):[];mu.nestedTraverse(t,0,n,i,null,"/")}),t}))}getNested(e){return yf(this,void 0,void 0,(function*(){const t=yield this.getAllNested();return mu.getTreeNodeObject(t,e)}))}saveWithServer(e){return yf(this,void 0,void 0,(function*(){const t=new j(e);let i;null==e.id?(i=yield this.apiService.postFolder(t),e.id=i.id):i=yield this.apiService.putFolder(e.id,t);const n=yield this.userService.getUserId(),s=new ff(i,n);yield this.upsert(s)}))}upsert(e){return yf(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();let i=yield this.storageService.get(mf+t);if(null==i&&(i={}),e instanceof ff){const t=e;i[t.id]=t}else e.forEach(e=>{i[e.id]=e});yield this.storageService.save(mf+t,i),this.decryptedFolderCache=null}))}replace(e){return yf(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();yield this.storageService.save(mf+t,e),this.decryptedFolderCache=null}))}clear(e){return yf(this,void 0,void 0,(function*(){yield this.storageService.remove(mf+e),this.decryptedFolderCache=null}))}delete(e){return yf(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(mf+t);if(null==i)return;if("string"==typeof e){if(null==i[e])return;delete i[e]}else e.forEach(e=>{delete i[e]});yield this.storageService.save(mf+t,i),this.decryptedFolderCache=null;const n=yield this.storageService.get(vf+t);if(null!=n){const t=[];for(const i in n)n[i].folderId===e&&(n[i].folderId=null,t.push(n[i]));t.length>0&&this.cipherService.upsert(t)}}))}deleteWithServer(e){return yf(this,void 0,void 0,(function*(){yield this.apiService.deleteFolder(e),yield this.delete(e)}))}}(Mm,Nm,Um,Tm,Cm,Bm),_m=new class{constructor(e,t,i,n){this.cryptoService=e,this.userService=t,this.storageService=i,this.i18nService=n}clearCache(){this.decryptedCollectionCache=null}encrypt(e){return Xg(this,void 0,void 0,(function*(){if(null==e.organizationId)throw new Error("Collection has no organization id.");const t=yield this.cryptoService.getOrgKey(e.organizationId);if(null==t)throw new Error("No key for this collection's organization.");const i=new $;return i.id=e.id,i.organizationId=e.organizationId,i.readOnly=e.readOnly,i.name=yield this.cryptoService.encrypt(e.name,t),i}))}decryptMany(e){return Xg(this,void 0,void 0,(function*(){if(null==e)return[];const t=[],i=[];return e.forEach(e=>{i.push(e.decrypt().then(e=>t.push(e)))}),yield Promise.all(i),t.sort(Q.a.getSortFunction(this.i18nService,"name"))}))}get(e){return Xg(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(Zg+t);return null!=i&&i.hasOwnProperty(e)?new $(i[e]):null}))}getAll(){return Xg(this,void 0,void 0,(function*(){const e=yield this.userService.getUserId(),t=yield this.storageService.get(Zg+e),i=[];for(const e in t)t.hasOwnProperty(e)&&i.push(new $(t[e]));return i}))}getAllDecrypted(){return Xg(this,void 0,void 0,(function*(){if(null!=this.decryptedCollectionCache)return this.decryptedCollectionCache;if(!(yield this.cryptoService.hasKey()))throw new Error("No key.");const e=yield this.getAll();return this.decryptedCollectionCache=yield this.decryptMany(e),this.decryptedCollectionCache}))}getAllNested(e=null){return Xg(this,void 0,void 0,(function*(){null==e&&(e=yield this.getAllDecrypted());const t=[];return e.forEach(e=>{const i=new X;i.id=e.id,i.organizationId=e.organizationId;const n=null!=e.name?e.name.replace(/^\/+|\/+$/g,"").split("/"):[];mu.nestedTraverse(t,0,n,i,null,"/")}),t}))}getNested(e){return Xg(this,void 0,void 0,(function*(){const t=yield this.getAllNested();return mu.getTreeNodeObject(t,e)}))}upsert(e){return Xg(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();let i=yield this.storageService.get(Zg+t);if(null==i&&(i={}),e instanceof $g){const t=e;i[t.id]=t}else e.forEach(e=>{i[e.id]=e});yield this.storageService.save(Zg+t,i),this.decryptedCollectionCache=null}))}replace(e){return Xg(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();yield this.storageService.save(Zg+t,e),this.decryptedCollectionCache=null}))}clear(e){return Xg(this,void 0,void 0,(function*(){yield this.storageService.remove(Zg+e),this.decryptedCollectionCache=null}))}delete(e){return Xg(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(Zg+t);if(null!=i){if("string"==typeof e){delete i[e]}else e.forEach(e=>{delete i[e]});yield this.storageService.save(Zg+t,i),this.decryptedCollectionCache=null}}))}}(Mm,Nm,Tm,Cm);Qm=new class{constructor(e,t,i){this.cipherService=e,this.logService=t,this.i18nService=i,this.indexedEntityId=null,this.indexing=!1,this.index=null,this.searchableMinLength=2,-1!==["zh-CN","zh-TW"].indexOf(i.locale)&&(this.searchableMinLength=1)}clearIndex(){this.indexedEntityId=null,this.index=null}isSearchable(e){return!(null==e||null==this.index&&e.length<this.searchableMinLength||null!=this.index&&e.length<this.searchableMinLength&&0!==e.indexOf(">"))}indexCiphers(e,t){return zf(this,void 0,void 0,(function*(){if(this.indexing)return;this.logService.time("search indexing"),this.indexing=!0,this.indexedEntityId=e,this.index=null;const i=new Mf.Builder;i.ref("id"),i.field("shortid",{boost:100,extractor:e=>e.id.substr(0,8)}),i.field("name",{boost:10}),i.field("subtitle",{boost:5,extractor:e=>null!=e.subTitle&&e.type===B.a.Card?e.subTitle.replace(/\*/g,""):e.subTitle}),i.field("notes"),i.field("login.username",{extractor:e=>e.type===B.a.Login&&null!=e.login?e.login.username:null}),i.field("login.uris",{boost:2,extractor:e=>this.uriExtractor(e)}),i.field("fields",{extractor:e=>this.fieldExtractor(e,!1)}),i.field("fields_joined",{extractor:e=>this.fieldExtractor(e,!0)}),i.field("attachments",{extractor:e=>this.attachmentExtractor(e,!1)}),i.field("attachments_joined",{extractor:e=>this.attachmentExtractor(e,!0)}),i.field("organizationid",{extractor:e=>e.organizationId}),(t=t||(yield this.cipherService.getAllDecrypted())).forEach(e=>i.add(e)),this.index=i.build(),this.indexing=!1,this.logService.timeEnd("search indexing")}))}searchCiphers(e,t=null,i=null){return zf(this,void 0,void 0,(function*(){const n=[];if(null!=e&&(e=e.trim().toLowerCase()),""===e&&(e=null),null==i&&(i=yield this.cipherService.getAllDecrypted()),null!=t&&Array.isArray(t)&&t.length>0?i=i.filter(e=>t.every(t=>null==t||t(e))):null!=t&&(i=i.filter(t)),!this.isSearchable(e))return i;this.indexing&&(yield new Promise(e=>setTimeout(e,250)),this.indexing&&(yield new Promise(e=>setTimeout(e,500))));const s=this.getIndexForSearch();if(null==s)return this.searchCiphersBasic(i,e);const r=new Map;i.forEach(e=>r.set(e.id,e));let o=null;if(null!=e&&e.length>1&&0===e.indexOf(">"))try{o=s.search(e.substr(1).trim())}catch(e){}else{const t=Mf.Query.wildcard.LEADING|Mf.Query.wildcard.TRAILING;o=s.query(i=>{Mf.tokenizer(e).forEach(e=>{const n=e.toString();i.term(n,{fields:["name"],wildcard:t}),i.term(n,{fields:["subtitle"],wildcard:t}),i.term(n,{fields:["login.uris"],wildcard:t}),i.term(n,{})})})}return null!=o&&o.forEach(e=>{r.has(e.ref)&&n.push(r.get(e.ref))}),n}))}searchCiphersBasic(e,t,i=!1){return t=t.trim().toLowerCase(),e.filter(e=>i===e.isDeleted&&(null!=e.name&&e.name.toLowerCase().indexOf(t)>-1||(!!(t.length>=8&&e.id.startsWith(t))||(null!=e.subTitle&&e.subTitle.toLowerCase().indexOf(t)>-1||!!(e.login&&null!=e.login.uri&&e.login.uri.toLowerCase().indexOf(t)>-1)))))}searchSends(e,t){return t=t.trim().toLocaleLowerCase(),e.filter(e=>{var i,n,s;return null!=e.name&&e.name.toLowerCase().indexOf(t)>-1||(!!(t.length>=8&&(e.id.startsWith(t)||e.accessId.toLocaleLowerCase().startsWith(t)||null!=(null===(i=e.file)||void 0===i?void 0:i.id)&&e.file.id.startsWith(t)))||(null!=e.notes&&e.notes.toLowerCase().indexOf(t)>-1||(null!=(null===(n=e.text)||void 0===n?void 0:n.text)&&e.text.text.toLowerCase().indexOf(t)>-1||(null!=(null===(s=e.file)||void 0===s?void 0:s.fileName)&&e.file.fileName.toLowerCase().indexOf(t)>-1||void 0))))})}getIndexForSearch(){return this.index}fieldExtractor(e,t){if(!e.hasFields)return null;let i=[];return e.fields.forEach(e=>{null!=e.name&&i.push(e.name),e.type===oe.a.Text&&null!=e.value&&i.push(e.value)}),i=i.filter(e=>""!==e.trim()),0===i.length?null:t?i.join(" "):i}attachmentExtractor(e,t){if(!e.hasAttachments)return null;let i=[];return e.attachments.forEach(e=>{null!=e&&null!=e.fileName&&(t&&e.fileName.indexOf(".")>-1?i.push(e.fileName.substr(0,e.fileName.lastIndexOf("."))):i.push(e.fileName))}),i=i.filter(e=>""!==e.trim()),0===i.length?null:t?i.join(" "):i}uriExtractor(e){if(e.type!==B.a.Login||null==e.login||!e.login.hasUris)return null;const t=[];return e.login.uris.forEach(e=>{if(null==e.uri||""===e.uri)return;if(null!=e.hostname)return void t.push(e.hostname);let i=e.uri;if(e.match!==Ut.a.RegularExpression){const e=i.indexOf("://");e>-1&&(i=i.substr(e+3));const t=i.search(/\?|&|#/);t>-1&&(i=i.substring(0,t))}t.push(i)}),t.length>0?t:null}}(Bm,Sm,Cm);const jm=new Ef.a(Mm,Nm,Um,Vm,Tm,Cm,Am),Km=new class{constructor(e,t){this.userService=e,this.storageService=t}clearCache(){this.policyCache=null}getAll(e){return Df(this,void 0,void 0,(function*(){if(null==this.policyCache){const e=yield this.userService.getUserId(),t=yield this.storageService.get(Af+e),i=[];for(const e in t)t.hasOwnProperty(e)&&i.push(new If(t[e]));this.policyCache=i}return null!=e?this.policyCache.filter(t=>t.type===e):this.policyCache}))}replace(e){return Df(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();yield this.storageService.save(Af+t,e),this.policyCache=null}))}clear(e){return Df(this,void 0,void 0,(function*(){yield this.storageService.remove(Af+e),this.policyCache=null}))}getMasterPasswordPolicyOptions(e){return Df(this,void 0,void 0,(function*(){let t=null;return null==(e=null==e?yield this.getAll(Oc.MasterPassword):e.filter(e=>e.type===Oc.MasterPassword))||0===e.length||e.forEach(e=>{e.enabled&&null!=e.data&&(null==t&&(t=new Tf),null!=e.data.minComplexity&&e.data.minComplexity>t.minComplexity&&(t.minComplexity=e.data.minComplexity),null!=e.data.minLength&&e.data.minLength>t.minLength&&(t.minLength=e.data.minLength),e.data.requireUpper&&(t.requireUpper=!0),e.data.requireLower&&(t.requireLower=!0),e.data.requireNumbers&&(t.requireNumbers=!0),e.data.requireSpecial&&(t.requireSpecial=!0))}),t}))}evaluateMasterPassword(e,t,i){return null==i||!(i.minComplexity>0&&i.minComplexity>e)&&(!(i.minLength>0&&i.minLength>t.length)&&((!i.requireUpper||t.toLocaleLowerCase()!==t)&&((!i.requireLower||t.toLocaleUpperCase()!==t)&&(!(i.requireNumbers&&!/[0-9]/.test(t))&&!(i.requireSpecial&&!/[!@#$%\^&*]/g.test(t))))))}}(Nm,Tm),Hm=new class{constructor(e,t,i,n,s,r,o,c,a,l,d=null,u=null){this.cipherService=e,this.folderService=t,this.collectionService=i,this.cryptoService=n,this.platformUtilsService=s,this.storageService=r,this.messagingService=o,this.searchService=c,this.userService=a,this.tokenService=l,this.lockedCallback=d,this.loggedOutCallback=u,this.pinProtectedKey=null,this.biometricLocked=!0,this.inited=!1}init(e){this.inited||(this.inited=!0,e&&this.startCheck())}startCheck(){this.checkVaultTimeout(),setInterval(()=>this.checkVaultTimeout(),1e4)}isLocked(){return Hf(this,void 0,void 0,(function*(){const e=yield this.cryptoService.hasKey();return!!(e&&(yield this.isBiometricLockSet())&&this.biometricLocked)||!e}))}checkVaultTimeout(){return Hf(this,void 0,void 0,(function*(){if(yield this.platformUtilsService.isViewOpen())return;if(!(yield this.userService.isAuthenticated()))return;if(yield this.isLocked())return;let e=this.platformUtilsService.lockTimeout();if(null==e&&(e=yield this.storageService.get(Pr.a.vaultTimeoutKey)),null==e||e<0)return;const t=yield this.storageService.get(Pr.a.lastActiveKey);if(null==t)return;const i=60*e;if(((new Date).getTime()-t)/1e3>=i){"logOut"===(yield this.storageService.get(Pr.a.vaultTimeoutActionKey))?yield this.logOut():yield this.lock(!0)}}))}lock(e=!1){return Hf(this,void 0,void 0,(function*(){if(yield this.userService.isAuthenticated()){if(this.biometricLocked=!0,e){if((yield this.isBiometricLockSet())&&this.platformUtilsService.supportsSecureStorage())return this.messagingService.send("locked"),void(null!=this.lockedCallback&&(yield this.lockedCallback()))}yield Promise.all([this.cryptoService.clearKey(),this.cryptoService.clearOrgKeys(!0),this.cryptoService.clearKeyPair(!0),this.cryptoService.clearEncKey(!0)]),this.folderService.clearCache(),this.cipherService.clearCache(),this.collectionService.clearCache(),this.searchService.clearIndex(),this.messagingService.send("locked"),null!=this.lockedCallback&&(yield this.lockedCallback())}}))}logOut(){return Hf(this,void 0,void 0,(function*(){null!=this.loggedOutCallback&&(yield this.loggedOutCallback())}))}setVaultTimeoutOptions(e,t){return Hf(this,void 0,void 0,(function*(){yield this.storageService.save(Pr.a.vaultTimeoutKey,e),yield this.storageService.save(Pr.a.vaultTimeoutActionKey,t),yield this.cryptoService.toggleKey(),yield this.tokenService.toggleTokens()}))}isPinLockSet(){return Hf(this,void 0,void 0,(function*(){return[null!=(yield this.storageService.get(Pr.a.protectedPin)),null!=(yield this.storageService.get(Pr.a.pinProtectedKey))]}))}isBiometricLockSet(){return Hf(this,void 0,void 0,(function*(){return yield this.storageService.get(Pr.a.biometricUnlockKey)}))}clear(){return this.pinProtectedKey=null,this.storageService.remove(Pr.a.protectedPin)}}(Bm,Lm,_m,Mm,Im,Tm,km,Qm,Nm,zm,null,()=>wm(void 0,void 0,void 0,(function*(){return km.send("logout",{expired:!1})}))),Wm=new gm(Nm,Um,Fm,Lm,Bm,Mm,_m,Tm,km,Km,jm,e=>wm(void 0,void 0,void 0,(function*(){return km.send("logout",{expired:e})})),zm,Om),qm=new class{constructor(e,t,i){this.cryptoService=e,this.storageService=t,this.policyService=i}generatePassword(e){return Cf(this,void 0,void 0,(function*(){const t=Object.assign({},Pf,e);if("passphrase"===t.type)return this.generatePassphrase(e);this.sanitizePasswordLength(t,!0);const i=t.minUppercase+t.minLowercase+t.minNumber+t.minSpecial;t.length<i&&(t.length=i);const n=[];if(t.lowercase&&t.minLowercase>0)for(let e=0;e<t.minLowercase;e++)n.push("l");if(t.uppercase&&t.minUppercase>0)for(let e=0;e<t.minUppercase;e++)n.push("u");if(t.number&&t.minNumber>0)for(let e=0;e<t.minNumber;e++)n.push("n");if(t.special&&t.minSpecial>0)for(let e=0;e<t.minSpecial;e++)n.push("s");for(;n.length<t.length;)n.push("a");yield this.shuffleArray(n);let s="",r="abcdefghijkmnopqrstuvwxyz";t.ambiguous&&(r+="l"),t.lowercase&&(s+=r);let o="ABCDEFGHJKLMNPQRSTUVWXYZ";t.ambiguous&&(o+="IO"),t.uppercase&&(s+=o);let c="23456789";t.ambiguous&&(c+="01"),t.number&&(s+=c);t.special&&(s+="!@#$%^&*");let a="";for(let e=0;e<t.length;e++){let t;switch(n[e]){case"l":t=r;break;case"u":t=o;break;case"n":t=c;break;case"s":t="!@#$%^&*";break;case"a":t=s}const i=yield this.cryptoService.randomNumber(0,t.length-1);a+=t.charAt(i)}return a}))}generatePassphrase(e){return Cf(this,void 0,void 0,(function*(){const t=Object.assign({},Pf,e);(null==t.numWords||t.numWords<=2)&&(t.numWords=Pf.numWords),(null==t.wordSeparator||0===t.wordSeparator.length||t.wordSeparator.length>1)&&(t.wordSeparator=" "),null==t.capitalize&&(t.capitalize=!1),null==t.includeNumber&&(t.includeNumber=!1);const i=Sf.length-1,n=new Array(t.numWords);for(let e=0;e<t.numWords;e++){const s=yield this.cryptoService.randomNumber(0,i);t.capitalize?n[e]=this.capitalize(Sf[s]):n[e]=Sf[s]}return t.includeNumber&&(yield this.appendRandomNumberToRandomWord(n)),n.join(t.wordSeparator)}))}getOptions(){return Cf(this,void 0,void 0,(function*(){if(null==this.optionsCache){const e=yield this.storageService.get(xf);this.optionsCache=null==e?Pf:Object.assign({},Pf,e)}const e=yield this.enforcePasswordGeneratorPoliciesOnOptions(this.optionsCache);return this.optionsCache=e[0],[this.optionsCache,e[1]]}))}enforcePasswordGeneratorPoliciesOnOptions(e){return Cf(this,void 0,void 0,(function*(){let t=yield this.getPasswordGeneratorPolicyOptions();return null!=t?(e.length<t.minLength&&(e.length=t.minLength),t.useUppercase&&(e.uppercase=!0),t.useLowercase&&(e.lowercase=!0),t.useNumbers&&(e.number=!0),e.minNumber<t.numberCount&&(e.minNumber=t.numberCount),t.useSpecial&&(e.special=!0),e.minSpecial<t.specialCount&&(e.minSpecial=t.specialCount),e.minSpecial+e.minNumber>e.length&&(e.minSpecial=e.length-e.minNumber),e.numWords<t.minNumberWords&&(e.numWords=t.minNumberWords),t.capitalize&&(e.capitalize=!0),t.includeNumber&&(e.includeNumber=!0),"password"!==t.defaultType&&"passphrase"!==t.defaultType||(e.type=t.defaultType)):t=new Of,[e,t]}))}getPasswordGeneratorPolicyOptions(){return Cf(this,void 0,void 0,(function*(){const e=null==this.policyService?null:yield this.policyService.getAll(Oc.PasswordGenerator);let t=null;return null==e||0===e.length||e.forEach(e=>{e.enabled&&null!=e.data&&(null==t&&(t=new Of),null!=e.data.defaultType&&"password"!==t.defaultType&&(t.defaultType=e.data.defaultType),null!=e.data.minLength&&e.data.minLength>t.minLength&&(t.minLength=e.data.minLength),e.data.useUpper&&(t.useUppercase=!0),e.data.useLower&&(t.useLowercase=!0),e.data.useNumbers&&(t.useNumbers=!0),null!=e.data.minNumbers&&e.data.minNumbers>t.numberCount&&(t.numberCount=e.data.minNumbers),e.data.useSpecial&&(t.useSpecial=!0),null!=e.data.minSpecial&&e.data.minSpecial>t.specialCount&&(t.specialCount=e.data.minSpecial),null!=e.data.minNumberWords&&e.data.minNumberWords>t.minNumberWords&&(t.minNumberWords=e.data.minNumberWords),e.data.capitalize&&(t.capitalize=!0),e.data.includeNumber&&(t.includeNumber=!0))}),t}))}saveOptions(e){return Cf(this,void 0,void 0,(function*(){yield this.storageService.save(xf,e),this.optionsCache=e}))}getHistory(){return Cf(this,void 0,void 0,(function*(){if(!(yield this.cryptoService.hasKey()))return new Array;if(!this.history){const e=yield this.storageService.get(kf);this.history=yield this.decryptHistory(e)}return this.history||new Array}))}addHistory(e){return Cf(this,void 0,void 0,(function*(){if(!(yield this.cryptoService.hasKey()))return;const t=yield this.getHistory();if(this.matchesPrevious(e,t))return;t.unshift(new wf(e,Date.now())),t.length>100&&t.pop();const i=yield this.encryptHistory(t);return yield this.storageService.save(kf,i)}))}clear(){return Cf(this,void 0,void 0,(function*(){return this.history=[],yield this.storageService.remove(kf)}))}passwordStrength(e,t=null){if(null==e||0===e.length)return null;let i=["bitwarden","bit","warden"];null!=t&&t.length>0&&(i=i.concat(t));const n=Array.from(new Set(i));return bf(e,n)}normalizeOptions(e,t){e.minLowercase=0,e.minUppercase=0,!e.length||e.length<5?e.length=5:e.length>128&&(e.length=128),e.length<t.minLength&&(e.length=t.minLength),e.minNumber?e.minNumber>e.length?e.minNumber=e.length:e.minNumber>9&&(e.minNumber=9):e.minNumber=0,e.minNumber<t.numberCount&&(e.minNumber=t.numberCount),e.minSpecial?e.minSpecial>e.length?e.minSpecial=e.length:e.minSpecial>9&&(e.minSpecial=9):e.minSpecial=0,e.minSpecial<t.specialCount&&(e.minSpecial=t.specialCount),e.minSpecial+e.minNumber>e.length&&(e.minSpecial=e.length-e.minNumber),null==e.numWords||e.length<3?e.numWords=3:e.numWords>20&&(e.numWords=20),e.numWords<t.minNumberWords&&(e.numWords=t.minNumberWords),null!=e.wordSeparator&&e.wordSeparator.length>1&&(e.wordSeparator=e.wordSeparator[0]),this.sanitizePasswordLength(e,!1)}capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}appendRandomNumberToRandomWord(e){return Cf(this,void 0,void 0,(function*(){if(null==e||e.length<=0)return;const t=yield this.cryptoService.randomNumber(0,e.length-1),i=yield this.cryptoService.randomNumber(0,9);e[t]=e[t]+i}))}encryptHistory(e){return Cf(this,void 0,void 0,(function*(){if(null==e||0===e.length)return Promise.resolve([]);const t=e.map(e=>Cf(this,void 0,void 0,(function*(){const t=yield this.cryptoService.encrypt(e.password);return new wf(t.encryptedString,e.date)})));return yield Promise.all(t)}))}decryptHistory(e){return Cf(this,void 0,void 0,(function*(){if(null==e||0===e.length)return Promise.resolve([]);const t=e.map(e=>Cf(this,void 0,void 0,(function*(){const t=yield this.cryptoService.decryptToUtf8(new me.a(e.password));return new wf(t,e.date)})));return yield Promise.all(t)}))}matchesPrevious(e,t){return null!=t&&0!==t.length&&t[t.length-1].password===e}shuffleArray(e){return Cf(this,void 0,void 0,(function*(){for(let t=e.length-1;t>0;t--){const i=yield this.cryptoService.randomNumber(0,t);[e[t],e[i]]=[e[i],e[t]]}}))}sanitizePasswordLength(e,t){let i=0,n=0,s=e.minNumber,r=e.minSpecial;e.uppercase&&e.minUppercase<=0?i=1:e.uppercase||(i=0),e.lowercase&&e.minLowercase<=0?n=1:e.lowercase||(n=0),e.number&&e.minNumber<=0?s=1:e.number||(s=0),e.special&&e.minSpecial<=0?r=1:e.special||(r=0),(!e.length||e.length<1)&&(e.length=10);const o=i+n+s+r;e.length<o&&(e.length=o),t&&(e.minUppercase=i,e.minLowercase=n,e.minNumber=s,e.minSpecial=r)}}(Mm,Tm,Km),Gm=new class{constructor(e,t){this.storageService=e,this.cryptoFunctionService=t}getCode(e){return _f(this,void 0,void 0,(function*(){if(null==e)return null;let t=30,i="sha1",n=6,s=e;const r=0===e.toLowerCase().indexOf("otpauth://"),o=!r&&0===e.toLowerCase().indexOf("steam://");if(r){const r=Q.a.getQueryParams(e);if(r.has("digits")&&null!=r.get("digits"))try{const e=parseInt(r.get("digits").trim(),null);e>10?n=10:e>0&&(n=e)}catch(e){}if(r.has("period")&&null!=r.get("period"))try{const e=parseInt(r.get("period").trim(),null);e>0&&(t=e)}catch(e){}if(r.has("secret")&&null!=r.get("secret")&&(s=r.get("secret")),r.has("algorithm")&&null!=r.get("algorithm")){const e=r.get("algorithm").toLowerCase();"sha1"!==e&&"sha256"!==e&&"sha512"!==e||(i=e)}}else o&&(s=e.substr("steam://".length),n=5);const c=Math.round((new Date).getTime()/1e3),a=this.leftPad(this.decToHex(Math.floor(c/t)),16,"0"),l=Q.a.fromHexToArray(a),d=this.b32ToBytes(s);if(!d.length||!l.length)return null;const u=yield this.sign(d,l,i);if(0===u.length)return null;const h=15&u[u.length-1],p=(127&u[h])<<24|(255&u[h+1])<<16|(255&u[h+2])<<8|255&u[h+3];let g="";if(o){let e=2147483647&p;for(let t=0;t<n;t++)g+=Kf[e%Kf.length],e=Math.trunc(e/Kf.length)}else g=(p%Math.pow(10,n)).toString(),g=this.leftPad(g,n,"0");return g}))}getTimeInterval(e){let t=30;if(null!=e&&0===e.toLowerCase().indexOf("otpauth://")){const i=Q.a.getQueryParams(e);if(i.has("period")&&null!=i.get("period"))try{t=parseInt(i.get("period").trim(),null)}catch(e){}}return t}isAutoCopyEnabled(){return _f(this,void 0,void 0,(function*(){return!(yield this.storageService.get(Pr.a.disableAutoTotpCopyKey))}))}leftPad(e,t,i){return t+1>=e.length&&(e=Array(t+1-e.length).join(i)+e),e}decToHex(e){return(e<15.5?"0":"")+Math.round(e).toString(16)}b32ToHex(e){e=e.toUpperCase();let t="";for(let i=0;i<e.length;i++)jf.indexOf(e[i])<0||(t+=e[i]);e=t;let i="",n="";for(let t=0;t<e.length;t++){const n=jf.indexOf(e.charAt(t));n<0||(i+=this.leftPad(n.toString(2),5,"0"))}for(let e=0;e+4<=i.length;e+=4){const t=i.substr(e,4);n+=parseInt(t,2).toString(16)}return n}b32ToBytes(e){return Q.a.fromHexToArray(this.b32ToHex(e))}sign(e,t,i){return _f(this,void 0,void 0,(function*(){const n=yield this.cryptoFunctionService.hmac(t.buffer,e.buffer,i);return new Uint8Array(n)}))}}(Tm,Am),Jm=new V(Mm),Ym=new class{constructor(e,t,i,n,s,r,o,c,a,l,d=!0){this.cryptoService=e,this.apiService=t,this.userService=i,this.tokenService=n,this.appIdService=s,this.i18nService=r,this.platformUtilsService=o,this.messagingService=c,this.vaultTimeoutService=a,this.logService=l,this.setCryptoKeys=d,this.selectedTwoFactorProviderType=null}init(){ec[Mt.Email].name=this.i18nService.t("emailTitle"),ec[Mt.Email].description=this.i18nService.t("emailDesc"),ec[Mt.Authenticator].name=this.i18nService.t("authenticatorAppTitle"),ec[Mt.Authenticator].description=this.i18nService.t("authenticatorAppDesc"),ec[Mt.Duo].description=this.i18nService.t("duoDesc"),ec[Mt.OrganizationDuo].name="Duo ("+this.i18nService.t("organization")+")",ec[Mt.OrganizationDuo].description=this.i18nService.t("duoOrganizationDesc"),ec[Mt.WebAuthn].name=this.i18nService.t("webAuthnTitle"),ec[Mt.WebAuthn].description=this.i18nService.t("webAuthnDesc"),ec[Mt.Yubikey].name=this.i18nService.t("yubiKeyTitle"),ec[Mt.Yubikey].description=this.i18nService.t("yubiKeyDesc")}logIn(e,t){return Zo(this,void 0,void 0,(function*(){this.selectedTwoFactorProviderType=null;const i=yield this.makePreloginKey(t,e),n=yield this.cryptoService.hashPassword(t,i);return yield this.logInHelper(e,n,null,null,null,null,null,i,null,null,null)}))}logInSso(e,t,i){return Zo(this,void 0,void 0,(function*(){return this.selectedTwoFactorProviderType=null,yield this.logInHelper(null,null,e,t,i,null,null,null,null,null,null)}))}logInApiKey(e,t){return Zo(this,void 0,void 0,(function*(){return this.selectedTwoFactorProviderType=null,yield this.logInHelper(null,null,null,null,null,e,t,null,null,null,null)}))}logInTwoFactor(e,t,i){return Zo(this,void 0,void 0,(function*(){return yield this.logInHelper(this.email,this.masterPasswordHash,this.code,this.codeVerifier,this.ssoRedirectUrl,this.clientId,this.clientSecret,this.key,e,t,i)}))}logInComplete(e,t,i,n,s){return Zo(this,void 0,void 0,(function*(){this.selectedTwoFactorProviderType=null;const r=yield this.makePreloginKey(t,e),o=yield this.cryptoService.hashPassword(t,r);return yield this.logInHelper(e,o,null,null,null,null,null,r,i,n,s)}))}logInSsoComplete(e,t,i,n,s,r){return Zo(this,void 0,void 0,(function*(){return this.selectedTwoFactorProviderType=null,yield this.logInHelper(null,null,e,t,i,null,null,null,n,s,r)}))}logInApiKeyComplete(e,t,i,n,s){return Zo(this,void 0,void 0,(function*(){return this.selectedTwoFactorProviderType=null,yield this.logInHelper(null,null,null,null,null,e,t,null,i,n,s)}))}logOut(e){e(),this.messagingService.send("loggedOut")}getSupportedTwoFactorProviders(e){const t=[];return null==this.twoFactorProvidersData||(this.twoFactorProvidersData.has(Mt.OrganizationDuo)&&this.platformUtilsService.supportsDuo()&&t.push(ec[Mt.OrganizationDuo]),this.twoFactorProvidersData.has(Mt.Authenticator)&&t.push(ec[Mt.Authenticator]),this.twoFactorProvidersData.has(Mt.Yubikey)&&t.push(ec[Mt.Yubikey]),this.twoFactorProvidersData.has(Mt.Duo)&&this.platformUtilsService.supportsDuo()&&t.push(ec[Mt.Duo]),this.twoFactorProvidersData.has(Mt.WebAuthn)&&this.platformUtilsService.supportsWebAuthn(e)&&t.push(ec[Mt.WebAuthn]),this.twoFactorProvidersData.has(Mt.Email)&&t.push(ec[Mt.Email])),t}getDefaultTwoFactorProvider(e){if(null==this.twoFactorProvidersData)return null;if(null!=this.selectedTwoFactorProviderType&&this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType))return this.selectedTwoFactorProviderType;let t=null,i=-1;return this.twoFactorProvidersData.forEach((n,s)=>{const r=ec[s];if(null!=r&&r.priority>i){if(s===Mt.WebAuthn&&!e)return;t=s,i=r.priority}}),t}makePreloginKey(e,t){return Zo(this,void 0,void 0,(function*(){t=t.trim().toLowerCase();let i=null,n=null;try{const e=yield this.apiService.postPrelogin(new $o(t));null!=e&&(i=e.kdf,n=e.kdfIterations)}catch(e){if(null==e||404!==e.statusCode)throw e}return this.cryptoService.makeKey(e,t,i,n)}))}authingWithApiKey(){return null!=this.clientId&&null!=this.clientSecret}authingWithSso(){return null!=this.code&&null!=this.codeVerifier&&null!=this.ssoRedirectUrl}authingWithPassword(){return null!=this.email&&null!=this.masterPasswordHash}logInHelper(e,t,i,n,s,r,o,c,a,l,d){return Zo(this,void 0,void 0,(function*(){const u=yield this.tokenService.getTwoFactorToken(e),h=yield this.appIdService.getAppId(),p=new Yo(h,this.platformUtilsService);let g,f=[],y=[],m=[];f=null!=e&&null!=t?[e,t]:null,y=null!=i&&null!=n&&null!=s?[i,n,s]:null,m=null!=r&&null!=o?[r,o]:null,g=null!=l&&null!=a?new Xo(f,y,m,a,l,d,p):null!=u?new Xo(f,y,m,Mt.Remember,u,!1,p):new Xo(f,y,m,null,null,!1,p);const v=yield this.apiService.postIdentityToken(g);this.clearState();const b=new Jo;if(b.twoFactor=!v.accessToken,b.twoFactor){const a=v;return this.email=e,this.masterPasswordHash=t,this.code=i,this.codeVerifier=n,this.ssoRedirectUrl=s,this.clientId=r,this.clientSecret=o,this.key=this.setCryptoKeys?c:null,this.twoFactorProvidersData=a.twoFactorProviders2,b.twoFactorProviders=a.twoFactorProviders2,b}const w=v;if(b.resetMasterPassword=w.resetMasterPassword,null!=w.twoFactorToken&&(yield this.tokenService.setTwoFactorToken(w.twoFactorToken,e)),yield this.tokenService.setTokens(w.accessToken,w.refreshToken),yield this.userService.setInformation(this.tokenService.getUserId(),this.tokenService.getEmail(),w.kdf,w.kdfIterations),this.setCryptoKeys&&(console.log("local key = ",c),console.log("tooken key = ",w.key),null!=c&&(yield this.cryptoService.setKey(c)),null!=t&&(yield this.cryptoService.setKeyHash(t)),null==i||null!=w.key)){if(yield this.cryptoService.setEncKey(w.key),null==w.privateKey)try{const e=yield this.cryptoService.makeKeyPair();yield this.apiService.postAccountKeys(new oo(e[0],e[1].encryptedString)),w.privateKey=e[1].encryptedString}catch(e){this.logService.error(e)}yield this.cryptoService.setEncPrivateKey(w.privateKey)}return null!=this.vaultTimeoutService&&(this.vaultTimeoutService.biometricLocked=!1),this.messagingService.send("loggedIn"),b}))}clearState(){this.key=null,this.email=null,this.masterPasswordHash=null,this.code=null,this.codeVerifier=null,this.ssoRedirectUrl=null,this.clientId=null,this.clientSecret=null,this.twoFactorProvidersData=null,this.selectedTwoFactorProviderType=null}}(Mm,Um,Nm,zm,Em,Cm,Im,km,Hm,Sm),$m=new class{constructor(e,t,i,n){this.folderService=e,this.cipherService=t,this.apiService=i,this.cryptoService=n}getExport(e="csv"){return lf(this,void 0,void 0,(function*(){return"encrypted_json"===e?this.getEncryptedExport():this.getDecryptedExport(e)}))}getOrganizationExport(e,t="csv"){return lf(this,void 0,void 0,(function*(){return"encrypted_json"===t?this.getOrganizationEncryptedExport(e):this.getOrganizationDecryptedExport(e,t)}))}getEventExport(e){return lf(this,void 0,void 0,(function*(){return G.unparse(e.map(e=>new cf(e)))}))}getFileName(e=null,t="csv"){const i=new Date;return"bitwarden"+(e?"_"+e:"")+"_export_"+(i.getFullYear()+""+this.padNumber(i.getMonth()+1,2)+this.padNumber(i.getDate(),2)+this.padNumber(i.getHours(),2)+this.padNumber(i.getMinutes(),2)+this.padNumber(i.getSeconds(),2))+"."+t}getDecryptedExport(e){return lf(this,void 0,void 0,(function*(){let t=[],i=[];const n=[];if(n.push(this.folderService.getAllDecrypted().then(e=>{t=e})),n.push(this.cipherService.getAllDecrypted().then(e=>{i=e.filter(e=>null==e.deletedDate)})),yield Promise.all(n),"csv"===e){const e=new Map;t.forEach(t=>{null!=t.id&&e.set(t.id,t)});const n=[];return i.forEach(t=>{if(t.type!==B.a.Login&&t.type!==B.a.SecureNote)return;if(null!=t.organizationId)return;const i={};i.folder=null!=t.folderId&&e.has(t.folderId)?e.get(t.folderId).name:null,i.favorite=t.favorite?1:null,this.buildCommonCipher(i,t),n.push(i)}),G.unparse(n)}{const e={encrypted:!1,folders:[],items:[]};return t.forEach(t=>{if(null==t.id)return;const i=new Ve;i.build(t),e.folders.push(i)}),i.forEach(t=>{if(null!=t.organizationId)return;const i=new Ue;i.build(t),i.collectionIds=null,e.items.push(i)}),JSON.stringify(e,null,"  ")}}))}getEncryptedExport(){return lf(this,void 0,void 0,(function*(){let e=[],t=[];const i=[];i.push(this.folderService.getAll().then(t=>{e=t})),i.push(this.cipherService.getAll().then(e=>{t=e.filter(e=>null==e.deletedDate)})),yield Promise.all(i);const n={encrypted:!0,encKeyValidation_DO_NOT_EDIT:(yield this.cryptoService.encrypt(Q.a.newGuid())).encryptedString,folders:[],items:[]};return e.forEach(e=>{if(null==e.id)return;const t=new Ve;t.build(e),n.folders.push(t)}),t.forEach(e=>{if(null!=e.organizationId)return;const t=new Ue;t.build(e),t.collectionIds=null,n.items.push(t)}),JSON.stringify(n,null,"  ")}))}getOrganizationDecryptedExport(e,t){return lf(this,void 0,void 0,(function*(){const i=[],n=[],s=[];if(s.push(this.apiService.getCollections(e).then(e=>{const t=[];return null!=e&&null!=e.data&&e.data.length>0&&e.data.forEach(e=>{const n=new $(new $g(e));t.push(n.decrypt().then(e=>{i.push(e)}))}),Promise.all(t)})),s.push(this.apiService.getCiphersOrganization(e).then(e=>{const t=[];return null!=e&&null!=e.data&&e.data.length>0&&e.data.filter(e=>null===e.deletedDate).forEach(e=>{const i=new ve.a(new of.a(e));t.push(i.decrypt().then(e=>{n.push(e)}))}),Promise.all(t)})),yield Promise.all(s),"csv"===t){const e=new Map;i.forEach(t=>{e.set(t.id,t)});const t=[];return n.forEach(i=>{if(i.type!==B.a.Login&&i.type!==B.a.SecureNote)return;const n={collections:[]};null!=i.collectionIds&&(n.collections=i.collectionIds.filter(t=>e.has(t)).map(t=>e.get(t).name)),this.buildCommonCipher(n,i),t.push(n)}),G.unparse(t)}{const e={encrypted:!1,collections:[],items:[]};return i.forEach(t=>{const i=new Re;i.build(t),e.collections.push(i)}),n.forEach(t=>{const i=new Ue;i.build(t),e.items.push(i)}),JSON.stringify(e,null,"  ")}}))}getOrganizationEncryptedExport(e){return lf(this,void 0,void 0,(function*(){const t=[],i=[],n=[];n.push(this.apiService.getCollections(e).then(e=>(null!=e&&null!=e.data&&e.data.length>0&&e.data.forEach(e=>{const i=new $(new $g(e));t.push(i)}),Promise.all([])))),n.push(this.apiService.getCiphersOrganization(e).then(e=>(null!=e&&null!=e.data&&e.data.length>0&&e.data.filter(e=>null===e.deletedDate).forEach(e=>{const t=new ve.a(new of.a(e));i.push(t)}),Promise.all([])))),yield Promise.all(n);const s={encrypted:!0,collections:[],items:[]};return t.forEach(e=>{const t=new Re;t.build(e),s.collections.push(t)}),i.forEach(e=>{const t=new Ue;t.build(e),s.items.push(t)}),JSON.stringify(s,null,"  ")}))}padNumber(e,t,i="0"){const n=e.toString();return n.length>=t?n:new Array(t-n.length+1).join(i)+n}buildCommonCipher(e,t){switch(e.type=null,e.name=t.name,e.notes=t.notes,e.fields=null,e.reprompt=t.reprompt,e.login_uri=null,e.login_username=null,e.login_password=null,e.login_totp=null,t.fields&&t.fields.forEach(t=>{e.fields?e.fields+="\n":e.fields="",e.fields+=(t.name||"")+": "+t.value}),t.type){case B.a.Login:e.type="login",e.login_username=t.login.username,e.login_password=t.login.password,e.login_totp=t.login.totp,t.login.uris&&(e.login_uri=[],t.login.uris.forEach(t=>{e.login_uri.push(t.uri)}));break;case B.a.SecureNote:e.type="note";break;default:return}return e}}(Lm,Bm,Um,Mm),Xm=new Gg(Am,Um),Zm=new class extends class{constructor(e,t,i,n,s,r,o){this.userService=e,this.syncService=t,this.appIdService=i,this.apiService=n,this.vaultTimeoutService=s,this.logoutCallback=r,this.logService=o,this.connected=!1,this.inited=!1,this.inactive=!1,this.reconnectTimer=null}init(e){return cm(this,void 0,void 0,(function*(){this.inited=!1,this.url="https://notifications.bitwarden.com",null!=e.notificationsUrl?this.url=e.notificationsUrl:null!=e.baseUrl&&(this.url=e.baseUrl+"/notifications"),"https://-"!==this.url&&(null!=this.signalrConnection&&(this.signalrConnection.off("ReceiveMessage"),this.signalrConnection.off("Heartbeat"),yield this.signalrConnection.stop(),this.connected=!1,this.signalrConnection=null),this.signalrConnection=(new em.b).withUrl(this.url+"/hub",{accessTokenFactory:()=>this.apiService.getActiveBearerToken(),skipNegotiation:!0,transport:em.a.WebSockets}).withHubProtocol(new tm.a).build(),this.signalrConnection.on("ReceiveMessage",e=>this.processNotification(new im(e))),this.signalrConnection.on("Heartbeat",e=>{}),this.signalrConnection.onclose(()=>{this.connected=!1,this.reconnect(!0)}),this.inited=!0,(yield this.isAuthedAndUnlocked())&&(yield this.reconnect(!1)))}))}updateConnection(e=!1){return cm(this,void 0,void 0,(function*(){if(this.inited)try{(yield this.isAuthedAndUnlocked())?yield this.reconnect(e):yield this.signalrConnection.stop()}catch(e){this.logService.error(e.toString())}}))}reconnectFromActivity(){return cm(this,void 0,void 0,(function*(){this.inactive=!1,this.inited&&!this.connected&&(yield this.reconnect(!0))}))}disconnectFromInactivity(){return cm(this,void 0,void 0,(function*(){this.inactive=!0,this.inited&&this.connected&&(yield this.signalrConnection.stop())}))}processNotification(e){return cm(this,void 0,void 0,(function*(){const t=yield this.appIdService.getAppId();if(null==e||e.contextId===t)return;const i=yield this.userService.isAuthenticated(),n=e.payload.userId||e.payload.UserId,s=yield this.userService.getUserId();if(!i||null==n||n===s)switch(e.type){case Zy.SyncCipherCreate:case Zy.SyncCipherUpdate:yield this.syncService.syncUpsertCipher(e.payload,e.type===Zy.SyncCipherUpdate);break;case Zy.SyncCipherDelete:case Zy.SyncLoginDelete:yield this.syncService.syncDeleteCipher(e.payload);break;case Zy.SyncFolderCreate:case Zy.SyncFolderUpdate:yield this.syncService.syncUpsertFolder(e.payload,e.type===Zy.SyncFolderUpdate);break;case Zy.SyncFolderDelete:yield this.syncService.syncDeleteFolder(e.payload);break;case Zy.SyncVault:case Zy.SyncCiphers:case Zy.SyncSettings:i&&(yield this.syncService.fullSync(!1));break;case Zy.SyncOrgKeys:i&&(yield this.apiService.refreshIdentityToken(),yield this.syncService.fullSync(!0),yield this.signalrConnection.stop());break;case Zy.LogOut:i&&this.logoutCallback();break;case Zy.SyncSendCreate:case Zy.SyncSendUpdate:yield this.syncService.syncUpsertSend(e.payload,e.type===Zy.SyncSendUpdate);break;case Zy.SyncSendDelete:yield this.syncService.syncDeleteSend(e.payload)}}))}reconnect(e){return cm(this,void 0,void 0,(function*(){if(null!=this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.connected||!this.inited||this.inactive)return;if(yield this.isAuthedAndUnlocked()){try{yield this.signalrConnection.start(),this.connected=!0,e&&(yield this.syncService.fullSync(!1))}catch(e){}this.connected||(this.reconnectTimer=setTimeout(()=>this.reconnect(e),this.random(12e4,3e5)))}}))}isAuthedAndUnlocked(){return cm(this,void 0,void 0,(function*(){if(yield this.userService.isAuthenticated()){return!(yield this.vaultTimeoutService.isLocked())}return!1}))}random(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1))+e}}{constructor(e,t,i,n,s,r,o,c,a){super(e,t,i,n,s,r,o),this.localSyncService=t,this.clientService=c,this.broadcasterService=a}init(e){const t=Object.create(null,{init:{get:()=>super.init}});return am(this,void 0,void 0,(function*(){console.warn("init NOTIFICATION"),yield t.init.call(this,e);const i=this.clientService.GetRealtime();i.unsubscribeAll();yield i.subscribe("deleted","com.bitwarden.organizations",this.handleOrganizationDelete.bind(this)),yield i.subscribe("updated","com.bitwarden.organizations",this.handleOrganizationUpdate.bind(this)),yield i.subscribe("created","com.bitwarden.organizations",this.handleOrganizationCreate.bind(this))}))}waitForSyncCompleted(){return am(this,void 0,void 0,(function*(){if(!this.localSyncService.syncInProgress)return void console.log("waitForSyncCompleted NOWAIT");console.log("waitForSyncCompleted START WAIT");const e="NotificationsService"+qt.a();return new Promise(t=>{this.broadcasterService.subscribe(e,i=>{switch(i.command){case"syncCompleted":console.log("waitForSyncCompleted END WAIT"),this.broadcasterService.unsubscribe(e),t()}})})}))}handleOrganizationDelete(e){return am(this,void 0,void 0,(function*(){console.log({deletedORg:e}),yield this.waitForSyncCompleted(),yield this.localSyncService.syncDeleteOrganization(e._id)}))}handleOrganizationCreate(e){return am(this,void 0,void 0,(function*(){console.log({createdORg:e}),yield this.waitForSyncCompleted()}))}handleOrganizationUpdate(e){return am(this,void 0,void 0,(function*(){console.log({updatedORg:e}),yield this.waitForSyncCompleted(),console.warn("sync upsert"),yield this.localSyncService.syncUpsertOrganization(e._id,!1)}))}}(Nm,Wm,Em,Um,Hm,()=>wm(void 0,void 0,void 0,(function*(){return km.send("logout",{expired:!0})})),Sm,Om,xm),ev=new class{constructor(e,t,i){this.apiService=e,this.storageService=t,this.notificationsService=i}getWebVaultUrl(){return null!=this.webVaultUrl?this.webVaultUrl:this.baseUrl?this.baseUrl:null}setUrlsFromStorage(){return tf(this,void 0,void 0,(function*(){const e=(yield this.storageService.get(Pr.a.environmentUrlsKey))||{base:null,api:null,identity:null,icons:null,notifications:null,events:null,webVault:null,enterprise:null},t=new ef;if(e.base)return this.baseUrl=t.base=e.base,void this.apiService.setUrls(t);this.webVaultUrl=e.webVault,this.apiUrl=t.api=e.api,this.identityUrl=t.identity=e.identity,this.iconsUrl=e.icons,this.notificationsUrl=e.notifications,this.eventsUrl=t.events=e.events,this.enterpriseUrl=e.enterprise,this.apiService.setUrls(t)}))}setUrls(e){return tf(this,void 0,void 0,(function*(){e.base=this.formatUrl(e.base),e.webVault=this.formatUrl(e.webVault),e.api=this.formatUrl(e.api),e.identity=this.formatUrl(e.identity),e.icons=this.formatUrl(e.icons),e.notifications=this.formatUrl(e.notifications),e.events=this.formatUrl(e.events),e.enterprise=this.formatUrl(e.enterprise),yield this.storageService.save(Pr.a.environmentUrlsKey,{base:e.base,api:e.api,identity:e.identity,webVault:e.webVault,icons:e.icons,notifications:e.notifications,events:e.events,enterprise:e.enterprise}),this.baseUrl=e.base,this.webVaultUrl=e.webVault,this.apiUrl=e.api,this.identityUrl=e.identity,this.iconsUrl=e.icons,this.notificationsUrl=e.notifications,this.eventsUrl=e.events,this.enterpriseUrl=e.enterprise;const t=new ef;return this.baseUrl?t.base=this.baseUrl:(t.api=this.apiUrl,t.identity=this.identityUrl,t.events=this.eventsUrl),this.apiService.setUrls(t),null!=this.notificationsService&&this.notificationsService.init(this),e}))}formatUrl(e){return null==e||""===e?null:((e=e.replace(/\/+$/g,"")).startsWith("http://")||e.startsWith("https://")||(e="https://"+e),e.trim())}}(Um,Tm,Zm),tv=new class{constructor(e,t,i,n){this.storageService=e,this.apiService=t,this.userService=i,this.cipherService=n,this.inited=!1}init(e){this.inited||(this.inited=!0,e&&(this.uploadEvents(),setInterval(()=>this.uploadEvents(),6e4)))}collect(e,t=null,i=!1){return rf(this,void 0,void 0,(function*(){if(!(yield this.userService.isAuthenticated()))return;const n=yield this.userService.getAllOrganizations();if(null==n)return;const s=new Set(n.filter(e=>e.useEvents).map(e=>e.id));if(0===s.size)return;if(null!=t){const e=yield this.cipherService.get(t);if(null==e||null==e.organizationId||!s.has(e.organizationId))return}let r=yield this.storageService.get(Pr.a.eventCollectionKey);null==r&&(r=[]);const o=new nf;o.type=e,o.cipherId=t,o.date=(new Date).toISOString(),r.push(o),yield this.storageService.save(Pr.a.eventCollectionKey,r),i&&(yield this.uploadEvents())}))}uploadEvents(){return rf(this,void 0,void 0,(function*(){if(!(yield this.userService.isAuthenticated()))return;const e=yield this.storageService.get(Pr.a.eventCollectionKey);if(null==e||0===e.length)return;const t=e.map(e=>{const t=new sf;return t.type=e.type,t.cipherId=e.cipherId,t.date=e.date,t});try{yield this.apiService.postEventsCollect(t),this.clearEvents()}catch(e){}}))}clearEvents(){return rf(this,void 0,void 0,(function*(){yield this.storageService.remove(Pr.a.eventCollectionKey)}))}}(Tm,Um,Nm,Bm),iv=new class{constructor(e,t,i,n,s=null){this.storageService=e,this.vaultTimeoutService=t,this.messagingService=i,this.platformUtilsService=n,this.reloadCallback=s,this.reloadInterval=null,this.clearClipboardTimeout=null,this.clearClipboardTimeoutFunction=null}startProcessReload(){null==this.vaultTimeoutService.pinProtectedKey&&null==this.reloadInterval&&(this.cancelProcessReload(),this.reloadInterval=setInterval(()=>Ff(this,void 0,void 0,(function*(){let e=!1;const t=yield this.storageService.get(Pr.a.lastActiveKey);if(null!=t){e=(new Date).getTime()-t>=5e3}const i=(yield this.storageService.get(Pr.a.biometricFingerprintValidated))&&this.vaultTimeoutService.biometricLocked;e&&!i&&(clearInterval(this.reloadInterval),this.reloadInterval=null,this.messagingService.send("reloadProcess"),null!=this.reloadCallback&&(yield this.reloadCallback()))})),1e4))}cancelProcessReload(){null!=this.reloadInterval&&(clearInterval(this.reloadInterval),this.reloadInterval=null)}clearClipboard(e,t=null){null!=this.clearClipboardTimeout&&(clearTimeout(this.clearClipboardTimeout),this.clearClipboardTimeout=null),Q.a.isNullOrWhitespace(e)||this.storageService.get(Pr.a.clearClipboardKey).then(i=>{null==i&&(i=5),null==t&&(t=1e3*i),this.clearClipboardTimeoutFunction=()=>Ff(this,void 0,void 0,(function*(){console.log("clearClipboardTimeoutFunction");const t=yield this.platformUtilsService.readFromClipboard();e===t&&(console.log("clipboardValue === clipboardValueNow",e),this.platformUtilsService.copyToClipboard("",{clearing:!0}))})),this.clearClipboardTimeout=setTimeout(()=>Ff(this,void 0,void 0,(function*(){yield this.clearPendingClipboard()})),t)})}clearPendingClipboard(){return Ff(this,void 0,void 0,(function*(){null!=this.clearClipboardTimeoutFunction&&(yield this.clearClipboardTimeoutFunction(),this.clearClipboardTimeoutFunction=null)}))}}(Tm,Hm,km,Im,null),nv=new jg(Am,Mm,Im,Sm,Cm,Nm,km,Hm,Tm),sv=new class{constructor(e,t,i){this.i18nService=e,this.cryptoService=t,this.platformUtilService=i}protectedFields(){return["TOTP","Password","H_Field","Card Number","Security Code"]}showPasswordPrompt(){return bm(this,void 0,void 0,(function*(){return this.platformUtilService.showPasswordDialog(this.i18nService.t("passwordConfirmation"),this.i18nService.t("passwordConfirmationDesc"),e=>bm(this,void 0,void 0,(function*(){const t=yield this.cryptoService.hashPassword(e,null),i=yield this.cryptoService.getKeyHash();return null!=i&&null!=t&&i===t})))}))}}(Cm,Mm,Im);function rv(){return()=>wm(this,void 0,void 0,(function*(){yield ev.setUrlsFromStorage(),Wm.fullSync(!0),Hm.init(!0);const e=yield Tm.get(Pr.a.localeKey);yield Cm.init(e),tv.init(!0),Ym.init(),setTimeout(()=>Zm.init(ev),3e3);const t=window.document.documentElement;t.classList.add("os_"+Im.getDeviceString()),t.classList.add("locale_"+Cm.translationLocale);let i=yield Tm.get(Pr.a.themeKey);null==i&&(i=Im.getDevice()===zt.a.MacOsDesktop?yield Im.getDefaultSystemTheme():"cozyLight"),t.classList.add("theme_"+i),Pm.save(Pr.a.disableFaviconKey,yield Tm.get(Pr.a.disableFaviconKey));let n=null;const s=yield Tm.get(Pr.a.installedVersionKey),r=yield Im.getApplicationVersion();null==s?n="install":s!==r&&(n="update"),null!=n&&(yield Tm.save(Pr.a.installedVersionKey,r))}))}Jm.attachToGlobal(window);class ov{}ov.ɵfac=function(e){return new(e||ov)},ov.ɵmod=n.ac({type:ov}),ov.ɵinj=n.Zb({providers:[ur,cr,rr,nr,v,b,w,{provide:y,useValue:Om},{provide:ld,useValue:Rm},{provide:Ia,useValue:Xm},{provide:S,useValue:Ym},{provide:C,useValue:Bm},{provide:Sh,useValue:Bm},{provide:T,useValue:Lm},{provide:P,useValue:_m},{provide:k,useValue:ev},{provide:Jd,useValue:Gm},{provide:Or,useValue:zm},{provide:I.a,useValue:Cm},{provide:x.a,useValue:Mm},{provide:Lr,useValue:Am},{provide:A.a,useValue:Im},{provide:D,useValue:qm},{provide:O,useValue:Um},{provide:M,useValue:Wm},{provide:gm,useValue:Wm},{provide:z.a,useValue:Nm},{provide:pu,useValue:Nm},{provide:a.a,useValue:km},{provide:Sr,useValue:xm},{provide:Gd,useValue:Fm},{provide:E.a,useValue:Hm},{provide:wr.a,useValue:Tm},{provide:br.a,useValue:Pm},{provide:qd,useValue:Sm},{provide:fm,useValue:$m},{provide:vc,useValue:Qm},{provide:mm,useValue:Zm},{provide:vm,useValue:iv},{provide:Da,useValue:tv},{provide:mo,useValue:Km},{provide:bc,useValue:jm},{provide:Lr,useValue:Am},{provide:jg,useValue:nv},{provide:ym,useValue:Vm},{provide:zh,useValue:sv},{provide:n.d,useFactory:rv,deps:[],multi:!0},{provide:n.G,useFactory:()=>Cm.translationLocale,deps:[]}],imports:[[r.d]]}),("undefined"==typeof ngJitMode||ngJitMode)&&n.Kc(ov,{imports:[r.d]}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(ov,[{type:n.H,args:[{imports:[r.d],declarations:[],providers:[ur,cr,rr,nr,v,b,w,{provide:y,useValue:Om},{provide:ld,useValue:Rm},{provide:Ia,useValue:Xm},{provide:S,useValue:Ym},{provide:C,useValue:Bm},{provide:Sh,useValue:Bm},{provide:T,useValue:Lm},{provide:P,useValue:_m},{provide:k,useValue:ev},{provide:Jd,useValue:Gm},{provide:Or,useValue:zm},{provide:I.a,useValue:Cm},{provide:x.a,useValue:Mm},{provide:Lr,useValue:Am},{provide:A.a,useValue:Im},{provide:D,useValue:qm},{provide:O,useValue:Um},{provide:M,useValue:Wm},{provide:gm,useValue:Wm},{provide:z.a,useValue:Nm},{provide:pu,useValue:Nm},{provide:a.a,useValue:km},{provide:Sr,useValue:xm},{provide:Gd,useValue:Fm},{provide:E.a,useValue:Hm},{provide:wr.a,useValue:Tm},{provide:br.a,useValue:Pm},{provide:qd,useValue:Sm},{provide:fm,useValue:$m},{provide:vc,useValue:Qm},{provide:mm,useValue:Zm},{provide:vm,useValue:iv},{provide:Da,useValue:tv},{provide:mo,useValue:Km},{provide:bc,useValue:jm},{provide:Lr,useValue:Am},{provide:jg,useValue:nv},{provide:ym,useValue:Vm},{provide:zh,useValue:sv},{provide:n.d,useFactory:rv,deps:[],multi:!0},{provide:n.G,useFactory:()=>Cm.translationLocale,deps:[]}]}]}],null,null);var cv=i(464),av=i(303),lv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class dv{constructor(e,t,i,n){this.passwordGenerationService=e,this.platformUtilsService=t,this.i18nService=i,this.win=n,this.history=[]}ngOnInit(){return lv(this,void 0,void 0,(function*(){this.history=yield this.passwordGenerationService.getHistory()}))}clear(){this.history=[],this.passwordGenerationService.clear()}copy(e){const t=null!=this.win?{window:this.win}:null;this.platformUtilsService.copyToClipboard(e,t),this.platformUtilsService.showToast("info",null,this.i18nService.t("valueCopied",this.i18nService.t("password")))}}function uv(e,t){if(1&e){const e=n.ic();n.hc(0,"div",14),n.Oc(1," "),n.hc(2,"div",15),n.Oc(3," "),n.dc(4,"div",16),n.tc(5,"colorPassword"),n.Oc(6," "),n.hc(7,"span",17),n.Oc(8),n.tc(9,"date"),n.gc(),n.Oc(10," "),n.gc(),n.Oc(11," "),n.hc(12,"div",18),n.Oc(13," "),n.hc(14,"a",19),n.oc("click",(function(){n.Hc(e);const i=t.$implicit;return n.sc().copy(i.password)})),n.tc(15,"i18n"),n.Oc(16," "),n.dc(17,"i",20),n.Oc(18," "),n.gc(),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc()}if(2&e){const e=t.$implicit;n.Qb(4),n.zc("innerHTML",n.uc(5,3,e.password),n.Ic),n.Qb(4),n.Pc(n.vc(9,5,e.date,"medium")),n.Qb(6),n.Ac("appA11yTitle",n.uc(15,8,"copyPassword"))}}function hv(e,t){1&e&&(n.hc(0,"div",21),n.Oc(1),n.tc(2,"i18n"),n.gc()),2&e&&(n.Qb(1),n.Qc(" ",n.uc(2,1,"noPasswordsInList")," "))}dv.ɵfac=function(e){return new(e||dv)(n.cc(D),n.cc(A.a),n.cc(I.a),n.cc(Window))},dv.ɵdir=n.Xb({type:dv}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(dv,[{type:n.q}],(function(){return[{type:D},{type:A.a},{type:I.a},{type:Window}]}),null);class pv extends dv{constructor(e,t,i){super(e,t,i,window)}}pv.ɵfac=function(e){return new(e||pv)(n.cc(D),n.cc(A.a),n.cc(I.a))},pv.ɵcmp=n.Wb({type:pv,selectors:[["app-password-generator-history"]],features:[n.Nb],decls:42,vars:11,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","passwordGenHistoryTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content"],[1,"modal-body"],[1,"box"],["id","passwordGenHistoryTitle",1,"box-header"],[1,"box-content","condensed"],["class","box-content-row box-content-row-flex",4,"ngFor","ngForOf"],["class","box-content-row",4,"ngIf"],[1,"modal-footer"],["type","button","data-dismiss","modal"],[1,"right"],["appBlurClick","","type","button",1,"danger",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw"],[1,"box-content-row","box-content-row-flex"],[1,"row-main"],["appSelectCopy","",1,"password-wrapper","monospaced",3,"innerHTML"],[1,"detail"],[1,"action-buttons"],["href","#","appStopClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg","fa-clone"],[1,"box-content-row"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"div",2),n.Oc(5," "),n.hc(6,"div",3),n.Oc(7," "),n.hc(8,"div",4),n.Oc(9," "),n.hc(10,"div",5),n.Oc(11),n.tc(12,"i18n"),n.gc(),n.Oc(13," "),n.hc(14,"div",6),n.Oc(15," "),n.Mc(16,uv,21,10,"div",7),n.Oc(17," "),n.Mc(18,hv,3,3,"div",8),n.Oc(19," "),n.gc(),n.Oc(20," "),n.gc(),n.Oc(21," "),n.gc(),n.Oc(22," "),n.hc(23,"div",9),n.Oc(24," "),n.hc(25,"button",10),n.Oc(26),n.tc(27,"i18n"),n.gc(),n.Oc(28," "),n.hc(29,"div",11),n.Oc(30," "),n.hc(31,"button",12),n.oc("click",(function(){return t.clear()})),n.tc(32,"i18n"),n.Oc(33," "),n.dc(34,"i",13),n.Oc(35," "),n.gc(),n.Oc(36," "),n.gc(),n.Oc(37," "),n.gc(),n.Oc(38," "),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.gc(),n.Oc(41," ")),2&e&&(n.Qb(11),n.Qc(" ",n.uc(12,5,"passwordHistory")," "),n.Qb(5),n.zc("ngForOf",t.history),n.Qb(2),n.zc("ngIf",!t.history.length),n.Qb(8),n.Pc(n.uc(27,7,"close")),n.Qb(5),n.Ac("appA11yTitle",n.uc(32,9,"clear")))},directives:[Dr.j,Dr.k,fr,Mr,rh,Ar],pipes:[yr.a,oh,Dr.d],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(pv,[{type:n.l,args:[{selector:"app-password-generator-history",templateUrl:"password-generator-history.component.html"}]}],(function(){return[{type:D},{type:A.a},{type:I.a}]}),null);var gv=i(454),fv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};var yv=i(550),mv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class vv{constructor(e,t,i,s,r,o){this.cryptoService=e,this.i18nService=t,this.platformUtilsService=i,this.exportService=s,this.eventService=r,this.win=o,this.onSaved=new n.t,this.format="json",this.showPassword=!1}get encryptedFormat(){return"encrypted_json"===this.format}submit(){return mv(this,void 0,void 0,(function*(){this.platformUtilsService.saveFile(this.win,"csv",{type:"text/plain"},"yannick.yxy")}))}warningDialog(){return mv(this,void 0,void 0,(function*(){return this.encryptedFormat?yield this.platformUtilsService.showDialog("<p>"+this.i18nService.t("encExportKeyWarningDesc")+"<p>"+this.i18nService.t("encExportAccountWarningDesc"),this.i18nService.t("confirmVaultExport"),this.i18nService.t("exportVault"),this.i18nService.t("cancel"),"warning",!0):yield this.platformUtilsService.showDialog(this.i18nService.t("exportWarningDesc"),this.i18nService.t("confirmVaultExport"),this.i18nService.t("exportVault"),this.i18nService.t("cancel"),"warning")}))}togglePassword(){this.showPassword=!this.showPassword,document.getElementById("masterPassword").focus()}saved(){this.onSaved.emit()}getExportData(){return this.exportService.getExport(this.format)}getFileName(e){let t=this.format;return"encrypted_json"===this.format&&(e=null==e?"encrypted":"encrypted_"+e,t="json"),this.exportService.getFileName(e,t)}collectEvent(){return mv(this,void 0,void 0,(function*(){yield this.eventService.collect(Aa.User_ClientExportedVault)}))}downloadFile(e){}}vv.ɵfac=function(e){return new(e||vv)(n.cc(x.a),n.cc(I.a),n.cc(A.a),n.cc(fm),n.cc(Da),n.cc(Window))},vv.ɵdir=n.Xb({type:vv,outputs:{onSaved:"onSaved"}}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(vv,[{type:n.q}],(function(){return[{type:x.a},{type:I.a},{type:A.a},{type:fm},{type:Da},{type:Window}]}),{onSaved:[{type:n.O}]});var bv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const wv=function(e,t){return{"fa-eye":e,"fa-eye-slash":t}};class Ov extends vv{constructor(e,t,i,n,s,r,o){super(e,t,i,n,s,window),this.broadcasterService=r,this.ngZone=o}ngOnInit(){return bv(this,void 0,void 0,(function*(){this.broadcasterService.subscribe("ExportComponent",e=>bv(this,void 0,void 0,(function*(){this.ngZone.run(()=>{switch(e.command){case"windowHidden":this.onWindowHidden()}})})))}))}ngOnDestroy(){this.broadcasterService.unsubscribe("ExportComponent")}onWindowHidden(){this.showPassword=!1}warningDialog(){return bv(this,void 0,void 0,(function*(){return this.encryptedFormat?yield this.platformUtilsService.showDialog(this.i18nService.t("encExportKeyWarningDesc")+yv.EOL+yv.EOL+this.i18nService.t("encExportAccountWarningDesc"),this.i18nService.t("confirmVaultExport"),this.i18nService.t("exportVault"),this.i18nService.t("cancel"),"warning",!0):yield this.platformUtilsService.showDialog(this.i18nService.t("exportWarningDesc"),this.i18nService.t("confirmVaultExport"),this.i18nService.t("exportVault"),this.i18nService.t("cancel"),"warning")}))}}Ov.ɵfac=function(e){return new(e||Ov)(n.cc(x.a),n.cc(I.a),n.cc(A.a),n.cc(fm),n.cc(Da),n.cc(Sr),n.cc(n.M))},Ov.ɵcmp=n.Wb({type:Ov,selectors:[["app-export"]],features:[n.Nb],decls:83,vars:28,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","exportTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content",3,"ngSubmit"],["form",""],[1,"modal-body"],[1,"box"],["id","exportTitle",1,"box-header"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["for","format"],["id","format","name","Format",3,"ngModel","ngModelChange"],["value","json"],["value","csv"],["value","encrypted_json"],["appBoxRow","",1,"box-content-row","box-content-row-flex"],[1,"row-main"],["for","masterPassword"],["id","masterPassword","name","MasterPassword","required","","appAutofocus","",1,"monospaced",3,"type","ngModel","ngModelChange"],[1,"action-buttons"],["href","#","appStopClick","","appBlurClick","","role","button",1,"row-btn",3,"appA11yTitle","click"],["aria-hidden","true",1,"fa","fa-lg",3,"ngClass"],[1,"box-footer"],[1,"modal-footer"],["appBlurClick","","type","submit",1,"primary",3,"appA11yTitle"],["aria-hidden","true",1,"fa","fa-download","fa-lg","fa-fw"],["type","button","data-dismiss","modal"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"form",2,3),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",4),n.Oc(8," "),n.hc(9,"div",5),n.Oc(10," "),n.hc(11,"div",6),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.hc(15,"div",7),n.Oc(16," "),n.hc(17,"div",8),n.Oc(18," "),n.hc(19,"label",9),n.Oc(20),n.tc(21,"i18n"),n.gc(),n.Oc(22," "),n.hc(23,"select",10),n.oc("ngModelChange",(function(e){return t.format=e})),n.Oc(24," "),n.hc(25,"option",11),n.Oc(26,".json"),n.gc(),n.Oc(27," "),n.hc(28,"option",12),n.Oc(29,".csv"),n.gc(),n.Oc(30," "),n.hc(31,"option",13),n.Oc(32,".json (Encrypted)"),n.gc(),n.Oc(33," "),n.gc(),n.Oc(34," "),n.gc(),n.Oc(35," "),n.hc(36,"div",14),n.Oc(37," "),n.hc(38,"div",15),n.Oc(39," "),n.hc(40,"label",16),n.Oc(41),n.tc(42,"i18n"),n.gc(),n.Oc(43," "),n.hc(44,"input",17),n.oc("ngModelChange",(function(e){return t.masterPassword=e})),n.gc(),n.Oc(45," "),n.gc(),n.Oc(46," "),n.hc(47,"div",18),n.Oc(48," "),n.hc(49,"a",19),n.oc("click",(function(){return t.togglePassword()})),n.tc(50,"i18n"),n.Oc(51," "),n.dc(52,"i",20),n.Oc(53," "),n.gc(),n.Oc(54," "),n.gc(),n.Oc(55," "),n.gc(),n.Oc(56," "),n.gc(),n.Oc(57," "),n.hc(58,"div",21),n.Oc(59," "),n.hc(60,"p"),n.Oc(61),n.tc(62,"i18n"),n.gc(),n.Oc(63," "),n.gc(),n.Oc(64," "),n.gc(),n.Oc(65," "),n.gc(),n.Oc(66," "),n.hc(67,"div",22),n.Oc(68," "),n.hc(69,"button",23),n.tc(70,"i18n"),n.Oc(71," "),n.dc(72,"i",24),n.Oc(73," "),n.gc(),n.Oc(74," "),n.hc(75,"button",25),n.Oc(76),n.tc(77,"i18n"),n.gc(),n.Oc(78," "),n.gc(),n.Oc(79," "),n.gc(),n.Oc(80," "),n.gc(),n.Oc(81," "),n.gc(),n.Oc(82," ")),2&e&&(n.Qb(12),n.Qc(" ",n.uc(13,11,"exportVault")," "),n.Qb(8),n.Pc(n.uc(21,13,"fileFormat")),n.Qb(3),n.zc("ngModel",t.format),n.Qb(18),n.Pc(n.uc(42,15,"masterPass")),n.Qb(3),n.Ac("type",t.showPassword?"text":"password"),n.zc("ngModel",t.masterPassword),n.Qb(5),n.Ac("appA11yTitle",n.uc(50,17,"toggleVisibility")),n.Qb(3),n.zc("ngClass",n.Ec(25,wv,!t.showPassword,t.showPassword)),n.Qb(9),n.Pc(n.uc(62,19,"exportMasterPassword")),n.Qb(8),n.Ac("appA11yTitle",n.uc(70,21,"submit")),n.Qb(7),n.Pc(n.uc(77,23,"cancel")))},directives:[dr.p,dr.g,dr.h,pr,dr.o,dr.f,dr.i,dr.j,dr.q,dr.b,dr.n,gr,Ar,fr,Mr,Dr.i],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Ov,[{type:n.l,args:[{selector:"app-export",templateUrl:"export.component.html"}]}],(function(){return[{type:x.a},{type:I.a},{type:A.a},{type:fm},{type:Da},{type:Sr},{type:n.M}]}),null);var Sv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Cv{constructor(e,t,i,s,r,o,c,a){this.apiService=e,this.i18nService=t,this.platformUtilsService=i,this.cryptoService=s,this.searchService=r,this.userService=o,this.collectionService=c,this.cipherService=a,this.onDeletedOrganization=new n.t}ngOnInit(){return Sv(this,void 0,void 0,(function*(){yield this.init()}))}removeAllCiphersFromCollection(e){return Sv(this,void 0,void 0,(function*(){const t=yield this.searchService.searchCiphers(null,[t=>null!=t.collectionIds&&t.collectionIds.indexOf(e.id)>-1],null);for(const e of t)yield this.cipherService.unshare(e)}))}removeAllCollections(){return Sv(this,void 0,void 0,(function*(){const e=(yield this.collectionService.getAllDecrypted()).filter(e=>e.organizationId===this.organizationId);for(const t of e)yield this.removeAllCiphersFromCollection(t)}))}deleteOrganization(){return Sv(this,void 0,void 0,(function*(){yield this.removeAllCollections();const e=new xr;e.masterPasswordHash=yield this.cryptoService.hashPassword(this.masterPassword,null),yield this.apiService.deleteOrganization(this.organizationId,e)}))}submit(){return Sv(this,void 0,void 0,(function*(){if(null==this.masterPassword||""===this.masterPassword)return this.platformUtilsService.showToast("error",this.i18nService.t("errorOccurred"),this.i18nService.t("masterPassRequired")),!1;try{return this.formPromise=this.deleteOrganization(),yield this.formPromise,this.platformUtilsService.showToast("success",this.i18nService.t("organizationDeleted"),this.i18nService.t("organizationDeletedDesc")),this.onDeletedOrganization.emit(this.organization),!0}catch(e){}return!1}))}init(){return Sv(this,void 0,void 0,(function*(){this.title=this.i18nService.t("deleteOrganizationTitle"),this.organization=yield this.userService.getOrganization(this.organizationId),this.organizationName=this.organization.name}))}}Cv.ɵfac=function(e){return new(e||Cv)(n.cc(O),n.cc(I.a),n.cc(A.a),n.cc(x.a),n.cc(vc),n.cc(z.a),n.cc(P),n.cc(Sh))},Cv.ɵcmp=n.Wb({type:Cv,selectors:[["app-organization-delete"]],inputs:{organizationId:"organizationId"},outputs:{onDeletedOrganization:"onDeletedOrganization"},decls:60,vars:25,consts:[["tabindex","-1","role","dialog","aria-modal","true","aria-labelledby","deleteOrganizationTitle",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content",3,"appApiAction","ngSubmit"],["form",""],[1,"modal-body"],[1,"box"],["id","deleteOrganizationTitle",1,"box-header"],[1,"box-content"],["appBoxRow","",1,"box-content-row"],["type","warning"],["for","name"],["id","name","type","text","name","Name","disabled","disabled",3,"ngModel","ngModelChange"],["for","masterPassword"],["id","masterPassword","type","password","name","MasterPasswordHash","required","","appAutofocus","","appInputVerbatim","",1,"form-control",3,"ngModel","ngModelChange"],[1,"modal-footer"],["appBlurClick","","type","submit",1,"danger",3,"appA11yTitle","disabled"],["aria-hidden","true",1,"fa","fa-trash-o","fa-lg","fa-fw",3,"hidden"],["aria-hidden","true",1,"fa","fa-spinner","fa-spin","fa-lg","fa-fw",3,"hidden"],["type","button","data-dismiss","modal"]],template:function(e,t){if(1&e&&(n.hc(0,"div",0),n.Oc(1," "),n.hc(2,"div",1),n.Oc(3," "),n.hc(4,"form",2,3),n.oc("ngSubmit",(function(){return t.submit()})),n.Oc(6," "),n.hc(7,"div",4),n.Oc(8," "),n.hc(9,"div",5),n.Oc(10," "),n.hc(11,"div",6),n.Oc(12),n.gc(),n.Oc(13," "),n.hc(14,"div",7),n.Oc(15," "),n.hc(16,"div",8),n.Oc(17," "),n.hc(18,"p"),n.Oc(19),n.tc(20,"i18n"),n.gc(),n.Oc(21," "),n.hc(22,"app-callout",9),n.Oc(23),n.tc(24,"i18n"),n.gc(),n.Oc(25," "),n.hc(26,"label",10),n.Oc(27),n.tc(28,"i18n"),n.gc(),n.Oc(29," "),n.hc(30,"input",11),n.oc("ngModelChange",(function(e){return t.organizationName=e})),n.gc(),n.Oc(31," "),n.hc(32,"label",12),n.Oc(33),n.tc(34,"i18n"),n.gc(),n.Oc(35," "),n.hc(36,"input",13),n.oc("ngModelChange",(function(e){return t.masterPassword=e})),n.gc(),n.Oc(37," "),n.gc(),n.Oc(38," "),n.gc(),n.Oc(39," "),n.gc(),n.Oc(40," "),n.gc(),n.Oc(41," "),n.hc(42,"div",14),n.Oc(43," "),n.hc(44,"button",15),n.tc(45,"i18n"),n.Oc(46," "),n.dc(47,"i",16),n.Oc(48," "),n.dc(49,"i",17),n.Oc(50," "),n.gc(),n.Oc(51," "),n.hc(52,"button",18),n.Oc(53),n.tc(54,"i18n"),n.gc(),n.Oc(55," "),n.gc(),n.Oc(56," "),n.gc(),n.Oc(57," "),n.gc(),n.Oc(58," "),n.gc(),n.Oc(59," ")),2&e){const e=n.Gc(5);n.Qb(4),n.zc("appApiAction",t.formPromise),n.Qb(8),n.Qc(" ",t.title," "),n.Qb(7),n.Pc(n.uc(20,13,"deleteOrganizationDesc")),n.Qb(4),n.Pc(n.uc(24,15,"deleteOrganizationWarning")),n.Qb(4),n.Pc(n.uc(28,17,"name")),n.Qb(3),n.zc("ngModel",t.organizationName),n.Qb(3),n.Pc(n.uc(34,19,"masterPass")),n.Qb(3),n.zc("ngModel",t.masterPassword),n.Qb(8),n.Ac("appA11yTitle",n.uc(45,21,"delete")),n.zc("disabled",e.loading),n.Qb(3),n.zc("hidden",e.loading),n.Qb(2),n.zc("hidden",!e.loading),n.Qb(4),n.Pc(n.uc(54,23,"cancel"))}},directives:[dr.p,dr.g,dr.h,hr,pr,ko,dr.b,dr.f,dr.i,dr.n,gr,fr,Mr],pipes:[yr.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Cv,[{type:n.l,args:[{selector:"app-organization-delete",templateUrl:"organization-delete.component.html"}]}],(function(){return[{type:O},{type:I.a},{type:A.a},{type:x.a},{type:vc},{type:z.a},{type:P},{type:Sh}]}),{organizationId:[{type:n.D}],onDeletedOrganization:[{type:n.O}]});var Pv=i(840);class xv extends Jt{renderReact(){R.render(U.createElement(Pv.a),this.getRootDomNode())}}xv.ɵfac=function(e){return kv(e||xv)},xv.ɵcmp=n.Wb({type:xv,selectors:[["app-icon-sprite"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2});const kv=n.jc(xv);("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(xv,[{type:n.l,args:[{selector:"app-icon-sprite",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],null,null);var Tv=i(531),Iv=i.n(Tv),Dv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class Av extends Jt{renderReact(){return Dv(this,void 0,void 0,(function*(){R.render(U.createElement(Iv.a),this.getRootDomNode())}))}}Av.ɵfac=function(e){return Mv(e||Av)},Av.ɵcmp=n.Wb({type:Av,selectors:[["app-flag-switcher"]],features:[n.Nb],decls:1,vars:1,consts:[[1,"angular-react-wrapper",3,"id"]],template:function(e,t){1&e&&n.dc(0,"span",0),2&e&&n.zc("id",t.rootDomID)},encapsulation:2});const Mv=n.jc(Av);("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Av,[{type:n.l,args:[{selector:"app-flag-switcher",templateUrl:"../angular-wrapper.component.html",encapsulation:n.gb.None}]}],null,null);var zv=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const Ev=["settings"],Uv=["passwordHistory"],Nv=["exportVault"],Rv=["appFolderAddEdit"],Fv=["appPasswordGenerator"],Qv=["deleteOrganization"];function Vv(e,t){}function Bv(e,t){}function Lv(e,t){}function _v(e,t){}function jv(e,t){}function Kv(e,t){}function Hv(e,t){}class Wv{constructor(e,t,i,n,s,o,c,a,l,d,u,h,p,g,f,y,m,v,b,w,O,S,C,P,x,k,T,I){this.broadcasterService=e,this.userService=t,this.tokenService=i,this.folderService=n,this.settingsService=s,this.syncService=o,this.passwordGenerationService=c,this.cipherService=a,this.authService=l,this.router=d,this.toasterService=u,this.i18nService=h,this.sanitizer=p,this.ngZone=g,this.vaultTimeoutService=f,this.storageService=y,this.cryptoService=m,this.componentFactoryResolver=v,this.messagingService=b,this.collectionService=w,this.searchService=O,this.notificationsService=S,this.platformUtilsService=C,this.systemService=P,this.stateService=x,this.eventService=k,this.policyService=T,this.clientService=I,this.toasterConfig=new r.b({showCloseButton:!0,mouseoverTimerStop:!0,animation:"flyRight",limit:5}),this.lastActivity=null,this.modal=null,this.idleTimer=null,this.isIdle=!1}ngOnInit(){this.ngZone.runOutsideAngular(()=>{setTimeout(()=>zv(this,void 0,void 0,(function*(){yield this.updateAppMenu()})),1e3),window.onmousemove=()=>this.recordActivity(),window.onmousedown=()=>this.recordActivity(),window.ontouchstart=()=>this.recordActivity(),window.onclick=()=>this.recordActivity(),window.onscroll=()=>this.recordActivity(),window.onkeypress=()=>this.recordActivity()}),this.initCozy(),this.broadcasterService.subscribe("AppComponent",e=>zv(this,void 0,void 0,(function*(){this.ngZone.run(()=>zv(this,void 0,void 0,(function*(){switch(e.command){case"loggedIn":case"unlocked":this.notificationsService.updateConnection(),this.updateAppMenu(),this.systemService.cancelProcessReload();break;case"loggedOut":null!=this.modal&&this.modal.close(),this.notificationsService.updateConnection(),this.updateAppMenu(),this.systemService.startProcessReload(),yield this.systemService.clearPendingClipboard();break;case"authBlocked":case"installed":case"uninstallBlocked":const t=e.url;this.router.navigate(["login"],{queryParams:{redirectUri:t}});break;case"installBlocked":this.router.navigate(["installation"]);break;case"logout":this.logOut(!!e.expired);break;case"lockVault":yield this.vaultTimeoutService.lock(!0);break;case"locked":null!=this.modal&&this.modal.close(),this.stateService.purge(),this.router.navigate(["lock"]),this.notificationsService.updateConnection(),this.updateAppMenu(),this.systemService.startProcessReload(),yield this.systemService.clearPendingClipboard();break;case"reloadProcess":window.location.reload(!0);break;case"syncStarted":case"syncCompleted":break;case"fullSync":this.syncService.fullSync(!0);break;case"openSettings":this.openModal(av.a,this.settingsRef);break;case"showDialog":yield this.showDialog(e);break;case"showFingerprintPhrase":const i=yield this.cryptoService.getFingerprint(yield this.userService.getUserId());yield this.platformUtilsService.showDialog(this.i18nService.t("yourAccountsFingerprint")+":\n"+i.join("-"),this.i18nService.t("fingerprintPhrase"),this.i18nService.t("close"),null);break;case"openPasswordHistory":this.openModal(pv,this.passwordHistoryRef);break;case"showToast":this.showToast(e);break;case"copiedToClipboard":e.clearing||this.systemService.clearClipboard(e.clipboardValue,e.clearMs);break;case"ssoCallback":this.router.navigate(["sso"],{queryParams:{code:e.code,state:e.state}});break;case"emailVerificationRequired":(yield this.platformUtilsService.showDialog(this.i18nService.t("emailVerificationRequiredDesc"),this.i18nService.t("emailVerificationRequired"),this.i18nService.t("learnMore"),this.i18nService.t("cancel")))&&this.platformUtilsService.launchUri("https://bitwarden.com/help/article/create-bitwarden-account/");break;case"syncVault":try{yield this.syncService.fullSync(!0,!0),this.toasterService.popAsync("success",null,this.i18nService.t("syncingComplete"))}catch(e){this.toasterService.popAsync("error",null,this.i18nService.t("syncingFailed"))}break;case"checkSyncVault":try{const e=yield this.syncService.getLastSync();let t=21600001;null!=e&&(t=(new Date).getTime()-e.getTime()),t>=216e5&&(yield this.syncService.fullSync(!1))}catch(e){}this.messagingService.send("scheduleNextSync");break;case"exportVault":yield this.openExportVault();break;case"newLogin":this.routeToVault("add",B.a.Login);break;case"newCard":this.routeToVault("add",B.a.Card);break;case"newIdentity":this.routeToVault("add",B.a.Identity);break;case"newSecureNote":this.routeToVault("add",B.a.SecureNote);break;default:break;case"newFolder":yield this.addFolder();break;case"deleteOrganization":yield this.deleteOrganization(e.organizationId);break;case"openPasswordGenerator":this.router.url.includes("vault")||(yield this.openPasswordGenerator())}})))})))}initCozy(){const e=this.clientService.GetClient().getInstanceOptions(),t=`${window.location?window.location.protocol:"https:"}//${e.domain}`,i=new d.a({uri:t,token:e.token,appMetadata:{slug:"password",version:"1"},schema:{}});cozy.bar.init({appName:e.app.name,appEditor:e.app.editor,cozyClient:i,iconPath:e.app.icon,lang:e.locale,replaceTitleOnMobile:!1,appSlug:e.app.slug,appNamePrefix:e.app.prefix})}ngOnDestroy(){this.broadcasterService.unsubscribe("AppComponent")}openExportVault(){return zv(this,void 0,void 0,(function*(){null!=this.modal&&this.modal.close();const e=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.exportVaultModalRef.createComponent(e).instance;this.modal.show(Ov,this.exportVaultModalRef).onSaved.subscribe(()=>{this.modal.close()}),this.modal.onClosed.subscribe(()=>{this.modal=null})}))}addFolder(){return zv(this,void 0,void 0,(function*(){null!=this.modal&&this.modal.close();const e=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.folderAddEditModalRef.createComponent(e).instance;this.modal.show(eu,this.folderAddEditModalRef,!0,e=>e.folderId=null).onSavedFolder.subscribe(()=>zv(this,void 0,void 0,(function*(){this.modal.close(),this.syncService.fullSync(!1)}))),this.modal.onClosed.subscribe(()=>{this.modal=null})}))}deleteOrganization(e){return zv(this,void 0,void 0,(function*(){null!=this.modal&&this.modal.close();if((yield this.userService.getOrganization(e)).type!==od.Owner)return void this.toasterService.popAsync("error",null,this.i18nService.t("organizationNoOwnerError"));const t=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.deleteOrganizationRef.createComponent(t).instance;this.modal.show(Cv,this.deleteOrganizationRef,!0,t=>t.organizationId=e).onDeletedOrganization.subscribe(()=>zv(this,void 0,void 0,(function*(){this.modal.close(),this.syncService.fullSync(!0)}))),this.modal.onClosed.subscribe(()=>{this.modal=null})}))}openPasswordGenerator(){return zv(this,void 0,void 0,(function*(){null!=this.modal&&this.modal.close();const e=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=this.passwordGeneratorModalRef.createComponent(e).instance,this.modal.show(uh,this.passwordGeneratorModalRef,!0,e=>e.showSelect=!1),this.modal.onClosed.subscribe(()=>{this.modal=null})}))}updateAppMenu(){return zv(this,void 0,void 0,(function*(){this.messagingService.send("updateAppMenu",{isAuthenticated:yield this.userService.isAuthenticated(),isLocked:yield this.vaultTimeoutService.isLocked()})}))}logOut(e){return zv(this,void 0,void 0,(function*(){yield this.eventService.uploadEvents();const t=yield this.userService.getUserId();yield Promise.all([this.eventService.clearEvents(),this.syncService.setLastSync(new Date(0)),this.tokenService.clearToken(),this.cryptoService.clearKeys(),this.userService.clear(),this.settingsService.clear(t),this.cipherService.clear(t),this.folderService.clear(t),this.collectionService.clear(t),this.passwordGenerationService.clear(),this.vaultTimeoutService.clear(),this.stateService.purge(),this.policyService.clear(t)]),this.vaultTimeoutService.biometricLocked=!0,this.searchService.clearIndex(),this.authService.logOut(()=>zv(this,void 0,void 0,(function*(){e&&this.toasterService.popAsync("warning",this.i18nService.t("loggedOut"),this.i18nService.t("loginExpired")),this.router.navigate(["login"])})))}))}recordActivity(){return zv(this,void 0,void 0,(function*(){const e=(new Date).getTime();null!=this.lastActivity&&e-this.lastActivity<250||(this.lastActivity=e,this.storageService.save(Pr.a.lastActiveKey,e),this.isIdle&&(this.isIdle=!1,this.idleStateChanged()),null!=this.idleTimer&&(window.clearTimeout(this.idleTimer),this.idleTimer=null),this.idleTimer=window.setTimeout(()=>{this.isIdle||(this.isIdle=!0,this.idleStateChanged())},6e5))}))}idleStateChanged(){this.isIdle?this.notificationsService.disconnectFromInactivity():this.notificationsService.reconnectFromActivity()}openModal(e,t){null!=this.modal&&this.modal.close();const i=this.componentFactoryResolver.resolveComponentFactory(Gr);this.modal=t.createComponent(i).instance,this.modal.show(e,t),this.modal.onClosed.subscribe(()=>{this.modal=null})}showToast(e){const t={type:e.type,title:e.title};if("string"==typeof e.text)t.body=e.text;else if(1===e.text.length)t.body=e.text[0];else{let i="";e.text.forEach(e=>i+="<p>"+this.sanitizer.sanitize(n.W.HTML,e)+"</p>"),t.body=i,t.bodyOutputType=r.a.TrustedHtml}null!=e.options&&(!0===e.options.trustedHtml&&(t.bodyOutputType=r.a.TrustedHtml),null!=e.options.timeout&&e.options.timeout>0&&(t.timeout=e.options.timeout)),this.toasterService.popAsync(t)}showDialog(e){return zv(this,void 0,void 0,(function*(){!function(e,t){fv(this,void 0,void 0,(function*(){let i=null;const n=e.type;if(null!=n)switch(n){case"success":i="fa-check text-success";break;case"warning":i="fa-warning text-warning";break;case"error":i="fa-bolt text-danger";break;case"info":i="fa-info-circle text-info"}const s=e.cancelText,r=e.confirmText,o=yield gv.a.fire({heightAuto:!1,buttonsStyling:!1,icon:n,iconHtml:null!=i?`<i class="swal-custom-icon fa ${i}"></i>`:void 0,text:e.text,title:e.title,showCancelButton:null!=s,cancelButtonText:s,showConfirmButton:!0,confirmButtonText:null==r?this.i18nService.t("ok"):r,timer:3e5});t.resolveDialogPromise(e.dialogId,o.value)}))}(e,this.platformUtilsService)}))}routeToVault(e,t){this.router.url.includes("vault")||this.router.navigate(["/vault"],{queryParams:{action:e,addType:t},replaceUrl:!0})}}Wv.ɵfac=function(e){return new(e||Wv)(n.cc(Sr),n.cc(z.a),n.cc(Or),n.cc(T),n.cc(Gd),n.cc(M),n.cc(D),n.cc(C),n.cc(S),n.cc(c.b),n.cc(r.e),n.cc(I.a),n.cc(Qp.b),n.cc(n.M),n.cc(E.a),n.cc(wr.a),n.cc(x.a),n.cc(n.m),n.cc(a.a),n.cc(P),n.cc(vc),n.cc(mm),n.cc(A.a),n.cc(vm),n.cc(br.a),n.cc(Da),n.cc(mo),n.cc(y))},Wv.ɵcmp=n.Wb({type:Wv,selectors:[["app-root"]],viewQuery:function(e,t){if(1&e&&(n.Sc(Ev,3,n.fb),n.Sc(Uv,3,n.fb),n.Sc(Nv,3,n.fb),n.Sc(Rv,3,n.fb),n.Sc(Fv,3,n.fb),n.Sc(Qv,3,n.fb)),2&e){let e;n.Fc(e=n.pc())&&(t.settingsRef=e.first),n.Fc(e=n.pc())&&(t.passwordHistoryRef=e.first),n.Fc(e=n.pc())&&(t.exportVaultModalRef=e.first),n.Fc(e=n.pc())&&(t.folderAddEditModalRef=e.first),n.Fc(e=n.pc())&&(t.passwordGeneratorModalRef=e.first),n.Fc(e=n.pc())&&(t.deleteOrganizationRef=e.first)}},decls:29,vars:1,consts:[["aria-live","polite",3,"toasterconfig"],["settings",""],["premium",""],["passwordHistory",""],["appFolderAddEdit",""],["exportVault",""],["appPasswordGenerator",""],["deleteOrganization",""]],template:function(e,t){1&e&&(n.Oc(0,"\n        "),n.dc(1,"toaster-container",0),n.Oc(2,"\n        "),n.Mc(3,Vv,0,0,"ng-template",null,1,n.Nc),n.Oc(5,"\n        "),n.Mc(6,Bv,0,0,"ng-template",null,2,n.Nc),n.Oc(8,"\n        "),n.Mc(9,Lv,0,0,"ng-template",null,3,n.Nc),n.Oc(11,"\n        "),n.Mc(12,_v,0,0,"ng-template",null,4,n.Nc),n.Oc(14,"\n        "),n.Mc(15,jv,0,0,"ng-template",null,5,n.Nc),n.Oc(17,"\n        "),n.Mc(18,Kv,0,0,"ng-template",null,6,n.Nc),n.Oc(20,"\n        "),n.Mc(21,Hv,0,0,"ng-template",null,7,n.Nc),n.Oc(23,"\n        "),n.dc(24,"router-outlet"),n.Oc(25,"\n        "),n.dc(26,"app-icon-sprite"),n.Oc(27,"\n        "),n.dc(28,"app-flag-switcher")),2&e&&(n.Qb(1),n.zc("toasterconfig",t.toasterConfig))},directives:[r.c,c.f,xv,Av],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Wv,[{type:n.l,args:[{selector:"app-root",styles:[],template:'\n        <toaster-container [toasterconfig]="toasterConfig" aria-live="polite"></toaster-container>\n        <ng-template #settings></ng-template>\n        <ng-template #premium></ng-template>\n        <ng-template #passwordHistory></ng-template>\n        <ng-template #appFolderAddEdit></ng-template>\n        <ng-template #exportVault></ng-template>\n        <ng-template #appPasswordGenerator></ng-template>\n        <ng-template #deleteOrganization></ng-template>\n        <router-outlet></router-outlet>\n        <app-icon-sprite></app-icon-sprite>\n        <app-flag-switcher></app-flag-switcher>'}]}],(function(){return[{type:Sr},{type:z.a},{type:Or},{type:T},{type:Gd},{type:M},{type:D},{type:C},{type:S},{type:c.b},{type:r.e},{type:I.a},{type:Qp.b},{type:n.M},{type:E.a},{type:wr.a},{type:x.a},{type:n.m},{type:a.a},{type:P},{type:vc},{type:mm},{type:A.a},{type:vm},{type:br.a},{type:Da},{type:mo},{type:y}]}),{settingsRef:[{type:n.eb,args:["settings",{read:n.fb,static:!0}]}],passwordHistoryRef:[{type:n.eb,args:["passwordHistory",{read:n.fb,static:!0}]}],exportVaultModalRef:[{type:n.eb,args:["exportVault",{read:n.fb,static:!0}]}],folderAddEditModalRef:[{type:n.eb,args:["appFolderAddEdit",{read:n.fb,static:!0}]}],passwordGeneratorModalRef:[{type:n.eb,args:["appPasswordGenerator",{read:n.fb,static:!0}]}],deleteOrganizationRef:[{type:n.eb,args:["deleteOrganization",{read:n.fb,static:!0}]}]});class qv{transform(e,t,i=!1){return null==e||0===e.length?[]:null==t||t.length<2?e.filter(e=>i!==e.isDeleted):(t=t.trim().toLowerCase(),e.filter(e=>i===e.isDeleted&&(null!=e.name&&e.name.toLowerCase().indexOf(t)>-1||(!!(t.length>=8&&e.id.startsWith(t))||(null!=e.subTitle&&e.subTitle.toLowerCase().indexOf(t)>-1||!!(e.login&&null!=e.login.uri&&e.login.uri.toLowerCase().indexOf(t)>-1))))))}}function Gv(e,t){1&e&&n.xc(0,0,["*ngIf","isFlagEnabled"])}qv.ɵfac=function(e){return new(e||qv)},qv.ɵpipe=n.bc({name:"searchCiphers",type:qv,pure:!0}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(qv,[{type:n.R,args:[{name:"searchCiphers"}]}],null,null);class Jv{constructor(){this.isFlagEnabled=!1}ngOnDestroy(){h.a.store.removeListener("change",this.flagChanged.bind(this))}ngOnInit(){h.a.store.on("change",this.flagChanged.bind(this)),this.flagChanged()}flagChanged(){this.isFlagEnabled=h()(this.flagname)}}Jv.ɵfac=function(e){return new(e||Jv)},Jv.ɵcmp=n.Wb({type:Jv,selectors:[["app-flag-conditional"]],inputs:{flagname:"flagname"},ngContentSelectors:["*"],decls:1,vars:1,consts:[[4,"ngIf"]],template:function(e,t){1&e&&(n.yc(),n.Mc(0,Gv,1,0,"ng-content",0)),2&e&&n.zc("ngIf",t.isFlagEnabled)},directives:[Dr.k],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(Jv,[{type:n.l,args:[{selector:"app-flag-conditional",templateUrl:"./flag-conditional.component.html",encapsulation:n.gb.None}]}],null,{flagname:[{type:n.D}]});var Yv=i(842),$v=i.n(Yv),Xv=i(843),Zv=i.n(Xv),eb=i(844),tb=i.n(eb),ib=i(845),nb=i.n(ib),sb=i(846),rb=i.n(sb),ob=i(847),cb=i.n(ob),ab=i(848),lb=i.n(ab),db=i(849),ub=i.n(db),hb=i(850),pb=i.n(hb),gb=i(851),fb=i.n(gb),yb=i(852),mb=i.n(yb),vb=i(853),bb=i.n(vb),wb=i(854),Ob=i.n(wb),Sb=i(855),Cb=i.n(Sb),Pb=i(856),xb=i.n(Pb),kb=i(857),Tb=i.n(kb),Ib=i(858),Db=i.n(Ib),Ab=i(859),Mb=i.n(Ab),zb=i(860),Eb=i.n(zb),Ub=i(861),Nb=i.n(Ub),Rb=i(862),Fb=i.n(Rb),Qb=i(863),Vb=i.n(Qb),Bb=i(864),Lb=i.n(Bb),_b=i(865),jb=i.n(_b),Kb=i(866),Hb=i.n(Kb),Wb=i(867),qb=i.n(Wb),Gb=i(868),Jb=i.n(Gb),Yb=i(869),$b=i.n(Yb),Xb=i(870),Zb=i.n(Xb),ew=i(871),tw=i.n(ew),iw=i(872),nw=i.n(iw),sw=i(873),rw=i.n(sw),ow=i(874),cw=i.n(ow),aw=i(875),lw=i.n(aw),dw=i(876),uw=i.n(dw),hw=i(877),pw=i.n(hw),gw=i(878),fw=i.n(gw),yw=i(879),mw=i.n(yw),vw=i(880),bw=i.n(vw),ww=i(881),Ow=i.n(ww),Sw=i(882),Cw=i.n(Sw),Pw=i(883),xw=i.n(Pw);Object(Dr.t)($v.a,"af"),Object(Dr.t)(Zv.a,"be"),Object(Dr.t)(tb.a,"bg"),Object(Dr.t)(nb.a,"bn"),Object(Dr.t)(rb.a,"ca"),Object(Dr.t)(cb.a,"cs"),Object(Dr.t)(lb.a,"da"),Object(Dr.t)(ub.a,"de"),Object(Dr.t)(pb.a,"el"),Object(Dr.t)(fb.a,"en-GB"),Object(Dr.t)(mb.a,"en-IN"),Object(Dr.t)(bb.a,"es"),Object(Dr.t)(Ob.a,"et"),Object(Dr.t)(Cb.a,"fa"),Object(Dr.t)(xb.a,"fi"),Object(Dr.t)(Tb.a,"fr"),Object(Dr.t)(Db.a,"he"),Object(Dr.t)(Mb.a,"hr"),Object(Dr.t)(Eb.a,"hu"),Object(Dr.t)(Nb.a,"id"),Object(Dr.t)(Fb.a,"it"),Object(Dr.t)(Vb.a,"ja"),Object(Dr.t)(Lb.a,"ko"),Object(Dr.t)(jb.a,"lv"),Object(Dr.t)(uw.a,"me"),Object(Dr.t)(Hb.a,"ml"),Object(Dr.t)(qb.a,"nb"),Object(Dr.t)(Jb.a,"nl"),Object(Dr.t)($b.a,"pl"),Object(Dr.t)(Zb.a,"pt-BR"),Object(Dr.t)(tw.a,"pt-PT"),Object(Dr.t)(nw.a,"ro"),Object(Dr.t)(rw.a,"ru"),Object(Dr.t)(cw.a,"sk"),Object(Dr.t)(lw.a,"sr"),Object(Dr.t)(pw.a,"sv"),Object(Dr.t)(fw.a,"th"),Object(Dr.t)(mw.a,"tr"),Object(Dr.t)(bw.a,"uk"),Object(Dr.t)(Ow.a,"vi"),Object(Dr.t)(Cw.a,"zh-CN"),Object(Dr.t)(xw.a,"zh-TW");class kw{}kw.ɵfac=function(e){return new(e||kw)},kw.ɵmod=n.ac({type:kw,bootstrap:[Wv]}),kw.ɵinj=n.Zb({providers:[Dr.d],imports:[[Qp.a,cv.a,dr.c,Eg,ov,r.d.forRoot(),o.b,Ma.d]]}),("undefined"==typeof ngJitMode||ngJitMode)&&n.Kc(kw,{declarations:[Mr,fl,hr,Wv,ql,gr,fr,pr,ko,Bd,Wd,oh,Br,Ov,Yl,eu,ih,Cv,mr,yr.a,sd,Fr,ro,Gr,la,uh,pv,yh,yo,qv,rh,ca,Ta,Lo,av.a,Mh,Ko,Ar,da,Na,mc,qo,Mg,Fp,hg,tr,xv,Fu,rd,Av,Jv,Ua,bd,Hp,Tu],imports:[Qp.a,cv.a,dr.c,Eg,ov,r.d,o.b,Ma.d]}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(kw,[{type:n.H,args:[{imports:[Qp.a,cv.a,dr.c,Eg,ov,r.d.forRoot(),o.b,Ma.d],declarations:[Mr,fl,hr,Wv,ql,gr,fr,pr,ko,Bd,Wd,oh,Br,Ov,Yl,eu,ih,Cv,mr,yr.a,sd,Fr,ro,Gr,la,uh,pv,yh,yo,qv,rh,ca,Ta,Lo,av.a,Mh,Ko,Ar,da,Na,mc,qo,Mg,Fp,hg,tr,xv,Fu,rd,Av,Jv,Ua,bd,Hp,Tu],entryComponents:[ql,Wd,Br,Ov,eu,Gr,Cv,uh,pv,yh,av.a,Mh,ca,qo],providers:[Dr.d],bootstrap:[Wv]}]}],null,null),i(916),Object(s.b)()||Object(n.ib)(),Qp.c().bootstrapModule(kw,{preserveWhitespaces:!0}),document.addEventListener("dragover",e=>e.preventDefault()),document.addEventListener("drop",e=>e.preventDefault())},133:function(e,t,i){"use strict";function n(e){return null}i.r(t),i.d(t,"getDomain",(function(){return n}))},134:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(64),s=i(20);class r{constructor(e,t){if(null==e)throw new Error("Must provide key");if(null==t)if(32===e.byteLength)t=n.a.AesCbc256_B64;else{if(64!==e.byteLength)throw new Error("Unable to determine encType.");t=n.a.AesCbc256_HmacSha256_B64}if(this.key=e,this.encType=t,t===n.a.AesCbc256_B64&&32===e.byteLength)this.encKey=e,this.macKey=null;else if(t===n.a.AesCbc128_HmacSha256_B64&&32===e.byteLength)this.encKey=e.slice(0,16),this.macKey=e.slice(16,32);else{if(t!==n.a.AesCbc256_HmacSha256_B64||64!==e.byteLength)throw new Error("Unsupported encType/key length.");this.encKey=e.slice(0,32),this.macKey=e.slice(32,64)}null!=this.key&&(this.keyB64=s.a.fromBufferToB64(this.key)),null!=this.encKey&&(this.encKeyB64=s.a.fromBufferToB64(this.encKey)),null!=this.macKey&&(this.macKeyB64=s.a.fromBufferToB64(this.macKey))}}},138:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.name=null,this.value=null,this.type=null,this.newField=!1,this.showValue=!1,e&&(this.type=e.type)}get maskedValue(){return null!=this.value?"••••••••":null}}},14:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},140:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(92),s=i(20);const r=["https://","http://","ssh://","ftp://","sftp://","irc://","vnc://","rdp://","ms-rd:","chrome://","iosapp://","androidapp://"];class o{constructor(e){this.match=null,this._uri=null,this._domain=null,this._hostname=null,this._host=null,this._canLaunch=null,e&&(this.match=e.match)}get uri(){return this._uri}set uri(e){this._uri=e,this._domain=null,this._canLaunch=null}get domain(){return null==this._domain&&null!=this.uri&&(this._domain=s.a.getDomain(this.uri),""===this._domain&&(this._domain=null)),this._domain}get hostname(){return this.match===n.a.RegularExpression?null:(null==this._hostname&&null!=this.uri&&(this._hostname=s.a.getHostname(this.uri),""===this._hostname&&(this._hostname=null)),this._hostname)}get host(){return this.match===n.a.RegularExpression?null:(null==this._host&&null!=this.uri&&(this._host=s.a.getHost(this.uri),""===this._host&&(this._host=null)),this._host)}get hostnameOrUri(){return null!=this.hostname?this.hostname:this.uri}get hostOrUri(){return null!=this.host?this.host:this.uri}get isWebsite(){return null!=this.uri&&(0===this.uri.indexOf("http://")||0===this.uri.indexOf("https://")||this.uri.indexOf("://")<0&&s.a.tldEndingRegex.test(this.uri))}get canLaunch(){if(null!=this._canLaunch)return this._canLaunch;if(null!=this.uri&&this.match!==n.a.RegularExpression){const e=this.launchUri;for(let t=0;t<r.length;t++)if(0===e.indexOf(r[t]))return this._canLaunch=!0,this._canLaunch}return this._canLaunch=!1,this._canLaunch}get launchUri(){return this.uri.indexOf("://")<0&&s.a.tldEndingRegex.test(this.uri)?"http://"+this.uri:this.uri}}},147:function(e,t,i){"use strict";i.d(t,"a",(function(){return u}));var n=i(15),s=i(377),r=i(378),o=i(379),c=i(380),a=i(381),l=i(382);class d{}class u{constructor(e){switch(this.type=e.type,this.folderId=e.folderId,this.organizationId=e.organizationId,this.name=e.name?e.name.encryptedString:null,this.notes=e.notes?e.notes.encryptedString:null,this.favorite=e.favorite,this.lastKnownRevisionDate=e.revisionDate,this.reprompt=e.reprompt,this.type){case n.a.Login:this.login=new c.a,this.login.uris=null,this.login.username=e.login.username?e.login.username.encryptedString:null,this.login.password=e.login.password?e.login.password.encryptedString:null,this.login.passwordRevisionDate=null!=e.login.passwordRevisionDate?e.login.passwordRevisionDate.toISOString():null,this.login.totp=e.login.totp?e.login.totp.encryptedString:null,this.login.autofillOnPageLoad=e.login.autofillOnPageLoad,null!=e.login.uris&&(this.login.uris=e.login.uris.map(e=>{const t=new a.a;return t.uri=null!=e.uri?e.uri.encryptedString:null,t.match=null!=e.match?e.match:null,t}));break;case n.a.SecureNote:this.secureNote=new l.a,this.secureNote.type=e.secureNote.type;break;case n.a.Card:this.card=new s.a,this.card.cardholderName=null!=e.card.cardholderName?e.card.cardholderName.encryptedString:null,this.card.brand=null!=e.card.brand?e.card.brand.encryptedString:null,this.card.number=null!=e.card.number?e.card.number.encryptedString:null,this.card.expMonth=null!=e.card.expMonth?e.card.expMonth.encryptedString:null,this.card.expYear=null!=e.card.expYear?e.card.expYear.encryptedString:null,this.card.code=null!=e.card.code?e.card.code.encryptedString:null;break;case n.a.Identity:this.identity=new o.a,this.identity.title=null!=e.identity.title?e.identity.title.encryptedString:null,this.identity.firstName=null!=e.identity.firstName?e.identity.firstName.encryptedString:null,this.identity.middleName=null!=e.identity.middleName?e.identity.middleName.encryptedString:null,this.identity.lastName=null!=e.identity.lastName?e.identity.lastName.encryptedString:null,this.identity.address1=null!=e.identity.address1?e.identity.address1.encryptedString:null,this.identity.address2=null!=e.identity.address2?e.identity.address2.encryptedString:null,this.identity.address3=null!=e.identity.address3?e.identity.address3.encryptedString:null,this.identity.city=null!=e.identity.city?e.identity.city.encryptedString:null,this.identity.state=null!=e.identity.state?e.identity.state.encryptedString:null,this.identity.postalCode=null!=e.identity.postalCode?e.identity.postalCode.encryptedString:null,this.identity.country=null!=e.identity.country?e.identity.country.encryptedString:null,this.identity.company=null!=e.identity.company?e.identity.company.encryptedString:null,this.identity.email=null!=e.identity.email?e.identity.email.encryptedString:null,this.identity.phone=null!=e.identity.phone?e.identity.phone.encryptedString:null,this.identity.ssn=null!=e.identity.ssn?e.identity.ssn.encryptedString:null,this.identity.username=null!=e.identity.username?e.identity.username.encryptedString:null,this.identity.passportNumber=null!=e.identity.passportNumber?e.identity.passportNumber.encryptedString:null,this.identity.licenseNumber=null!=e.identity.licenseNumber?e.identity.licenseNumber.encryptedString:null}null!=e.fields&&(this.fields=e.fields.map(e=>{const t=new r.a;return t.type=e.type,t.name=e.name?e.name.encryptedString:null,t.value=e.value?e.value.encryptedString:null,t})),null!=e.passwordHistory&&(this.passwordHistory=[],e.passwordHistory.forEach(e=>{this.passwordHistory.push({lastUsedDate:e.lastUsedDate,password:e.password?e.password.encryptedString:null})})),null!=e.attachments&&(this.attachments={},this.attachments2={},e.attachments.forEach(e=>{const t=e.fileName?e.fileName.encryptedString:null;this.attachments[e.id]=t;const i=new d;i.fileName=t,null!=e.key&&(i.key=e.key.encryptedString),this.attachments2[e.id]=i}))}}},15:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.Login=1]="Login",e[e.SecureNote=2]="SecureNote",e[e.Card=3]="Card",e[e.Identity=4]="Identity"}(n||(n={}))},159:function(e,t,i){"use strict";(function(e){function n(e){throw new Error("Contextual menu not implemented")}function s(){return"1"===e.env.ELECTRON_IS_DEV}function r(){return!1}i.d(t,"a",(function(){return n})),i.d(t,"b",(function(){return s})),i.d(t,"c",(function(){return r}))}).call(this,i(103))},166:function(e,t,i){"use strict";i.d(t,"a",(function(){return f}));var n=i(15),s=i(130),r=i(85),o=i(391),c=i(274),a=i(68),l=i(275),d=i(276),u=i(277),h=i(392),p=i(279),g=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class f extends a.a{constructor(e,t=!1,i=null){if(super(),null!=e){switch(this.buildDomainModel(this,e,{id:null,userId:null,organizationId:null,folderId:null,name:null,notes:null},t,["id","userId","organizationId","folderId"]),this.type=e.type,this.favorite=e.favorite,this.organizationUseTotp=e.organizationUseTotp,this.edit=e.edit,null!=e.viewPassword?this.viewPassword=e.viewPassword:this.viewPassword=!0,this.revisionDate=null!=e.revisionDate?new Date(e.revisionDate):null,this.collectionIds=e.collectionIds,this.localData=i,this.deletedDate=null!=e.deletedDate?new Date(e.deletedDate):null,this.reprompt=e.reprompt,this.type){case n.a.Login:this.login=new u.a(e.login,t);break;case n.a.SecureNote:this.secureNote=new p.a(e.secureNote,t);break;case n.a.Card:this.card=new c.a(e.card,t);break;case n.a.Identity:this.identity=new d.a(e.identity,t)}null!=e.attachments?this.attachments=e.attachments.map(e=>new o.a(e,t)):this.attachments=null,null!=e.fields?this.fields=e.fields.map(e=>new l.a(e,t)):this.fields=null,null!=e.passwordHistory?this.passwordHistory=e.passwordHistory.map(e=>new h.a(e,t)):this.passwordHistory=null}}decrypt(e){return g(this,void 0,void 0,(function*(){const t=new r.a(this);switch(yield this.decryptObj(t,{name:null,notes:null},this.organizationId,e),this.type){case n.a.Login:t.login=yield this.login.decrypt(this.organizationId,e);break;case n.a.SecureNote:t.secureNote=yield this.secureNote.decrypt(this.organizationId,e);break;case n.a.Card:t.card=yield this.card.decrypt(this.organizationId,e);break;case n.a.Identity:t.identity=yield this.identity.decrypt(this.organizationId,e)}const i=this.organizationId;if(null!=this.attachments&&this.attachments.length>0){const n=[];yield this.attachments.reduce((t,s)=>t.then(()=>s.decrypt(i,e)).then(e=>{n.push(e)}),Promise.resolve()),t.attachments=n}if(null!=this.fields&&this.fields.length>0){const n=[];yield this.fields.reduce((t,s)=>t.then(()=>s.decrypt(i,e)).then(e=>{n.push(e)}),Promise.resolve()),t.fields=n}if(null!=this.passwordHistory&&this.passwordHistory.length>0){const n=[];yield this.passwordHistory.reduce((t,s)=>t.then(()=>s.decrypt(i,e)).then(e=>{n.push(e)}),Promise.resolve()),t.passwordHistory=n}return t}))}toCipherData(e){const t=new s.a;switch(t.id=this.id,t.organizationId=this.organizationId,t.folderId=this.folderId,t.userId=null!=this.organizationId?e:null,t.edit=this.edit,t.viewPassword=this.viewPassword,t.organizationUseTotp=this.organizationUseTotp,t.favorite=this.favorite,t.revisionDate=null!=this.revisionDate?this.revisionDate.toISOString():null,t.type=this.type,t.collectionIds=this.collectionIds,t.deletedDate=null!=this.deletedDate?this.deletedDate.toISOString():null,t.reprompt=this.reprompt,this.buildDataModel(this,t,{name:null,notes:null}),t.type){case n.a.Login:t.login=this.login.toLoginData();break;case n.a.SecureNote:t.secureNote=this.secureNote.toSecureNoteData();break;case n.a.Card:t.card=this.card.toCardData();break;case n.a.Identity:t.identity=this.identity.toIdentityData()}return null!=this.fields&&(t.fields=this.fields.map(e=>e.toFieldData())),null!=this.attachments&&(t.attachments=this.attachments.map(e=>e.toAttachmentData())),null!=this.passwordHistory&&(t.passwordHistory=this.passwordHistory.map(e=>e.toPasswordHistoryData())),t}}},20:function(e,t,i){"use strict";(function(e,n,s){i.d(t,"a",(function(){return c}));var r=i(133);const o="undefined"==typeof window?i(658):null;class c{static init(){c.inited||(c.inited=!0,c.isNode=void 0!==e&&null!=e.release&&"node"===e.release.name,c.isBrowser="undefined"!=typeof window,c.isNativeScript=!c.isNode&&!c.isBrowser,c.isMobileBrowser=c.isBrowser&&this.isMobile(window),c.isAppleMobileBrowser=c.isBrowser&&this.isAppleMobile(window),c.global=c.isNativeScript||c.isNode&&!c.isBrowser?n:window)}static fromB64ToArray(e){if(c.isNode||c.isNativeScript)return new Uint8Array(s.from(e,"base64"));{const t=window.atob(e),i=new Uint8Array(t.length);for(let e=0;e<t.length;e++)i[e]=t.charCodeAt(e);return i}}static fromUrlB64ToArray(e){return c.fromB64ToArray(c.fromUrlB64ToB64(e))}static fromHexToArray(e){if(c.isNode||c.isNativeScript)return new Uint8Array(s.from(e,"hex"));{const t=new Uint8Array(e.length/2);for(let i=0;i<e.length;i+=2)t[i/2]=parseInt(e.substr(i,2),16);return t}}static fromUtf8ToArray(e){if(c.isNode||c.isNativeScript)return new Uint8Array(s.from(e,"utf8"));{const t=unescape(encodeURIComponent(e)),i=new Uint8Array(t.length);for(let e=0;e<t.length;e++)i[e]=t.charCodeAt(e);return i}}static fromByteStringToArray(e){const t=new Uint8Array(e.length);for(let i=0;i<e.length;i++)t[i]=e.charCodeAt(i);return t}static fromBufferToB64(e){if(c.isNode||c.isNativeScript)return s.from(e).toString("base64");{let t="";const i=new Uint8Array(e);for(let e=0;e<i.byteLength;e++)t+=String.fromCharCode(i[e]);return window.btoa(t)}}static fromBufferToUrlB64(e){return c.fromB64toUrlB64(c.fromBufferToB64(e))}static fromB64toUrlB64(e){return e.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}static fromBufferToUtf8(e){if(c.isNode||c.isNativeScript)return s.from(e).toString("utf8");{const t=new Uint8Array(e),i=String.fromCharCode.apply(null,t);return decodeURIComponent(escape(i))}}static fromBufferToByteString(e){return String.fromCharCode.apply(null,new Uint8Array(e))}static fromBufferToHex(e){if(c.isNode||c.isNativeScript)return s.from(e).toString("hex");{const t=new Uint8Array(e);return Array.prototype.map.call(t,e=>("00"+e.toString(16)).slice(-2)).join("")}}static fromUrlB64ToB64(e){let t=e.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw new Error("Illegal base64url string!")}return t}static fromUrlB64ToUtf8(e){return c.fromB64ToUtf8(c.fromUrlB64ToB64(e))}static fromUtf8ToB64(e){return c.isNode||c.isNativeScript?s.from(e,"utf8").toString("base64"):decodeURIComponent(escape(window.btoa(e)))}static fromB64ToUtf8(e){return c.isNode||c.isNativeScript?s.from(e,"base64").toString("utf8"):decodeURIComponent(escape(window.atob(e)))}static newGuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}static isGuid(e){return RegExp(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/,"i").test(e)}static getHostname(e){const t=c.getUrl(e);try{return null!=t&&""!==t.hostname?t.hostname:null}catch(e){return null}}static getHost(e){const t=c.getUrl(e);try{return null!=t&&""!==t.host?t.host:null}catch(e){return null}}static getDomain(e){if(null==e)return null;if(""===(e=e.trim()))return null;if(e.startsWith("data:"))return null;let t=e.startsWith("http://")||e.startsWith("https://");if(!t&&e.indexOf("://")<0&&c.tldEndingRegex.test(e)&&(e="http://"+e,t=!0),t)try{const t=c.getUrlObject(e);if("localhost"===t.hostname||c.validIpAddress(t.hostname))return t.hostname;const i=null!=r&&null!=r.getDomain?r.getDomain(t.hostname):null;return null!=i?i:t.hostname}catch(e){}try{const t=null!=r&&null!=r.getDomain?r.getDomain(e):null;if(null!=t)return t}catch(e){return null}return null}static getQueryParams(e){const t=c.getUrl(e);if(null==t||null==t.search||""===t.search)return null;const i=new Map;return("?"===t.search[0]?t.search.substr(1):t.search).split("&").forEach(e=>{const t=e.split("=");t.length<1||i.set(decodeURIComponent(t[0]).toLowerCase(),null==t[1]?"":decodeURIComponent(t[1]))}),i}static getSortFunction(e,t){return(i,n)=>null==i[t]&&null!=n[t]?-1:null!=i[t]&&null==n[t]?1:null==i[t]&&null==n[t]?0:e.collator?e.collator.compare(i[t],n[t]):i[t].localeCompare(n[t])}static isNullOrWhitespace(e){return null==e||"string"!=typeof e||""===e.trim()}static nameOf(e){return e}static assign(e,t){return Object.assign(e,t)}static getUrl(e){if(null==e)return null;if(""===(e=e.trim()))return null;let t=c.getUrlObject(e);if(null==t){!(0===e.indexOf("http://")||0===e.indexOf("https://"))&&e.indexOf(".")>-1&&(t=c.getUrlObject("http://"+e))}return t}static validIpAddress(e){return/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(e)}static isMobile(e){let t=!1;var i;return i=e.navigator.userAgent||e.navigator.vendor||e.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(i)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(i.substr(0,4)))&&(t=!0),t||null!=e.navigator.userAgent.match(/iPad/i)}static isAppleMobile(e){return null!=e.navigator.userAgent.match(/iPhone/i)||null!=e.navigator.userAgent.match(/iPad/i)}static getUrlObject(e){try{if(null!=o)return o.URL?new o.URL(e):o.parse(e);if("function"==typeof URL)return new URL(e);if(null!=window){const t=e.indexOf("://")>-1;if(!t&&e.indexOf(".")>-1)e="http://"+e;else if(!t)return null;const i=window.document.createElement("a");return i.href=e,i}}catch(e){}return null}}c.inited=!1,c.isNativeScript=!1,c.isNode=!1,c.isBrowser=!0,c.isMobileBrowser=!1,c.isAppleMobileBrowser=!1,c.global=null,c.tldEndingRegex=/.*\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/,c.init()}).call(this,i(103),i(104),i(98).Buffer)},22:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},23:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.response=e}getResponseProperty(e,t=null,i=!1){if(null==e||""===e)throw new Error("propertyName must not be null/empty.");if(null==t&&null!=this.response&&(t=this.response),null==t)return null;if(!i&&void 0===t[e]){let i=null;i=e.charAt(0)===e.charAt(0).toUpperCase()?e.charAt(0).toLowerCase():e.charAt(0).toUpperCase(),e.length>1&&(i+=e.slice(1)),void 0===t[e=i]&&(e=e.toLowerCase()),void 0===t[e]&&(e=e.toUpperCase())}return t[e]}}},237:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.password=null,this.lastUsedDate=null,e&&(this.lastUsedDate=e.lastUsedDate)}}},245:function(e,t,i){"use strict";function n(e){return(t,i,n)=>{const s=n.value,r=new Map;return{value:function(...t){const i=(e=>{let t=r.get(e);return null!=t||(t=new Map,r.set(e,t)),t})(this),n=e(t);let o=i.get(n);if(null!=o)return o;const c=()=>{i.delete(n),0===i.size&&r.delete(this)};return o=s.apply(this,t).then(e=>(c(),e)).catch(e=>{throw c(),e}),i.set(n,o),o}}}}i.d(t,"a",(function(){return n}))},249:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(88);class s{constructor(e){null!=e&&(this.id=e.id,this.fileName=e.fileName,this.key=e.key,this.size=e.size,this.sizeName=e.sizeName)}}class r{constructor(e){null!=e&&(this.text=e.text,this.hidden=e.hidden)}}class o{constructor(e,t){if(null!=e)switch(this.id=e.id,this.accessId=e.accessId,this.userId=t,this.type=e.type,this.name=e.name,this.notes=e.notes,this.key=e.key,this.maxAccessCount=e.maxAccessCount,this.accessCount=e.accessCount,this.revisionDate=e.revisionDate,this.expirationDate=e.expirationDate,this.deletionDate=e.deletionDate,this.password=e.password,this.disabled=e.disable,this.hideEmail=e.hideEmail,this.type){case n.a.Text:this.text=new r(e.text);break;case n.a.File:this.file=new s(e.file)}}}},274:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(384),s=i(68),r=i(67);class o extends s.a{constructor(e,t=!1){super(),null!=e&&this.buildDomainModel(this,e,{cardholderName:null,brand:null,number:null,expMonth:null,expYear:null,code:null},t,[])}decrypt(e,t){return this.decryptObj(new r.a(this),{cardholderName:null,brand:null,number:null,expMonth:null,expYear:null,code:null},e,t)}toCardData(){const e=new n.a;return this.buildDataModel(this,e,{cardholderName:null,brand:null,number:null,expMonth:null,expYear:null,code:null}),e}}},275:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(385),s=i(68),r=i(138);class o extends s.a{constructor(e,t=!1){super(),null!=e&&(this.type=e.type,this.buildDomainModel(this,e,{name:null,value:null},t,[]))}decrypt(e,t){return this.decryptObj(new r.a(this),{name:null,value:null},e,t)}toFieldData(){const e=new n.a;return this.buildDataModel(this,e,{name:null,value:null,type:null},["type"]),e}}},276:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(386),s=i(68),r=i(99);class o extends s.a{constructor(e,t=!1){super(),null!=e&&this.buildDomainModel(this,e,{title:null,firstName:null,middleName:null,lastName:null,address1:null,address2:null,address3:null,city:null,state:null,postalCode:null,country:null,company:null,email:null,phone:null,ssn:null,username:null,passportNumber:null,licenseNumber:null},t,[])}decrypt(e,t){return this.decryptObj(new r.a(this),{title:null,firstName:null,middleName:null,lastName:null,address1:null,address2:null,address3:null,city:null,state:null,postalCode:null,country:null,company:null,email:null,phone:null,ssn:null,username:null,passportNumber:null,licenseNumber:null},e,t)}toIdentityData(){const e=new n.a;return this.buildDataModel(this,e,{title:null,firstName:null,middleName:null,lastName:null,address1:null,address2:null,address3:null,city:null,state:null,postalCode:null,country:null,company:null,email:null,phone:null,ssn:null,username:null,passportNumber:null,licenseNumber:null}),e}}},277:function(e,t,i){"use strict";i.d(t,"a",(function(){return a}));var n=i(278),s=i(387),r=i(107),o=i(68),c=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class a extends o.a{constructor(e,t=!1){super(),null!=e&&(this.passwordRevisionDate=null!=e.passwordRevisionDate?new Date(e.passwordRevisionDate):null,this.autofillOnPageLoad=e.autofillOnPageLoad,this.buildDomainModel(this,e,{username:null,password:null,totp:null},t,[]),e.uris&&(this.uris=[],e.uris.forEach(e=>{this.uris.push(new n.a(e,t))})))}decrypt(e,t){return c(this,void 0,void 0,(function*(){const i=yield this.decryptObj(new r.a(this),{username:null,password:null,totp:null},e,t);if(null!=this.uris){i.uris=[];for(let n=0;n<this.uris.length;n++){const s=yield this.uris[n].decrypt(e,t);i.uris.push(s)}}return i}))}toLoginData(){const e=new s.a;return e.passwordRevisionDate=null!=this.passwordRevisionDate?this.passwordRevisionDate.toISOString():null,e.autofillOnPageLoad=this.autofillOnPageLoad,this.buildDataModel(this,e,{username:null,password:null,totp:null}),null!=this.uris&&this.uris.length>0&&(e.uris=[],this.uris.forEach(t=>{e.uris.push(t.toLoginUriData())})),e}}},278:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(388),s=i(140),r=i(68);class o extends r.a{constructor(e,t=!1){super(),null!=e&&(this.match=e.match,this.buildDomainModel(this,e,{uri:null},t,[]))}decrypt(e,t){return this.decryptObj(new s.a(this),{uri:null},e,t)}toLoginUriData(){const e=new n.a;return this.buildDataModel(this,e,{uri:null},["match"]),e}}},279:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(390),s=i(68),r=i(78);class o extends s.a{constructor(e,t=!1){super(),null!=e&&(this.type=e.type)}decrypt(e,t){return Promise.resolve(new r.a(this))}toSecureNoteData(){const e=new n.a;return e.type=this.type,e}}},288:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.id=null,this.size=null,this.sizeName=null,this.fileName=null,e&&(this.id=e.id,this.size=e.size,this.sizeName=e.sizeName)}get fileSize(){try{if(null!=this.size)return parseInt(this.size,null)}catch(e){}return 0}}},289:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.text=null,e&&(this.hidden=e.hidden)}get maskedText(){return null!=this.text?"••••••••":null}}},290:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){super(e),null!=e&&(this.id=this.getResponseProperty("Id"),this.fileName=this.getResponseProperty("FileName"),this.key=this.getResponseProperty("Key"),this.size=this.getResponseProperty("Size"),this.sizeName=this.getResponseProperty("SizeName"))}}},291:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){super(e),null!=e&&(this.text=this.getResponseProperty("Text"),this.hidden=this.getResponseProperty("Hidden")||!1)}}},303:function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return A}));var n=i(0),s=i(454),r=i(55),o=i(34),c=i(13),a=i(38),l=i(14),d=i(41),u=i(46),h=i(22),p=i(45),g=i(32),f=i(80),y=i(159),m=i(20),v=i(16),b=i(10),w=i(47),O=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};function S(e,t){if(1&e&&(n.hc(0,"option",46),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function C(e,t){if(1&e){const e=n.ic();n.hc(0,"div",7),n.Oc(1," "),n.hc(2,"div",18),n.Oc(3," "),n.hc(4,"label",47),n.Oc(5," "),n.hc(6,"input",48),n.oc("change",(function(){n.Hc(e);return n.sc().updateBiometric()})),n.gc(),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()}if(2&e){const e=n.sc();n.Qb(6),n.zc("checked",e.biometric),n.Qb(1),n.Qc(" ",n.uc(8,2,e.biometricText)," ")}}function P(e,t){if(1&e){const e=n.ic();n.hc(0,"div",7),n.Oc(1," "),n.hc(2,"div",18),n.Oc(3," "),n.hc(4,"label",49),n.Oc(5," "),n.hc(6,"input",50),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().noAutoPromptBiometrics=t}))("change",(function(){n.Hc(e);return n.sc().updateNoAutoPromptBiometrics()})),n.gc(),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.gc()}if(2&e){const e=n.sc();n.Qb(6),n.zc("ngModel",e.noAutoPromptBiometrics)("disabled",!e.biometric),n.Qb(1),n.Qc(" ",n.uc(8,3,e.noAutoPromptBiometricsText)," ")}}function x(e,t){if(1&e&&(n.hc(0,"option",46),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function k(e,t){if(1&e){const e=n.ic();n.hc(0,"div",7),n.Oc(1," "),n.hc(2,"div",18),n.Oc(3," "),n.hc(4,"label",51),n.Oc(5," "),n.hc(6,"input",52),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().enableMinToTray=t}))("change",(function(){n.Hc(e);return n.sc().saveMinToTray()})),n.gc(),n.Oc(7),n.gc(),n.Oc(8," "),n.gc(),n.Oc(9," "),n.hc(10,"small",11),n.Oc(11),n.gc(),n.Oc(12," "),n.gc()}if(2&e){const e=n.sc();n.Qb(6),n.zc("ngModel",e.enableMinToTray),n.Qb(1),n.Qc(" ",e.enableMinToTrayText," "),n.Qb(4),n.Pc(e.enableMinToTrayDescText)}}function T(e,t){if(1&e){const e=n.ic();n.hc(0,"div",7),n.Oc(1," "),n.hc(2,"div",18),n.Oc(3," "),n.hc(4,"label",53),n.Oc(5," "),n.hc(6,"input",54),n.oc("ngModelChange",(function(t){n.Hc(e);return n.sc().alwaysShowDock=t}))("change",(function(){n.Hc(e);return n.sc().saveAlwaysShowDock()})),n.gc(),n.Oc(7),n.tc(8,"i18n"),n.gc(),n.Oc(9," "),n.gc(),n.Oc(10," "),n.hc(11,"small",11),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.gc()}if(2&e){const e=n.sc();n.Qb(6),n.zc("ngModel",e.alwaysShowDock),n.Qb(1),n.Qc(" ",n.uc(8,3,"alwaysShowDock")," "),n.Qb(5),n.Pc(n.uc(13,5,"alwaysShowDockDesc"))}}function I(e,t){if(1&e&&(n.hc(0,"option",46),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}function D(e,t){if(1&e&&(n.hc(0,"option",46),n.Oc(1),n.gc()),2&e){const e=t.$implicit;n.zc("ngValue",e.value),n.Qb(1),n.Pc(e.name)}}class A{constructor(e,t,i,n,s,o,c,a){this.i18nService=e,this.platformUtilsService=t,this.storageService=i,this.vaultTimeoutService=n,this.stateService=s,this.messagingService=o,this.userService=c,this.cryptoService=a,this.vaultTimeout=null,this.pin=null,this.disableFavicons=!1,this.enableBrowserIntegration=!1,this.enableBrowserIntegrationFingerprint=!1,this.enableMinToTray=!1,this.enableCloseToTray=!1,this.enableTray=!1,this.showMinToTray=!1,this.startToTray=!1,this.minimizeOnCopyToClipboard=!1,this.showAlwaysShowDock=!1,this.requireEnableTray=!1;const l=this.platformUtilsService.getDevice()===r.a.MacOsDesktop;this.requireEnableTray=this.platformUtilsService.getDevice()===r.a.LinuxDesktop;const d=l?"enableMenuBar":"enableTray";this.enableTrayText=this.i18nService.t(d),this.enableTrayDescText=this.i18nService.t(d+"Desc");const u=l?"enableMinToMenuBar":"enableMinToTray";this.enableMinToTrayText=this.i18nService.t(u),this.enableMinToTrayDescText=this.i18nService.t(u+"Desc");const h=l?"enableCloseToMenuBar":"enableCloseToTray";this.enableCloseToTrayText=this.i18nService.t(h),this.enableCloseToTrayDescText=this.i18nService.t(h+"Desc");const p=l?"startToMenuBar":"startToTray";this.startToTrayText=this.i18nService.t(p),this.startToTrayDescText=this.i18nService.t(p+"Desc"),this.vaultTimeouts=[{name:e.t("oneMinute"),value:1},{name:e.t("fiveMinutes"),value:5},{name:e.t("fifteenMinutes"),value:15},{name:e.t("thirtyMinutes"),value:30},{name:e.t("oneHour"),value:60},{name:e.t("fourHours"),value:240},{name:e.t("onIdle"),value:-4},{name:e.t("onSleep"),value:-3}],this.platformUtilsService.getDevice()!==r.a.LinuxDesktop&&this.vaultTimeouts.push({name:e.t("onLocked"),value:-2}),this.vaultTimeouts=this.vaultTimeouts.concat([{name:e.t("onRestart"),value:-1},{name:e.t("never"),value:null}]);const g=[];e.supportedTranslationLocales.forEach(t=>{let i=t;e.localeNames.has(t)&&(i+=" - "+e.localeNames.get(t)),g.push({name:i,value:t})}),g.sort(m.a.getSortFunction(e,"name")),g.splice(0,0,{name:e.t("default"),value:null}),this.localeOptions=g,this.themeOptions=[{name:e.t("default"),value:null},{name:e.t("light"),value:"light"},{name:e.t("dark"),value:"dark"},{name:"Nord",value:"nord"}],this.clearClipboardOptions=[{name:e.t("never"),value:null},{name:e.t("tenSeconds"),value:10},{name:e.t("twentySeconds"),value:20},{name:e.t("thirtySeconds"),value:30},{name:e.t("oneMinute"),value:60},{name:e.t("twoMinutes"),value:120},{name:e.t("fiveMinutes"),value:300}]}ngOnInit(){return O(this,void 0,void 0,(function*(){this.showMinToTray=this.platformUtilsService.getDevice()!==r.a.LinuxDesktop,this.vaultTimeout=yield this.storageService.get(g.a.vaultTimeoutKey),this.vaultTimeoutAction=yield this.storageService.get(g.a.vaultTimeoutActionKey);const e=yield this.vaultTimeoutService.isPinLockSet();this.pin=e[0]||e[1],this.disableFavicons=yield this.storageService.get(g.a.disableFaviconKey),this.enableBrowserIntegration=yield this.storageService.get(f.a.enableBrowserIntegration),this.enableBrowserIntegrationFingerprint=yield this.storageService.get(f.a.enableBrowserIntegrationFingerprint),this.enableMinToTray=yield this.storageService.get(f.a.enableMinimizeToTrayKey),this.enableCloseToTray=yield this.storageService.get(f.a.enableCloseToTrayKey),this.enableTray=yield this.storageService.get(f.a.enableTrayKey),this.startToTray=yield this.storageService.get(f.a.enableStartToTrayKey),this.locale=yield this.storageService.get(g.a.localeKey),this.theme=yield this.storageService.get(g.a.themeKey),this.clearClipboard=yield this.storageService.get(g.a.clearClipboardKey),this.minimizeOnCopyToClipboard=yield this.storageService.get(f.a.minimizeOnCopyToClipboardKey),this.supportsBiometric=yield this.platformUtilsService.supportsBiometric(),this.biometric=yield this.vaultTimeoutService.isBiometricLockSet(),this.biometricText=yield this.storageService.get(g.a.biometricText),this.noAutoPromptBiometrics=yield this.storageService.get(f.a.noAutoPromptBiometrics),this.noAutoPromptBiometricsText=yield this.storageService.get(f.a.noAutoPromptBiometricsText),this.alwaysShowDock=yield this.storageService.get(f.a.alwaysShowDock),this.showAlwaysShowDock=this.platformUtilsService.getDevice()===r.a.MacOsDesktop,this.openAtLogin=yield this.storageService.get(f.a.openAtLogin)}))}saveVaultTimeoutOptions(){return O(this,void 0,void 0,(function*(){if("logOut"===this.vaultTimeoutAction){if(!(yield this.platformUtilsService.showDialog(this.i18nService.t("vaultTimeoutLogOutConfirmation"),this.i18nService.t("vaultTimeoutLogOutConfirmationTitle"),this.i18nService.t("yes"),this.i18nService.t("cancel"),"warning")))return void(this.vaultTimeoutAction="lock")}yield this.vaultTimeoutService.setVaultTimeoutOptions(null!=this.vaultTimeout?this.vaultTimeout:null,this.vaultTimeoutAction)}))}updatePin(){return O(this,void 0,void 0,(function*(){if(this.pin){const e=document.createElement("div"),t=document.createElement("label");t.className="checkbox";const i=document.createElement("span"),n=document.createTextNode(this.i18nService.t("lockWithMasterPassOnRestart"));i.appendChild(n),t.innerHTML='<input type="checkbox" id="master-pass-restart" checked>',t.appendChild(i),e.innerHTML=`<div class="swal2-text">${this.i18nService.t("setYourPinCode")}</div><input type="text" class="swal2-input" id="pin-val" autocomplete="off" autocapitalize="none" autocorrect="none" spellcheck="false" inputmode="verbatim">`,e.querySelector("#pin-val").placeholder=this.i18nService.t("pin"),e.appendChild(t);let r=null,o=null;if((yield s.a.fire({heightAuto:!1,buttonsStyling:!1,html:e,showCancelButton:!0,cancelButtonText:this.i18nService.t("cancel"),showConfirmButton:!0,confirmButtonText:this.i18nService.t("submit")})).value&&(r=document.getElementById("pin-val").value,o=document.getElementById("master-pass-restart").checked),null!=r&&""!==r.trim()){const e=yield this.userService.getKdf(),t=yield this.userService.getKdfIterations(),i=yield this.userService.getEmail(),n=yield this.cryptoService.makePinKey(r,i,e,t),s=yield this.cryptoService.getKey(),c=yield this.cryptoService.encrypt(s.key,n);if(o){const e=yield this.cryptoService.encrypt(r);yield this.storageService.save(g.a.protectedPin,e.encryptedString),this.vaultTimeoutService.pinProtectedKey=c}else yield this.storageService.save(g.a.pinProtectedKey,c.encryptedString)}else this.pin=!1}this.pin||(yield this.cryptoService.clearPinProtectedKey(),yield this.vaultTimeoutService.clear())}))}updateBiometric(){return O(this,void 0,void 0,(function*(){const e=this.biometric;this.biometric?this.biometric=!1:this.supportsBiometric&&(this.biometric=yield this.platformUtilsService.authenticateBiometric()),this.biometric!==e&&(this.biometric?yield this.storageService.save(g.a.biometricUnlockKey,!0):(yield this.storageService.remove(g.a.biometricUnlockKey),yield this.storageService.remove(f.a.noAutoPromptBiometrics),this.noAutoPromptBiometrics=!1),this.vaultTimeoutService.biometricLocked=!1,yield this.cryptoService.toggleKey())}))}updateNoAutoPromptBiometrics(){return O(this,void 0,void 0,(function*(){this.biometric||(this.noAutoPromptBiometrics=!1),this.noAutoPromptBiometrics?yield this.storageService.save(f.a.noAutoPromptBiometrics,!0):yield this.storageService.remove(f.a.noAutoPromptBiometrics)}))}saveFavicons(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(g.a.disableFaviconKey,this.disableFavicons),yield this.stateService.save(g.a.disableFaviconKey,this.disableFavicons),this.messagingService.send("refreshCiphers")}))}saveMinToTray(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(f.a.enableMinimizeToTrayKey,this.enableMinToTray)}))}saveCloseToTray(){return O(this,void 0,void 0,(function*(){this.requireEnableTray&&(this.enableTray=!0,yield this.storageService.save(f.a.enableTrayKey,this.enableTray)),yield this.storageService.save(f.a.enableCloseToTrayKey,this.enableCloseToTray)}))}saveTray(){return O(this,void 0,void 0,(function*(){if(!this.requireEnableTray||this.enableTray||!this.startToTray&&!this.enableCloseToTray)yield this.storageService.save(f.a.enableTrayKey,this.enableTray),this.messagingService.send(this.enableTray?"showTray":"removeTray");else{(yield this.platformUtilsService.showDialog(this.i18nService.t("confirmTrayDesc"),this.i18nService.t("confirmTrayTitle"),this.i18nService.t("yes"),this.i18nService.t("no"),"warning"))?(this.startToTray=!1,yield this.storageService.save(f.a.enableStartToTrayKey,this.startToTray),this.enableCloseToTray=!1,yield this.storageService.save(f.a.enableCloseToTrayKey,this.enableCloseToTray)):this.enableTray=!0}}))}saveStartToTray(){return O(this,void 0,void 0,(function*(){this.requireEnableTray&&(this.enableTray=!0,yield this.storageService.save(f.a.enableTrayKey,this.enableTray)),yield this.storageService.save(f.a.enableStartToTrayKey,this.startToTray)}))}saveLocale(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(g.a.localeKey,this.locale)}))}saveTheme(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(g.a.themeKey,this.theme),window.setTimeout(()=>window.location.reload(),200)}))}saveMinOnCopyToClipboard(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(f.a.minimizeOnCopyToClipboardKey,this.minimizeOnCopyToClipboard)}))}saveClearClipboard(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(g.a.clearClipboardKey,this.clearClipboard)}))}saveAlwaysShowDock(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(f.a.alwaysShowDock,this.alwaysShowDock)}))}saveOpenAtLogin(){return O(this,void 0,void 0,(function*(){this.storageService.save(f.a.openAtLogin,this.openAtLogin),this.messagingService.send(this.openAtLogin?"addOpenAtLogin":"removeOpenAtLogin")}))}saveBrowserIntegration(){return O(this,void 0,void 0,(function*(){return"darwin"!==e.platform||this.platformUtilsService.isMacAppStore()?Object(y.c)()?(yield this.platformUtilsService.showDialog(this.i18nService.t("browserIntegrationWindowsStoreDesc"),this.i18nService.t("browserIntegrationWindowsStoreTitle"),this.i18nService.t("ok"),null,"warning"),void(this.enableBrowserIntegration=!1)):(yield this.storageService.save(f.a.enableBrowserIntegration,this.enableBrowserIntegration),this.messagingService.send(this.enableBrowserIntegration?"enableBrowserIntegration":"disableBrowserIntegration"),void(this.enableBrowserIntegration||(this.enableBrowserIntegrationFingerprint=!1,this.saveBrowserIntegrationFingerprint()))):(yield this.platformUtilsService.showDialog(this.i18nService.t("browserIntegrationMasOnlyDesc"),this.i18nService.t("browserIntegrationMasOnlyTitle"),this.i18nService.t("ok"),null,"warning"),void(this.enableBrowserIntegration=!1))}))}saveBrowserIntegrationFingerprint(){return O(this,void 0,void 0,(function*(){yield this.storageService.save(f.a.enableBrowserIntegrationFingerprint,this.enableBrowserIntegrationFingerprint)}))}}A.ɵfac=function(e){return new(e||A)(n.cc(c.a),n.cc(l.a),n.cc(u.a),n.cc(p.a),n.cc(d.a),n.cc(a.a),n.cc(h.a),n.cc(o.a))},A.ɵcmp=n.Wb({type:A,selectors:[["app-settings"]],decls:279,vars:114,consts:[["tabindex","-1","role","dialog","aria-modal","true",1,"modal","fade"],["role","document",1,"modal-dialog"],[1,"modal-content"],[1,"modal-body","form"],[1,"box"],[1,"box-header"],[1,"box-content","box-content-padded"],[1,"form-group"],["for","vaultTimeouts"],["id","vaultTimeouts","name","VaultTimeouts",3,"ngModel","ngModelChange","change"],[3,"ngValue",4,"ngFor","ngForOf"],[1,"help-block"],[1,"radio","radio-mt-2"],["for","vaultTimeoutActionLock"],["type","radio","name","VaultTimeoutAction","id","vaultTimeoutActionLock","value","lock",3,"ngModel","ngModelChange","change"],[1,"radio"],["for","vaultTimeoutActionLogOut"],["type","radio","name","VaultTimeoutAction","id","vaultTimeoutActionLogOut","value","logOut",3,"ngModel","ngModelChange","change"],[1,"checkbox"],["for","pin"],["id","pin","type","checkbox","name","PIN",3,"ngModel","ngModelChange","change"],["class","form-group",4,"ngIf"],["for","clearClipboard"],["id","clearClipboard","name","ClearClipboard",3,"ngModel","ngModelChange","change"],["for","minimizeOnCopyToClipboard"],["id","minimizeOnCopyToClipboard","type","checkbox","name","MinimizeOnCopyToClipboard",3,"ngModel","ngModelChange","change"],["for","disableFavicons"],["id","disableFavicons","type","checkbox","name","DisableFavicons",3,"ngModel","ngModelChange","change"],["for","enableBrowserIntegration"],["id","enableBrowserIntegration","type","checkbox","name","EnableBrowserIntegration",3,"ngModel","ngModelChange","change"],["for","enableBrowserIntegrationFingerprint"],["id","enableBrowserIntegrationFingerprint","type","checkbox","name","EnableBrowserIntegrationFingerprint",3,"ngModel","disabled","ngModelChange","change"],["for","enableTray"],["id","enableTray","type","checkbox","name","EnableTray",3,"ngModel","ngModelChange","change"],["for","enableCloseToTray"],["id","enableCloseToTray","type","checkbox","name","EnableCloseToTray",3,"ngModel","ngModelChange","change"],["for","startToTray"],["id","startToTray","type","checkbox","name","StartToTray",3,"ngModel","ngModelChange","change"],["for","openAtLogin"],["id","openAtLogin","type","checkbox","name","OpenAtLogin",3,"ngModel","ngModelChange","change"],["for","theme"],["id","theme","name","Theme",3,"ngModel","ngModelChange","change"],["for","locale"],["id","locale","name","Locale",3,"ngModel","ngModelChange","change"],[1,"modal-footer"],["type","button","data-dismiss","modal"],[3,"ngValue"],["for","biometric"],["id","biometric","type","checkbox","name","biometric",3,"checked","change"],["for","noAutoPromptBiometrics"],["id","noAutoPromptBiometrics","type","checkbox","name","noAutoPromptBiometrics",3,"ngModel","disabled","ngModelChange","change"],["for","enableMinToTray"],["id","enableMinToTray","type","checkbox","name","EnableMinToTray",3,"ngModel","ngModelChange","change"],["for","alwaysShowDock"],["id","alwaysShowDock","type","checkbox","name","AlwaysShowDock",3,"ngModel","ngModelChange","change"]],template:function(e,t){1&e&&(n.hc(0,"div",0),n.tc(1,"i18n"),n.Oc(2," "),n.hc(3,"div",1),n.Oc(4," "),n.hc(5,"div",2),n.Oc(6," "),n.hc(7,"div",3),n.Oc(8," "),n.hc(9,"div",4),n.Oc(10," "),n.hc(11,"div",5),n.Oc(12),n.tc(13,"i18n"),n.gc(),n.Oc(14," "),n.hc(15,"div",6),n.Oc(16," "),n.hc(17,"div",7),n.Oc(18," "),n.hc(19,"label",8),n.Oc(20),n.tc(21,"i18n"),n.gc(),n.Oc(22," "),n.hc(23,"select",9),n.oc("ngModelChange",(function(e){return t.vaultTimeout=e}))("change",(function(){return t.saveVaultTimeoutOptions()})),n.Oc(24," "),n.Mc(25,S,2,2,"option",10),n.Oc(26," "),n.gc(),n.Oc(27," "),n.hc(28,"small",11),n.Oc(29),n.tc(30,"i18n"),n.gc(),n.Oc(31," "),n.gc(),n.Oc(32," "),n.hc(33,"div",7),n.Oc(34," "),n.hc(35,"label"),n.Oc(36),n.tc(37,"i18n"),n.gc(),n.Oc(38," "),n.hc(39,"div",12),n.Oc(40," "),n.hc(41,"label",13),n.Oc(42," "),n.hc(43,"input",14),n.oc("ngModelChange",(function(e){return t.vaultTimeoutAction=e}))("change",(function(){return t.saveVaultTimeoutOptions()})),n.gc(),n.Oc(44),n.tc(45,"i18n"),n.gc(),n.Oc(46," "),n.gc(),n.Oc(47," "),n.hc(48,"small",11),n.Oc(49),n.tc(50,"i18n"),n.gc(),n.Oc(51," "),n.hc(52,"div",15),n.Oc(53," "),n.hc(54,"label",16),n.Oc(55," "),n.hc(56,"input",17),n.oc("ngModelChange",(function(e){return t.vaultTimeoutAction=e}))("change",(function(){return t.saveVaultTimeoutOptions()})),n.gc(),n.Oc(57),n.tc(58,"i18n"),n.gc(),n.Oc(59," "),n.gc(),n.Oc(60," "),n.hc(61,"small",11),n.Oc(62),n.tc(63,"i18n"),n.gc(),n.Oc(64," "),n.gc(),n.Oc(65," "),n.hc(66,"div",7),n.Oc(67," "),n.hc(68,"div",18),n.Oc(69," "),n.hc(70,"label",19),n.Oc(71," "),n.hc(72,"input",20),n.oc("ngModelChange",(function(e){return t.pin=e}))("change",(function(){return t.updatePin()})),n.gc(),n.Oc(73),n.tc(74,"i18n"),n.gc(),n.Oc(75," "),n.gc(),n.Oc(76," "),n.gc(),n.Oc(77," "),n.Mc(78,C,11,4,"div",21),n.Oc(79," "),n.Mc(80,P,11,5,"div",21),n.Oc(81," "),n.gc(),n.Oc(82," "),n.gc(),n.Oc(83," "),n.hc(84,"div",4),n.Oc(85," "),n.hc(86,"div",5),n.Oc(87),n.tc(88,"i18n"),n.gc(),n.Oc(89," "),n.hc(90,"div",6),n.Oc(91," "),n.hc(92,"div",7),n.Oc(93," "),n.hc(94,"label",22),n.Oc(95),n.tc(96,"i18n"),n.gc(),n.Oc(97," "),n.hc(98,"select",23),n.oc("ngModelChange",(function(e){return t.clearClipboard=e}))("change",(function(){return t.saveClearClipboard()})),n.Oc(99," "),n.Mc(100,x,2,2,"option",10),n.Oc(101," "),n.gc(),n.Oc(102," "),n.hc(103,"small",11),n.Oc(104),n.tc(105,"i18n"),n.gc(),n.Oc(106," "),n.gc(),n.Oc(107," "),n.hc(108,"div",7),n.Oc(109," "),n.hc(110,"div",18),n.Oc(111," "),n.hc(112,"label",24),n.Oc(113," "),n.hc(114,"input",25),n.oc("ngModelChange",(function(e){return t.minimizeOnCopyToClipboard=e}))("change",(function(){return t.saveMinOnCopyToClipboard()})),n.gc(),n.Oc(115),n.tc(116,"i18n"),n.gc(),n.Oc(117," "),n.gc(),n.Oc(118," "),n.hc(119,"small",11),n.Oc(120),n.tc(121,"i18n"),n.gc(),n.Oc(122," "),n.gc(),n.Oc(123," "),n.hc(124,"div",7),n.Oc(125," "),n.hc(126,"div",18),n.Oc(127," "),n.hc(128,"label",26),n.Oc(129," "),n.hc(130,"input",27),n.oc("ngModelChange",(function(e){return t.disableFavicons=e}))("change",(function(){return t.saveFavicons()})),n.gc(),n.Oc(131),n.tc(132,"i18n"),n.gc(),n.Oc(133," "),n.gc(),n.Oc(134," "),n.hc(135,"small",11),n.Oc(136),n.tc(137,"i18n"),n.gc(),n.Oc(138," "),n.gc(),n.Oc(139," "),n.hc(140,"div",7),n.Oc(141," "),n.hc(142,"div",18),n.Oc(143," "),n.hc(144,"label",28),n.Oc(145," "),n.hc(146,"input",29),n.oc("ngModelChange",(function(e){return t.enableBrowserIntegration=e}))("change",(function(){return t.saveBrowserIntegration()})),n.gc(),n.Oc(147),n.tc(148,"i18n"),n.gc(),n.Oc(149," "),n.gc(),n.Oc(150," "),n.hc(151,"small",11),n.Oc(152),n.tc(153,"i18n"),n.gc(),n.Oc(154," "),n.gc(),n.Oc(155," "),n.hc(156,"div",7),n.Oc(157," "),n.hc(158,"div",18),n.Oc(159," "),n.hc(160,"label",30),n.Oc(161," "),n.hc(162,"input",31),n.oc("ngModelChange",(function(e){return t.enableBrowserIntegrationFingerprint=e}))("change",(function(){return t.saveBrowserIntegrationFingerprint()})),n.gc(),n.Oc(163),n.tc(164,"i18n"),n.gc(),n.Oc(165," "),n.gc(),n.Oc(166," "),n.hc(167,"small",11),n.Oc(168),n.tc(169,"i18n"),n.gc(),n.Oc(170," "),n.gc(),n.Oc(171," "),n.hc(172,"div",7),n.Oc(173," "),n.hc(174,"div",18),n.Oc(175," "),n.hc(176,"label",32),n.Oc(177," "),n.hc(178,"input",33),n.oc("ngModelChange",(function(e){return t.enableTray=e}))("change",(function(){return t.saveTray()})),n.gc(),n.Oc(179),n.gc(),n.Oc(180," "),n.gc(),n.Oc(181," "),n.hc(182,"small",11),n.Oc(183),n.gc(),n.Oc(184," "),n.gc(),n.Oc(185," "),n.Mc(186,k,13,3,"div",21),n.Oc(187," "),n.hc(188,"div",7),n.Oc(189," "),n.hc(190,"div",18),n.Oc(191," "),n.hc(192,"label",34),n.Oc(193," "),n.hc(194,"input",35),n.oc("ngModelChange",(function(e){return t.enableCloseToTray=e}))("change",(function(){return t.saveCloseToTray()})),n.gc(),n.Oc(195),n.gc(),n.Oc(196," "),n.gc(),n.Oc(197," "),n.hc(198,"small",11),n.Oc(199),n.gc(),n.Oc(200," "),n.gc(),n.Oc(201," "),n.hc(202,"div",7),n.Oc(203," "),n.hc(204,"div",18),n.Oc(205," "),n.hc(206,"label",36),n.Oc(207," "),n.hc(208,"input",37),n.oc("ngModelChange",(function(e){return t.startToTray=e}))("change",(function(){return t.saveStartToTray()})),n.gc(),n.Oc(209),n.gc(),n.Oc(210," "),n.gc(),n.Oc(211," "),n.hc(212,"small",11),n.Oc(213),n.gc(),n.Oc(214," "),n.gc(),n.Oc(215," "),n.hc(216,"div",7),n.Oc(217," "),n.hc(218,"div",18),n.Oc(219," "),n.hc(220,"label",38),n.Oc(221," "),n.hc(222,"input",39),n.oc("ngModelChange",(function(e){return t.openAtLogin=e}))("change",(function(){return t.saveOpenAtLogin()})),n.gc(),n.Oc(223),n.tc(224,"i18n"),n.gc(),n.Oc(225," "),n.gc(),n.Oc(226," "),n.hc(227,"small",11),n.Oc(228),n.tc(229,"i18n"),n.gc(),n.Oc(230," "),n.gc(),n.Oc(231," "),n.Mc(232,T,15,7,"div",21),n.Oc(233," "),n.hc(234,"div",7),n.Oc(235," "),n.hc(236,"label",40),n.Oc(237),n.tc(238,"i18n"),n.gc(),n.Oc(239," "),n.hc(240,"select",41),n.oc("ngModelChange",(function(e){return t.theme=e}))("change",(function(){return t.saveTheme()})),n.Oc(241," "),n.Mc(242,I,2,2,"option",10),n.Oc(243," "),n.gc(),n.Oc(244," "),n.hc(245,"small",11),n.Oc(246),n.tc(247,"i18n"),n.gc(),n.Oc(248," "),n.gc(),n.Oc(249," "),n.hc(250,"div",7),n.Oc(251," "),n.hc(252,"label",42),n.Oc(253),n.tc(254,"i18n"),n.gc(),n.Oc(255," "),n.hc(256,"select",43),n.oc("ngModelChange",(function(e){return t.locale=e}))("change",(function(){return t.saveLocale()})),n.Oc(257," "),n.Mc(258,D,2,2,"option",10),n.Oc(259," "),n.gc(),n.Oc(260," "),n.hc(261,"small",11),n.Oc(262),n.tc(263,"i18n"),n.gc(),n.Oc(264," "),n.gc(),n.Oc(265," "),n.gc(),n.Oc(266," "),n.gc(),n.Oc(267," "),n.gc(),n.Oc(268," "),n.hc(269,"div",44),n.Oc(270," "),n.hc(271,"button",45),n.Oc(272),n.tc(273,"i18n"),n.gc(),n.Oc(274," "),n.gc(),n.Oc(275," "),n.gc(),n.Oc(276," "),n.gc(),n.Oc(277," "),n.gc(),n.Oc(278," ")),2&e&&(n.Rb("aria-label",n.uc(1,58,"settings")),n.Qb(12),n.Qc(" ",n.uc(13,60,"security")," "),n.Qb(8),n.Pc(n.uc(21,62,"vaultTimeout")),n.Qb(3),n.zc("ngModel",t.vaultTimeout),n.Qb(2),n.zc("ngForOf",t.vaultTimeouts),n.Qb(4),n.Pc(n.uc(30,64,"vaultTimeoutDesc")),n.Qb(7),n.Pc(n.uc(37,66,"vaultTimeoutAction")),n.Qb(7),n.zc("ngModel",t.vaultTimeoutAction),n.Qb(1),n.Qc(" ",n.uc(45,68,"lock")," "),n.Qb(5),n.Pc(n.uc(50,70,"vaultTimeoutActionLockDesc")),n.Qb(7),n.zc("ngModel",t.vaultTimeoutAction),n.Qb(1),n.Qc(" ",n.uc(58,72,"logOut")," "),n.Qb(5),n.Pc(n.uc(63,74,"vaultTimeoutActionLogOutDesc")),n.Qb(10),n.zc("ngModel",t.pin),n.Qb(1),n.Qc(" ",n.uc(74,76,"unlockWithPin")," "),n.Qb(5),n.zc("ngIf",t.supportsBiometric),n.Qb(2),n.zc("ngIf",t.supportsBiometric),n.Qb(7),n.Qc(" ",n.uc(88,78,"options")," "),n.Qb(8),n.Pc(n.uc(96,80,"clearClipboard")),n.Qb(3),n.zc("ngModel",t.clearClipboard),n.Qb(2),n.zc("ngForOf",t.clearClipboardOptions),n.Qb(4),n.Pc(n.uc(105,82,"clearClipboardDesc")),n.Qb(10),n.zc("ngModel",t.minimizeOnCopyToClipboard),n.Qb(1),n.Qc(" ",n.uc(116,84,"minimizeOnCopyToClipboard")," "),n.Qb(5),n.Pc(n.uc(121,86,"minimizeOnCopyToClipboardDesc")),n.Qb(10),n.zc("ngModel",t.disableFavicons),n.Qb(1),n.Qc(" ",n.uc(132,88,"disableFavicon")," "),n.Qb(5),n.Pc(n.uc(137,90,"disableFaviconDesc")),n.Qb(10),n.zc("ngModel",t.enableBrowserIntegration),n.Qb(1),n.Qc(" ",n.uc(148,92,"enableBrowserIntegration")," "),n.Qb(5),n.Pc(n.uc(153,94,"enableBrowserIntegrationDesc")),n.Qb(10),n.zc("ngModel",t.enableBrowserIntegrationFingerprint)("disabled",!t.enableBrowserIntegration),n.Qb(1),n.Qc(" ",n.uc(164,96,"enableBrowserIntegrationFingerprint")," "),n.Qb(5),n.Pc(n.uc(169,98,"enableBrowserIntegrationFingerprintDesc")),n.Qb(10),n.zc("ngModel",t.enableTray),n.Qb(1),n.Qc(" ",t.enableTrayText," "),n.Qb(4),n.Pc(t.enableTrayDescText),n.Qb(3),n.zc("ngIf",t.showMinToTray),n.Qb(8),n.zc("ngModel",t.enableCloseToTray),n.Qb(1),n.Qc(" ",t.enableCloseToTrayText," "),n.Qb(4),n.Pc(t.enableCloseToTrayDescText),n.Qb(9),n.zc("ngModel",t.startToTray),n.Qb(1),n.Qc(" ",t.startToTrayText," "),n.Qb(4),n.Pc(t.startToTrayDescText),n.Qb(9),n.zc("ngModel",t.openAtLogin),n.Qb(1),n.Qc(" ",n.uc(224,100,"openAtLogin")," "),n.Qb(5),n.Pc(n.uc(229,102,"openAtLoginDesc")),n.Qb(4),n.zc("ngIf",t.showAlwaysShowDock),n.Qb(5),n.Pc(n.uc(238,104,"theme")),n.Qb(3),n.zc("ngModel",t.theme),n.Qb(2),n.zc("ngForOf",t.themeOptions),n.Qb(4),n.Pc(n.uc(247,106,"themeDesc")),n.Qb(7),n.Pc(n.uc(254,108,"language")),n.Qb(3),n.zc("ngModel",t.locale),n.Qb(2),n.zc("ngForOf",t.localeOptions),n.Qb(4),n.Pc(n.uc(263,110,"languageDesc")),n.Qb(10),n.Pc(n.uc(273,112,"close")))},directives:[v.o,v.f,v.i,b.j,v.l,v.b,v.a,b.k,v.j,v.q],pipes:[w.a],encapsulation:2}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(A,[{type:n.l,args:[{selector:"app-settings",templateUrl:"settings.component.html"}]}],(function(){return[{type:c.a},{type:l.a},{type:u.a},{type:p.a},{type:d.a},{type:a.a},{type:h.a},{type:o.a}]}),null)}).call(this,i(103))},32:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(){this.environmentUrlsKey=n.environmentUrlsKey,this.disableGaKey=n.disableGaKey,this.disableAddLoginNotificationKey=n.disableAddLoginNotificationKey,this.disableContextMenuItemKey=n.disableContextMenuItemKey,this.disableFaviconKey=n.disableFaviconKey,this.disableBadgeCounterKey=n.disableBadgeCounterKey,this.disableAutoTotpCopyKey=n.disableAutoTotpCopyKey,this.enableAutoFillOnPageLoadKey=n.enableAutoFillOnPageLoadKey,this.autoFillOnPageLoadDefaultKey=n.autoFillOnPageLoadDefaultKey,this.vaultTimeoutKey=n.vaultTimeoutKey,this.vaultTimeoutActionKey=n.vaultTimeoutActionKey,this.lastActiveKey=n.lastActiveKey,this.neverDomainsKey=n.neverDomainsKey,this.installedVersionKey=n.installedVersionKey,this.localeKey=n.localeKey,this.themeKey=n.themeKey,this.collapsedGroupingsKey=n.collapsedGroupingsKey,this.autoConfirmFingerprints=n.autoConfirmFingerprints,this.dontShowCardsCurrentTab=n.dontShowCardsCurrentTab,this.dontShowIdentitiesCurrentTab=n.dontShowIdentitiesCurrentTab,this.defaultUriMatch=n.defaultUriMatch,this.pinProtectedKey=n.pinProtectedKey,this.protectedPin=n.protectedPin,this.clearClipboardKey=n.clearClipboardKey,this.eventCollectionKey=n.eventCollectionKey,this.ssoCodeVerifierKey=n.ssoCodeVerifierKey,this.ssoStateKey=n.ssoStateKey,this.biometricUnlockKey=n.biometricUnlockKey,this.biometricText=n.biometricText,this.biometricAwaitingAcceptance=n.biometricAwaitingAcceptance,this.biometricFingerprintValidated=n.biometricFingerprintValidated}}n.environmentUrlsKey="environmentUrls",n.disableGaKey="disableGa",n.disableAddLoginNotificationKey="disableAddLoginNotification",n.disableChangedPasswordNotificationKey="disableChangedPasswordNotification",n.disableContextMenuItemKey="disableContextMenuItem",n.disableFaviconKey="disableFavicon",n.disableBadgeCounterKey="disableBadgeCounter",n.disableAutoTotpCopyKey="disableAutoTotpCopy",n.enableAutoFillOnPageLoadKey="enableAutoFillOnPageLoad",n.autoFillOnPageLoadDefaultKey="autoFillOnPageLoadDefault",n.vaultTimeoutKey="lockOption",n.vaultTimeoutActionKey="vaultTimeoutAction",n.lastActiveKey="lastActive",n.neverDomainsKey="neverDomains",n.installedVersionKey="installedVersion",n.localeKey="locale",n.themeKey="theme",n.collapsedGroupingsKey="collapsedGroupings",n.autoConfirmFingerprints="autoConfirmFingerprints",n.dontShowCardsCurrentTab="dontShowCardsCurrentTab",n.dontShowIdentitiesCurrentTab="dontShowIdentitiesCurrentTab",n.defaultUriMatch="defaultUriMatch",n.pinProtectedKey="pinProtectedKey",n.protectedPin="protectedPin",n.clearClipboardKey="clearClipboardKey",n.eventCollectionKey="eventCollection",n.ssoCodeVerifierKey="ssoCodeVerifier",n.ssoStateKey="ssoState",n.biometricUnlockKey="biometric",n.biometricText="biometricText",n.biometricAwaitingAcceptance="biometricAwaitingAcceptance",n.biometricFingerprintValidated="biometricFingerprintValidated"},34:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},365:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.id=null,this.url=null,this.size=null,this.sizeName=null,this.fileName=null,this.key=null,e&&(this.id=e.id,this.url=e.url,this.size=e.size,this.sizeName=e.sizeName)}get fileSize(){try{if(null!=this.size)return parseInt(this.size,null)}catch(e){}return 0}}},377:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){super(e),null!=e&&(this.cardholderName=this.getResponseProperty("CardholderName"),this.brand=this.getResponseProperty("Brand"),this.number=this.getResponseProperty("Number"),this.expMonth=this.getResponseProperty("ExpMonth"),this.expYear=this.getResponseProperty("ExpYear"),this.code=this.getResponseProperty("Code"))}}},378:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){super(e),null!=e&&(this.type=this.getResponseProperty("Type"),this.name=this.getResponseProperty("Name"),this.value=this.getResponseProperty("Value"))}}},379:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){super(e),null!=e&&(this.title=this.getResponseProperty("Title"),this.firstName=this.getResponseProperty("FirstName"),this.middleName=this.getResponseProperty("MiddleName"),this.lastName=this.getResponseProperty("LastName"),this.address1=this.getResponseProperty("Address1"),this.address2=this.getResponseProperty("Address2"),this.address3=this.getResponseProperty("Address3"),this.city=this.getResponseProperty("City"),this.state=this.getResponseProperty("State"),this.postalCode=this.getResponseProperty("PostalCode"),this.country=this.getResponseProperty("Country"),this.company=this.getResponseProperty("Company"),this.email=this.getResponseProperty("Email"),this.phone=this.getResponseProperty("Phone"),this.ssn=this.getResponseProperty("SSN"),this.username=this.getResponseProperty("Username"),this.passportNumber=this.getResponseProperty("PassportNumber"),this.licenseNumber=this.getResponseProperty("LicenseNumber"))}}},38:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},380:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(23),s=i(381);class r extends n.a{constructor(e=null){if(super(e),null==e)return;this.username=this.getResponseProperty("Username"),this.password=this.getResponseProperty("Password"),this.passwordRevisionDate=this.getResponseProperty("PasswordRevisionDate"),this.totp=this.getResponseProperty("Totp"),this.autofillOnPageLoad=this.getResponseProperty("AutofillOnPageLoad");const t=this.getResponseProperty("Uris");null!=t&&(this.uris=t.map(e=>new s.a(e)))}}},381:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){if(super(e),this.match=null,null==e)return;this.uri=this.getResponseProperty("Uri");const t=this.getResponseProperty("Match");this.match=null!=t?t:null}}},382:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(23);class s extends n.a{constructor(e=null){super(e),null!=e&&(this.type=this.getResponseProperty("Type"))}}},383:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){null!=e&&(this.id=e.id,this.url=e.url,this.fileName=e.fileName,this.key=e.key,this.size=e.size,this.sizeName=e.sizeName)}}},384:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){null!=e&&(this.cardholderName=e.cardholderName,this.brand=e.brand,this.number=e.number,this.expMonth=e.expMonth,this.expYear=e.expYear,this.code=e.code)}}},385:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){null!=e&&(this.type=e.type,this.name=e.name,this.value=e.value)}}},386:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){null!=e&&(this.title=e.title,this.firstName=e.firstName,this.middleName=e.middleName,this.lastName=e.lastName,this.address1=e.address1,this.address2=e.address2,this.address3=e.address3,this.city=e.city,this.state=e.state,this.postalCode=e.postalCode,this.country=e.country,this.company=e.company,this.email=e.email,this.phone=e.phone,this.ssn=e.ssn,this.username=e.username,this.passportNumber=e.passportNumber,this.licenseNumber=e.licenseNumber)}}},387:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(388);class s{constructor(e){null!=e&&(this.username=e.username,this.password=e.password,this.passwordRevisionDate=e.passwordRevisionDate,this.totp=e.totp,this.autofillOnPageLoad=e.autofillOnPageLoad,e.uris&&(this.uris=e.uris.map(e=>new n.a(e))))}}},388:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.match=null,null!=e&&(this.uri=e.uri,this.match=e.match)}}},389:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){null!=e&&(this.password=e.password,this.lastUsedDate=e.lastUsedDate)}}},390:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){null!=e&&(this.type=e.type)}}},391:function(e,t,i){"use strict";i.d(t,"a",(function(){return l}));var n=i(383),s=i(365),r=i(68),o=i(134),c=i(20),a=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class l extends r.a{constructor(e,t=!1){super(),null!=e&&(this.size=e.size,this.buildDomainModel(this,e,{id:null,url:null,sizeName:null,fileName:null,key:null},t,["id","url","sizeName"]))}decrypt(e,t){return a(this,void 0,void 0,(function*(){const i=yield this.decryptObj(new s.a(this),{fileName:null},e,t);if(null!=this.key){let n;const s=c.a.global.bitwardenContainerService;if(!s)throw new Error("global bitwardenContainerService not initialized.");n=s.getCryptoService();try{const s=yield n.getOrgKey(e),r=yield n.decryptToBytes(this.key,null!=s?s:t);i.key=new o.a(r)}catch(e){}}return i}))}toAttachmentData(){const e=new n.a;return e.size=this.size,this.buildDataModel(this,e,{id:null,url:null,sizeName:null,fileName:null,key:null},["id","url","sizeName"]),e}}},392:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(389),s=i(68),r=i(237);class o extends s.a{constructor(e,t=!1){super(),null!=e&&(this.buildDomainModel(this,e,{password:null},t),this.lastUsedDate=new Date(e.lastUsedDate))}decrypt(e,t){return this.decryptObj(new r.a(this),{password:null},e,t)}toPasswordHistoryData(){const e=new n.a;return e.lastUsedDate=this.lastUsedDate.toISOString(),this.buildDataModel(this,e,{password:null}),e}}},41:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},43:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(64),s=i(20),r=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class o{constructor(e,t,i,s){if(null!=t){const n=e;return this.encryptedString=null!=i?n+"."+i+"|"+t:n+"."+t,null!=s&&(this.encryptedString+="|"+s),this.encryptionType=n,this.data=t,this.iv=i,void(this.mac=s)}if(this.encryptedString=e,!this.encryptedString)return;const r=this.encryptedString.split(".");let o=null;if(2===r.length)try{this.encryptionType=parseInt(r[0],null),o=r[1].split("|")}catch(e){return}else o=this.encryptedString.split("|"),this.encryptionType=3===o.length?n.a.AesCbc128_HmacSha256_B64:n.a.AesCbc256_B64;switch(this.encryptionType){case n.a.AesCbc128_HmacSha256_B64:case n.a.AesCbc256_HmacSha256_B64:if(3!==o.length)return;this.iv=o[0],this.data=o[1],this.mac=o[2];break;case n.a.AesCbc256_B64:if(2!==o.length)return;this.iv=o[0],this.data=o[1];break;case n.a.Rsa2048_OaepSha256_B64:case n.a.Rsa2048_OaepSha1_B64:if(1!==o.length)return;this.data=o[0];break;default:return}}decrypt(e,t=null){return r(this,void 0,void 0,(function*(){if(null!=this.decryptedValue)return this.decryptedValue;let i;const n=s.a.global.bitwardenContainerService;if(!n)throw new Error("global bitwardenContainerService not initialized.");i=n.getCryptoService();try{null==t&&(t=yield i.getOrgKey(e)),this.decryptedValue=yield i.decryptToUtf8(this,t)}catch(e){this.decryptedValue="[error: cannot decrypt]"}return this.decryptedValue}))}}},442:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(20),s=i(288),r=i(289);class o{constructor(e){this.id=null,this.accessId=null,this.name=null,this.notes=null,this.type=null,this.text=new r.a,this.file=new s.a,this.maxAccessCount=null,this.accessCount=0,this.revisionDate=null,this.deletionDate=null,this.expirationDate=null,this.password=null,this.disabled=!1,this.hideEmail=!1,e&&(this.id=e.id,this.accessId=e.accessId,this.type=e.type,this.maxAccessCount=e.maxAccessCount,this.accessCount=e.accessCount,this.revisionDate=e.revisionDate,this.deletionDate=e.deletionDate,this.expirationDate=e.expirationDate,this.disabled=e.disabled,this.password=e.password,this.hideEmail=e.hideEmail)}get urlB64Key(){return n.a.fromBufferToUrlB64(this.key)}get maxAccessCountReached(){return null!=this.maxAccessCount&&this.accessCount>=this.maxAccessCount}get expired(){return null!=this.expirationDate&&this.expirationDate<=new Date}get pendingDelete(){return this.deletionDate<=new Date}}},45:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},452:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(68),s=i(288),r=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class o extends n.a{constructor(e,t=!1){super(),null!=e&&(this.size=e.size,this.buildDomainModel(this,e,{id:null,sizeName:null,fileName:null},t,["id","sizeName"]))}decrypt(e){return r(this,void 0,void 0,(function*(){return yield this.decryptObj(new s.a(this),{fileName:null},null,e)}))}}},453:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(68),s=i(289);class r extends n.a{constructor(e,t=!1){super(),null!=e&&(this.hidden=e.hidden,this.buildDomainModel(this,e,{text:null},t,[]))}decrypt(e){return this.decryptObj(new s.a(this),{text:null},null,e)}}},46:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}},462:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(833);class s{static getApplicationVersion(){return n.version}static createNewTab(e,t=!1){window.open(e,"_blank")}static downloadFile(e,t,i,n){console.log("this.isSafariApi",this.isSafariApi);const s=new Blob([t],i);if(navigator.msSaveOrOpenBlob)navigator.msSaveBlob(s,n);else{const t=e.document.createElement("a");t.href=URL.createObjectURL(s),t.download=n,e.document.body.appendChild(t),t.click(),e.document.body.removeChild(t)}}}s.isSafariApi=!0===window.safariAppExtension},463:function(e,t,i){"use strict";i.d(t,"a",(function(){return d}));var n=i(88),s=i(20),r=i(442),o=i(68),c=i(452),a=i(453),l=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class d extends o.a{constructor(e,t=!1){if(super(),null!=e)switch(this.buildDomainModel(this,e,{id:null,accessId:null,userId:null,name:null,notes:null,key:null},t,["id","accessId","userId"]),this.type=e.type,this.maxAccessCount=e.maxAccessCount,this.accessCount=e.accessCount,this.password=e.password,this.disabled=e.disabled,this.revisionDate=null!=e.revisionDate?new Date(e.revisionDate):null,this.deletionDate=null!=e.deletionDate?new Date(e.deletionDate):null,this.expirationDate=null!=e.expirationDate?new Date(e.expirationDate):null,this.hideEmail=e.hideEmail,this.type){case n.a.Text:this.text=new a.a(e.text,t);break;case n.a.File:this.file=new c.a(e.file,t)}}decrypt(){return l(this,void 0,void 0,(function*(){const e=new r.a(this);let t;const i=s.a.global.bitwardenContainerService;if(!i)throw new Error("global bitwardenContainerService not initialized.");t=i.getCryptoService();try{e.key=yield t.decryptToBytes(this.key,null),e.cryptoKey=yield t.makeSendKey(e.key)}catch(e){}switch(yield this.decryptObj(e,{name:null,notes:null},null,e.cryptoKey),this.type){case n.a.File:e.file=yield this.file.decrypt(e.cryptoKey);break;case n.a.Text:e.text=yield this.text.decrypt(e.cryptoKey)}return e}))}}},47:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(0),s=i(13);class r{constructor(e){this.i18nService=e}transform(e,t,i,n){return this.i18nService.t(e,t,i,n)}}r.ɵfac=function(e){return new(e||r)(n.cc(s.a))},r.ɵpipe=n.bc({name:"i18n",type:r,pure:!0}),("undefined"==typeof ngDevMode||ngDevMode)&&n.Jb(r,[{type:n.R,args:[{name:"i18n"}]}],(function(){return[{type:s.a}]}),null)},521:function(e,t){},539:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".CircleIcon {\n  display: inline-block;\n  border: 1px solid var(--silver);\n  border-radius: 50%;\n  height: 64px;\n  width: 64px;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.CircleIcon svg {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n","",{version:3,sources:["webpack://./src/cozy/react/components/CircleIcon/styles.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,+BAA+B;EAC/B,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;AAClC",sourcesContent:[".CircleIcon {\n  display: inline-block;\n  border: 1px solid var(--silver);\n  border-radius: 50%;\n  height: 64px;\n  width: 64px;\n  box-sizing: border-box;\n  position: relative;\n}\n\n.CircleIcon svg {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n"],sourceRoot:""}]),t.a=o},540:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".Wrapper {\n  max-width: 768px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  text-align: center;\n  align-items: center;\n  box-sizing: border-box;\n}\n","",{version:3,sources:["webpack://./src/cozy/react/components/Wrapper/styles.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,mBAAmB;EACnB,sBAAsB;AACxB",sourcesContent:[".Wrapper {\n  max-width: 768px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  text-align: center;\n  align-items: center;\n  box-sizing: border-box;\n}\n"],sourceRoot:""}]),t.a=o},544:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".CloudIcon {\n  vertical-align: -2px;\n}\n","",{version:3,sources:["webpack://./src/cozy/react/components/CloudIcon/styles.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB",sourcesContent:[".CloudIcon {\n  vertical-align: -2px;\n}\n"],sourceRoot:""}]),t.a=o},545:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".WithCozyIcon__text {\n  vertical-align: -2px;\n}\n","",{version:3,sources:["webpack://./src/cozy/react/components/WithCozyIcon/styles.css"],names:[],mappings:"AAAA;EACE,oBAAoB;AACtB",sourcesContent:[".WithCozyIcon__text {\n  vertical-align: -2px;\n}\n"],sourceRoot:""}]),t.a=o},546:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".StoreButton__Image {\n  height: 3rem;\n}\n\n.StoreButton:not(:last-child) {\n  margin-right: 0.5rem;\n}\n","",{version:3,sources:["webpack://./src/cozy/react/components/StoreButtons/styles.css"],names:[],mappings:"AAAA;EACE,YAAY;AACd;;AAEA;EACE,oBAAoB;AACtB",sourcesContent:[".StoreButton__Image {\n  height: 3rem;\n}\n\n.StoreButton:not(:last-child) {\n  margin-right: 0.5rem;\n}\n"],sourceRoot:""}]),t.a=o},547:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".InstallationPage {\n  max-width: 800px;\n  margin: 0 auto;\n  width: 100%;\n}\n","",{version:3,sources:["webpack://./src/cozy/react/components/InstallationPage/styles.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,cAAc;EACd,WAAW;AACb",sourcesContent:[".InstallationPage {\n  max-width: 800px;\n  margin: 0 auto;\n  width: 100%;\n}\n"],sourceRoot:""}]),t.a=o},548:function(e,t,i){"use strict";var n=i(127),s=i.n(n),r=i(128),o=i.n(r)()(s.a);o.push([e.i,".ConfirmYourIdentityModal__fingerprint {\r\n  padding: 16px;\r\n  margin: 24px 0;\r\n  text-align: center;\r\n}\r\n.ConfirmYourIdentityModal__fingerprint p {\r\n  color: var(--secondaryColor);\r\n}","",{version:3,sources:["webpack://./src/cozy/wrappers/confirm-your-identity-dialog/styles.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,4BAA4B;AAC9B",sourcesContent:[".ConfirmYourIdentityModal__fingerprint {\r\n  padding: 16px;\r\n  margin: 24px 0;\r\n  text-align: center;\r\n}\r\n.ConfirmYourIdentityModal__fingerprint p {\r\n  color: var(--secondaryColor);\r\n}"],sourceRoot:""}]),t.a=o},549:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e,t){this.ids=null==e?[]:e,this.organizationId=t}}},55:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.Android=0]="Android",e[e.iOS=1]="iOS",e[e.ChromeExtension=2]="ChromeExtension",e[e.FirefoxExtension=3]="FirefoxExtension",e[e.OperaExtension=4]="OperaExtension",e[e.EdgeExtension=5]="EdgeExtension",e[e.WindowsDesktop=6]="WindowsDesktop",e[e.MacOsDesktop=7]="MacOsDesktop",e[e.LinuxDesktop=8]="LinuxDesktop",e[e.ChromeBrowser=9]="ChromeBrowser",e[e.FirefoxBrowser=10]="FirefoxBrowser",e[e.OperaBrowser=11]="OperaBrowser",e[e.EdgeBrowser=12]="EdgeBrowser",e[e.IEBrowser=13]="IEBrowser",e[e.UnknownBrowser=14]="UnknownBrowser",e[e.AndroidAmazon=15]="AndroidAmazon",e[e.UWP=16]="UWP",e[e.SafariBrowser=17]="SafariBrowser",e[e.VivaldiBrowser=18]="VivaldiBrowser",e[e.VivaldiExtension=19]="VivaldiExtension",e[e.SafariExtension=20]="SafariExtension"}(n||(n={}))},561:function(e,t){function i(e){return Promise.resolve().then((function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}))}i.keys=function(){return[]},i.resolve=i,e.exports=i,i.id=561},60:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.Text=0]="Text",e[e.Hidden=1]="Hidden",e[e.Boolean=2]="Boolean"}(n||(n={}))},64:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.AesCbc256_B64=0]="AesCbc256_B64",e[e.AesCbc128_HmacSha256_B64=1]="AesCbc128_HmacSha256_B64",e[e.AesCbc256_HmacSha256_B64=2]="AesCbc256_HmacSha256_B64",e[e.Rsa2048_OaepSha256_B64=3]="Rsa2048_OaepSha256_B64",e[e.Rsa2048_OaepSha1_B64=4]="Rsa2048_OaepSha1_B64",e[e.Rsa2048_OaepSha256_HmacSha256_B64=5]="Rsa2048_OaepSha256_HmacSha256_B64",e[e.Rsa2048_OaepSha1_HmacSha256_B64=6]="Rsa2048_OaepSha1_HmacSha256_B64"}(n||(n={}))},67:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.cardholderName=null,this.expMonth=null,this.expYear=null,this.code=null,this._brand=null,this._number=null,this._subTitle=null}get maskedCode(){return null!=this.code?"•".repeat(this.code.length):null}get maskedNumber(){return null!=this.number?"•".repeat(this.number.length):null}get brand(){return this._brand}set brand(e){this._brand=e,this._subTitle=null}get number(){return this._number}set number(e){this._number=e,this._subTitle=null}get subTitle(){if(null==this._subTitle&&(this._subTitle=this.brand,null!=this.number&&this.number.length>=4)){null!=this._subTitle&&""!==this._subTitle?this._subTitle+=", ":this._subTitle="";const e=this.number.length>=5&&null!=this.number.match(new RegExp("^3[47]"))?5:4;this._subTitle+="*"+this.number.substr(this.number.length-e)}return this._subTitle}get expiration(){if(!this.expMonth&&!this.expYear)return null;let e=null!=this.expMonth?("0"+this.expMonth).slice(-2):"__";return e+=" / "+(null!=this.expYear?this.formatYear(this.expYear):"____"),e}formatYear(e){return 2===e.length?"20"+e:e}}},679:function(e,t,i){var n={"./_lib/build_formatting_tokens_reg_exp/index.js":62,"./ar/build_distance_in_words_locale/index.js":680,"./ar/build_format_locale/index.js":681,"./ar/index.js":1191,"./be/build_distance_in_words_locale/index.js":682,"./be/build_format_locale/index.js":683,"./be/index.js":1192,"./bg/build_distance_in_words_locale/index.js":684,"./bg/build_format_locale/index.js":685,"./bg/index.js":1193,"./ca/build_distance_in_words_locale/index.js":686,"./ca/build_format_locale/index.js":687,"./ca/index.js":1194,"./cs/build_distance_in_words_locale/index.js":688,"./cs/build_format_locale/index.js":689,"./cs/index.js":1195,"./da/build_distance_in_words_locale/index.js":690,"./da/build_format_locale/index.js":691,"./da/index.js":1196,"./de/build_distance_in_words_locale/index.js":692,"./de/build_format_locale/index.js":693,"./de/index.js":1197,"./el/build_distance_in_words_locale/index.js":694,"./el/build_format_locale/index.js":695,"./el/index.js":1198,"./en/build_distance_in_words_locale/index.js":677,"./en/build_format_locale/index.js":678,"./en/index.js":676,"./eo/build_distance_in_words_locale/index.js":696,"./eo/build_format_locale/index.js":697,"./eo/index.js":1199,"./es/build_distance_in_words_locale/index.js":698,"./es/build_format_locale/index.js":699,"./es/index.js":1200,"./fi/build_distance_in_words_locale/index.js":700,"./fi/build_format_locale/index.js":701,"./fi/index.js":1201,"./fil/build_distance_in_words_locale/index.js":702,"./fil/build_format_locale/index.js":703,"./fil/index.js":1202,"./fr/build_distance_in_words_locale/index.js":704,"./fr/build_format_locale/index.js":705,"./fr/index.js":1203,"./hr/build_distance_in_words_locale/index.js":706,"./hr/build_format_locale/index.js":707,"./hr/index.js":1204,"./hu/build_distance_in_words_locale/index.js":708,"./hu/build_format_locale/index.js":709,"./hu/index.js":1205,"./id/build_distance_in_words_locale/index.js":710,"./id/build_format_locale/index.js":711,"./id/index.js":1206,"./is/build_distance_in_words_locale/index.js":712,"./is/build_format_locale/index.js":713,"./is/index.js":1207,"./it/build_distance_in_words_locale/index.js":714,"./it/build_format_locale/index.js":715,"./it/index.js":1208,"./ja/build_distance_in_words_locale/index.js":716,"./ja/build_format_locale/index.js":717,"./ja/index.js":1209,"./ko/build_distance_in_words_locale/index.js":718,"./ko/build_format_locale/index.js":719,"./ko/index.js":1210,"./mk/build_distance_in_words_locale/index.js":720,"./mk/build_format_locale/index.js":721,"./mk/index.js":1211,"./nb/build_distance_in_words_locale/index.js":722,"./nb/build_format_locale/index.js":723,"./nb/index.js":1212,"./nl/build_distance_in_words_locale/index.js":724,"./nl/build_format_locale/index.js":725,"./nl/index.js":1213,"./pl/build_distance_in_words_locale/index.js":726,"./pl/build_format_locale/index.js":727,"./pl/index.js":1214,"./pt/build_distance_in_words_locale/index.js":728,"./pt/build_format_locale/index.js":729,"./pt/index.js":1215,"./ro/build_distance_in_words_locale/index.js":730,"./ro/build_format_locale/index.js":731,"./ro/index.js":1216,"./ru/build_distance_in_words_locale/index.js":732,"./ru/build_format_locale/index.js":733,"./ru/index.js":1217,"./sk/build_distance_in_words_locale/index.js":734,"./sk/build_format_locale/index.js":735,"./sk/index.js":1218,"./sl/build_distance_in_words_locale/index.js":736,"./sl/build_format_locale/index.js":737,"./sl/index.js":1219,"./sr/build_distance_in_words_locale/index.js":738,"./sr/build_format_locale/index.js":739,"./sr/index.js":1220,"./sv/build_distance_in_words_locale/index.js":740,"./sv/build_format_locale/index.js":741,"./sv/index.js":1221,"./th/build_distance_in_words_locale/index.js":742,"./th/build_format_locale/index.js":743,"./th/index.js":1222,"./tr/build_distance_in_words_locale/index.js":744,"./tr/build_format_locale/index.js":745,"./tr/index.js":1223,"./zh_cn/build_distance_in_words_locale/index.js":746,"./zh_cn/build_format_locale/index.js":747,"./zh_cn/index.js":1224,"./zh_tw/build_distance_in_words_locale/index.js":748,"./zh_tw/build_format_locale/index.js":749,"./zh_tw/index.js":1225};function s(e){var t=r(e);return i(t)}function r(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}s.keys=function(){return Object.keys(n)},s.resolve=r,e.exports=s,s.id=679},68:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(43),s=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class r{buildDomainModel(e,t,i,s,r=[]){for(const o in i){if(!i.hasOwnProperty(o))continue;const c=t[i[o]||o];!0===s||r.indexOf(o)>-1?e[o]=c||null:e[o]=c?new n.a(c):null}}buildDataModel(e,t,i,n=[]){for(const s in i){if(!i.hasOwnProperty(s))continue;const r=e[i[s]||s];n.indexOf(s)>-1?t[s]=null!=r?r:null:t[s]=null!=r?r.encryptedString:null}}decryptObj(e,t,i,n=null){return s(this,void 0,void 0,(function*(){const s=[],r=this;for(const o in t)t.hasOwnProperty(o)&&function(o){const c=Promise.resolve().then(()=>{const e=t[o]||o;return r[e]?r[e].decrypt(i,n):null}).then(t=>{e[o]=t});s.push(c)}(o);return yield Promise.all(s),e}))}}},78:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.type=null,e&&(this.type=e.type)}get subTitle(){return null}}},80:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{}n.enableMinimizeToTrayKey="enableMinimizeToTray",n.enableCloseToTrayKey="enableCloseToTray",n.enableTrayKey="enableTray",n.enableStartToTrayKey="enableStartToTrayKey",n.enableAlwaysOnTopKey="enableAlwaysOnTopKey",n.minimizeOnCopyToClipboardKey="minimizeOnCopyToClipboardKey",n.enableBiometric="enabledBiometric",n.enableBrowserIntegration="enableBrowserIntegration",n.enableBrowserIntegrationFingerprint="enableBrowserIntegrationFingerprint",n.alwaysShowDock="alwaysShowDock",n.openAtLogin="openAtLogin",n.noAutoPromptBiometrics="noAutoPromptBiometrics",n.noAutoPromptBiometricsText="noAutoPromptBiometricsText"},824:function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return F}));var n=i(15),s=i(60),r=i(92),o=i(130),c=i(391),a=i(274),l=i(166),d=i(275),u=i(276),h=i(277),p=i(278),g=i(392),f=i(279),y=i(549),m=i(825),v=i(826),b=i(888),w=i(827),O=i(828),S=i(147),C=i(829),P=i(112),x=i(237),k=i(830),T=i(32),I=i(245),D=i(20),A=function(e,t,i,n){var s,r=arguments.length,o=r<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(o=(r<3?s(o):r>3?s(t,i,o):s(t,i))||o);return r>3&&o&&Object.defineProperty(t,i,o),o},M=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},z=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const E="ciphers_",U="sitesLocalData",N="neverDomains",R=new Map([["google.com",new Set(["script.google.com"])]]);class F{constructor(e,t,i,n,s,r,o,c){this.cryptoService=e,this.userService=t,this.settingsService=i,this.apiService=n,this.fileUploadService=s,this.storageService=r,this.i18nService=o,this.searchService=c,this.sortedCiphersCache=new k.a(this.sortCiphersByLastUsed)}get decryptedCipherCache(){return this._decryptedCipherCache}set decryptedCipherCache(e){this._decryptedCipherCache=e,null!=this.searchService&&(null==e?this.searchService().clearIndex():this.searchService().indexCiphers())}clearCache(){this.decryptedCipherCache=null,this.sortedCiphersCache.clear()}encrypt(e,t,i=null){return z(this,void 0,void 0,(function*(){if(null!=e.id){if(null==i&&(i=yield this.get(e.id)),null!=i){const t=yield i.decrypt();if(e.passwordHistory=t.passwordHistory||[],e.type===n.a.Login&&t.type===n.a.Login)if(null!=t.login.password&&""!==t.login.password&&t.login.password!==e.login.password){const i=new x.a;i.password=t.login.password,i.lastUsedDate=e.login.passwordRevisionDate=new Date,e.passwordHistory.splice(0,0,i)}else e.login.passwordRevisionDate=t.login.passwordRevisionDate;if(t.hasFields){const i=t.fields.filter(e=>e.type===s.a.Hidden&&null!=e.name&&""!==e.name&&null!=e.value&&""!==e.value),n=null==e.fields?[]:e.fields.filter(e=>e.type===s.a.Hidden&&null!=e.name&&""!==e.name);i.forEach(t=>{const i=n.find(e=>e.name===t.name);if(null==i||i.value!==t.value){const i=new x.a;i.password=t.name+": "+t.value,i.lastUsedDate=new Date,e.passwordHistory.splice(0,0,i)}})}}null!=e.passwordHistory&&0===e.passwordHistory.length?e.passwordHistory=null:null!=e.passwordHistory&&e.passwordHistory.length>5&&(e.passwordHistory=e.passwordHistory.slice(0,5))}const r=new l.a;if(r.id=e.id,r.folderId=e.folderId,r.favorite=e.favorite,r.organizationId=e.organizationId,r.type=e.type,r.collectionIds=e.collectionIds,r.revisionDate=e.revisionDate,r.reprompt=e.reprompt,null==t&&null!=r.organizationId&&null==(t=yield this.cryptoService.getOrgKey(r.organizationId)))throw new Error("Cannot encrypt cipher for organization. No key.");return yield Promise.all([this.encryptObjProperty(e,r,{name:null,notes:null},t),this.encryptCipherData(r,e,t),this.encryptFields(e.fields,t).then(e=>{r.fields=e}),this.encryptPasswordHistories(e.passwordHistory,t).then(e=>{r.passwordHistory=e}),this.encryptAttachments(e.attachments,t).then(e=>{r.attachments=e})]),r}))}encryptAttachments(e,t){return z(this,void 0,void 0,(function*(){if(null==e||0===e.length)return null;const i=[],n=[];return e.forEach(e=>z(this,void 0,void 0,(function*(){const s=new c.a;s.id=e.id,s.size=e.size,s.sizeName=e.sizeName,s.url=e.url;const r=this.encryptObjProperty(e,s,{fileName:null},t).then(()=>z(this,void 0,void 0,(function*(){null!=e.key&&(s.key=yield this.cryptoService.encrypt(e.key.key,t)),n.push(s)})));i.push(r)}))),yield Promise.all(i),n}))}encryptFields(e,t){return z(this,void 0,void 0,(function*(){if(!e||!e.length)return null;const i=this,n=[];return yield e.reduce((e,s)=>e.then(()=>i.encryptField(s,t)).then(e=>{n.push(e)}),Promise.resolve()),n}))}encryptField(e,t){return z(this,void 0,void 0,(function*(){const i=new d.a;return i.type=e.type,e.type===s.a.Boolean&&"true"!==e.value&&(e.value="false"),yield this.encryptObjProperty(e,i,{name:null,value:null},t),i}))}encryptPasswordHistories(e,t){return z(this,void 0,void 0,(function*(){if(!e||!e.length)return null;const i=this,n=[];return yield e.reduce((e,s)=>e.then(()=>i.encryptPasswordHistory(s,t)).then(e=>{n.push(e)}),Promise.resolve()),n}))}encryptPasswordHistory(e,t){return z(this,void 0,void 0,(function*(){const i=new g.a;return i.lastUsedDate=e.lastUsedDate,yield this.encryptObjProperty(e,i,{password:null},t),i}))}get(e){return z(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(U),n=yield this.storageService.get(E+t);return null!=n&&n.hasOwnProperty(e)?new l.a(n[e],!1,i?i[e]:null):null}))}getAll(){return z(this,void 0,void 0,(function*(){const e=yield this.userService.getUserId(),t=yield this.storageService.get(U),i=yield this.storageService.get(E+e),n=[];for(const e in i)i.hasOwnProperty(e)&&n.push(new l.a(i[e],!1,t?t[e]:null));return n}))}getAllDecrypted(){var e;return z(this,void 0,void 0,(function*(){if(null!=this.decryptedCipherCache){const t=yield this.userService.getUserId();return null!=this.searchService&&(null!==(e=this.searchService().indexedEntityId)&&void 0!==e?e:t)!==t&&(yield this.searchService().indexCiphers(t,this.decryptedCipherCache)),this.decryptedCipherCache}const t=[];if(!(yield this.cryptoService.hasKey()))throw new Error("No key.");const i=[];return(yield this.getAll()).forEach(e=>{i.push(e.decrypt().then(e=>t.push(e)))}),yield Promise.all(i),t.sort(this.getLocaleSortingFunction()),this.decryptedCipherCache=t,this.decryptedCipherCache}))}getAllDecryptedForGrouping(e,t=!0){return z(this,void 0,void 0,(function*(){return(yield this.getAllDecrypted()).filter(i=>!i.isDeleted&&(!(!t||i.folderId!==e)||!t&&null!=i.collectionIds&&i.collectionIds.indexOf(e)>-1))}))}getAllDecryptedForUrl(e,t,i=null){return z(this,void 0,void 0,(function*(){if(null==e&&null==t)return Promise.resolve([]);const s=D.a.getDomain(e),o=null==s?Promise.resolve([]):this.settingsService.getEquivalentDomains().then(e=>{let t=[];return e.forEach(e=>{e.length&&e.indexOf(s)>=0&&(t=t.concat(e))}),t.length||t.push(s),t}),c=yield Promise.all([o,this.getAllDecrypted()]),a=c[0],l=c[1];return null==i&&null==(i=yield this.storageService.get(T.a.defaultUriMatch))&&(i=r.a.Domain),l.filter(o=>{if(null!=o.deletedDate)return!1;if(null!=t&&t.indexOf(o.type)>-1)return!0;if(null!=e&&o.type===n.a.Login&&null!=o.login.uris)for(let t=0;t<o.login.uris.length;t++){const n=o.login.uris[t];if(null==n.uri)continue;switch(null==n.match?i:n.match){case r.a.Domain:if(null!=s&&null!=n.domain&&a.indexOf(n.domain)>-1){if(!R.has(n.domain))return!0;{const t=D.a.getHost(e);if(!R.get(n.domain).has(t))return!0}}break;case r.a.Host:const t=D.a.getHost(e);if(null!=t&&t===D.a.getHost(n.uri))return!0;break;case r.a.Exact:if(e===n.uri)return!0;break;case r.a.StartsWith:if(e.startsWith(n.uri))return!0;break;case r.a.RegularExpression:try{if(new RegExp(n.uri,"i").test(e))return!0}catch(e){}break;case r.a.Never:}}return!1})}))}getAllFromApiForOrganization(e){return z(this,void 0,void 0,(function*(){const t=yield this.apiService.getCiphersOrganization(e);if(null!=t&&null!=t.data&&t.data.length){const e=[],i=[];return t.data.forEach(t=>{const n=new o.a(t),s=new l.a(n);i.push(s.decrypt().then(t=>e.push(t)))}),yield Promise.all(i),e.sort(this.getLocaleSortingFunction()),e}return[]}))}getLastUsedForUrl(e,t=!1){return z(this,void 0,void 0,(function*(){return this.getCipherForUrl(e,!0,!1,t)}))}getLastLaunchedForUrl(e,t=!1){return z(this,void 0,void 0,(function*(){return this.getCipherForUrl(e,!1,!0,t)}))}getNextCipherForUrl(e){return z(this,void 0,void 0,(function*(){return this.getCipherForUrl(e,!1,!1,!1)}))}updateLastUsedIndexForUrl(e){this.sortedCiphersCache.updateLastUsedIndex(e)}updateLastUsedDate(e){return z(this,void 0,void 0,(function*(){let t=yield this.storageService.get(U);if(t||(t={}),t[e]?t[e].lastUsedDate=(new Date).getTime():t[e]={lastUsedDate:(new Date).getTime()},yield this.storageService.save(U,t),null!=this.decryptedCipherCache)for(let i=0;i<this.decryptedCipherCache.length;i++){const n=this.decryptedCipherCache[i];if(n.id===e){n.localData=t[e];break}}}))}updateLastLaunchedDate(e){return z(this,void 0,void 0,(function*(){let t=yield this.storageService.get(U);if(t||(t={}),t[e]?t[e].lastLaunched=(new Date).getTime():t[e]={lastUsedDate:(new Date).getTime()},yield this.storageService.save(U,t),null!=this.decryptedCipherCache)for(let i=0;i<this.decryptedCipherCache.length;i++){const n=this.decryptedCipherCache[i];if(n.id===e){n.localData=t[e];break}}}))}saveNeverDomain(e){return z(this,void 0,void 0,(function*(){if(null==e)return;let t=yield this.storageService.get(N);t||(t={}),t[e]=null,yield this.storageService.save(N,t)}))}saveWithServer(e){return z(this,void 0,void 0,(function*(){let t;if(null==e.id){if(null!=e.collectionIds){const i=new O.a(e);t=yield this.apiService.postCipherCreate(i)}else{const i=new S.a(e);t=yield this.apiService.postCipher(i)}e.id=t.id}else{const i=new S.a(e);t=yield this.apiService.putCipher(e.id,i)}const i=yield this.userService.getUserId(),n=new o.a(t,i,e.collectionIds);yield this.upsert(n)}))}shareWithServer(e,t,i){return z(this,void 0,void 0,(function*(){const n=[];null!=e.attachments&&e.attachments.forEach(i=>{null==i.key&&n.push(this.shareAttachmentWithServer(i,e.id,t))}),yield Promise.all(n),e.organizationId=t,e.collectionIds=i;const s=yield this.encrypt(e),r=new C.a(s),c=yield this.apiService.putShareCipher(e.id,r),a=yield this.userService.getUserId(),l=new o.a(c,a,i);yield this.upsert(l)}))}shareManyWithServer(e,t,i){return z(this,void 0,void 0,(function*(){const n=[],s=[];for(const r of e)r.organizationId=t,r.collectionIds=i,n.push(this.encrypt(r).then(e=>{s.push(e)}));yield Promise.all(n);const r=new b.a(s,i);yield this.apiService.putShareCiphers(r);const o=yield this.userService.getUserId();yield this.upsert(s.map(e=>e.toCipherData(o)))}))}saveAttachmentWithServer(e,t,i=!1){return new Promise((n,s)=>{const r=new FileReader;r.readAsArrayBuffer(t),r.onload=r=>z(this,void 0,void 0,(function*(){try{const s=yield this.saveAttachmentRawWithServer(e,t.name,r.target.result,i);n(s)}catch(e){s(e)}})),r.onerror=e=>{s("Error reading file.")}})}saveAttachmentRawWithServer(e,t,i,n=!1){return z(this,void 0,void 0,(function*(){const s=yield this.cryptoService.getOrgKey(e.organizationId),r=yield this.cryptoService.encrypt(t,s),c=yield this.cryptoService.makeEncKey(s),a=yield this.cryptoService.encryptToBytes(i,c[0]),d={key:c[1].encryptedString,fileName:r.encryptedString,fileSize:a.buffer.byteLength,adminRequest:n};let u;try{const i=yield this.apiService.postCipherAttachment(e.id,d);u=n?i.cipherMiniResponse:i.cipherResponse,yield this.fileUploadService.uploadCipherAttachment(n,i,t,a)}catch(t){if(!(t instanceof P.a&&404===t.statusCode||405===t.statusCode))throw t instanceof P.a?new Error(t.getSingleMessage()):t;u=yield this.legacyServerAttachmentFileUpload(n,e.id,r,a,c[1])}const h=yield this.userService.getUserId(),p=new o.a(u,h,e.collectionIds);return n||(yield this.upsert(p)),new l.a(p)}))}legacyServerAttachmentFileUpload(t,i,n,s,r){return z(this,void 0,void 0,(function*(){const o=new FormData;try{const e=new Blob([s.buffer],{type:"application/octet-stream"});o.append("key",r.encryptedString),o.append("data",e,n.encryptedString)}catch(t){if(!D.a.isNode||D.a.isBrowser)throw t;o.append("key",r.encryptedString),o.append("data",e.from(s.buffer),{filepath:n.encryptedString,contentType:"application/octet-stream"})}let c;try{c=t?yield this.apiService.postCipherAttachmentAdminLegacy(i,o):yield this.apiService.postCipherAttachmentLegacy(i,o)}catch(e){throw new Error(e.getSingleMessage())}return c}))}saveCollectionsWithServer(e){return z(this,void 0,void 0,(function*(){const t=new w.a(e.collectionIds);yield this.apiService.putCipherCollections(e.id,t);const i=yield this.userService.getUserId(),n=e.toCipherData(i);yield this.upsert(n)}))}upsert(e){return z(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();let i=yield this.storageService.get(E+t);if(null==i&&(i={}),e instanceof o.a){const t=e;i[t.id]=t}else e.forEach(e=>{i[e.id]=e});yield this.storageService.save(E+t,i),this.decryptedCipherCache=null}))}replace(e){return z(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();yield this.storageService.save(E+t,e),this.decryptedCipherCache=null}))}clear(e){return z(this,void 0,void 0,(function*(){yield this.storageService.remove(E+e),this.clearCache()}))}moveManyWithServer(e,t){return z(this,void 0,void 0,(function*(){yield this.apiService.putMoveCiphers(new m.a(e,t));const i=yield this.userService.getUserId();let n=yield this.storageService.get(E+i);null==n&&(n={}),e.forEach(e=>{n.hasOwnProperty(e)&&(n[e].folderId=t)}),yield this.storageService.save(E+i,n),this.decryptedCipherCache=null}))}delete(e){return z(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(E+t);if(null!=i){if("string"==typeof e){if(null==i[e])return;delete i[e]}else e.forEach(e=>{delete i[e]});yield this.storageService.save(E+t,i),this.decryptedCipherCache=null}}))}deleteWithServer(e){return z(this,void 0,void 0,(function*(){yield this.apiService.deleteCipher(e),yield this.delete(e)}))}deleteManyWithServer(e){return z(this,void 0,void 0,(function*(){yield this.apiService.deleteManyCiphers(new y.a(e)),yield this.delete(e)}))}deleteAttachment(e,t){return z(this,void 0,void 0,(function*(){const i=yield this.userService.getUserId(),n=yield this.storageService.get(E+i);if(null!=n&&n.hasOwnProperty(e)&&null!=n[e].attachments){for(let i=0;i<n[e].attachments.length;i++)n[e].attachments[i].id===t&&n[e].attachments.splice(i,1);yield this.storageService.save(E+i,n),this.decryptedCipherCache=null}}))}deleteAttachmentWithServer(e,t){return z(this,void 0,void 0,(function*(){try{yield this.apiService.deleteCipherAttachment(e,t)}catch(e){return Promise.reject(e.getSingleMessage())}yield this.deleteAttachment(e,t)}))}sortCiphersByLastUsed(e,t){const i=e.localData&&e.localData.lastUsedDate?e.localData.lastUsedDate:null,n=t.localData&&t.localData.lastUsedDate?t.localData.lastUsedDate:null,s=null!=i&&null!=n;return s&&i<n?1:null!=i&&null==n||s&&i>n?-1:null!=n&&null==i?1:0}sortCiphersByLastUsedThenName(e,t){const i=this.sortCiphersByLastUsed(e,t);return 0!==i?i:this.getLocaleSortingFunction()(e,t)}getLocaleSortingFunction(){return(e,t)=>{let i=e.name,s=t.name;if(null==i&&null!=s)return-1;if(null!=i&&null==s)return 1;if(null==i&&null==s)return 0;const r=this.i18nService.collator?this.i18nService.collator.compare(i,s):i.localeCompare(s);return 0!==r||e.type!==n.a.Login||t.type!==n.a.Login?r:(null!=e.login.username&&(i+=e.login.username),null!=t.login.username&&(s+=t.login.username),this.i18nService.collator?this.i18nService.collator.compare(i,s):i.localeCompare(s))}}softDelete(e){return z(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(E+t);if(null==i)return;const n=e=>{null!=i[e]&&(i[e].deletedDate=(new Date).toISOString())};"string"==typeof e?n(e):e.forEach(n),yield this.storageService.save(E+t,i),this.decryptedCipherCache=null}))}softDeleteWithServer(e){return z(this,void 0,void 0,(function*(){yield this.apiService.putDeleteCipher(e),yield this.softDelete(e)}))}softDeleteManyWithServer(e){return z(this,void 0,void 0,(function*(){yield this.apiService.putDeleteManyCiphers(new y.a(e)),yield this.softDelete(e)}))}restore(e){return z(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(E+t);if(null==i)return;const n=e=>{null!=i[e.id]&&(i[e.id].deletedDate=null,i[e.id].revisionDate=e.revisionDate)};"Array"===e.constructor.name?e.forEach(n):n(e),yield this.storageService.save(E+t,i),this.decryptedCipherCache=null}))}restoreWithServer(e){return z(this,void 0,void 0,(function*(){const t=yield this.apiService.putRestoreCipher(e);yield this.restore({id:e,revisionDate:t.revisionDate})}))}restoreManyWithServer(e){return z(this,void 0,void 0,(function*(){const t=yield this.apiService.putRestoreManyCiphers(new v.a(e)),i=[];for(const e of t.data)i.push({id:e.id,revisionDate:e.revisionDate});yield this.restore(i)}))}shareAttachmentWithServer(t,i,n){return z(this,void 0,void 0,(function*(){const s=yield this.apiService.nativeFetch(new Request(t.url,{cache:"no-store"}));if(200!==s.status)throw Error("Failed to download attachment: "+s.status.toString());const r=yield s.arrayBuffer(),o=yield this.cryptoService.decryptFromBytes(r,null),c=yield this.cryptoService.getOrgKey(n),a=yield this.cryptoService.encrypt(t.fileName,c),l=yield this.cryptoService.makeEncKey(c),d=yield this.cryptoService.encryptToBytes(o,l[0]),u=new FormData;try{const e=new Blob([d.buffer],{type:"application/octet-stream"});u.append("key",l[1].encryptedString),u.append("data",e,a.encryptedString)}catch(t){if(!D.a.isNode||D.a.isBrowser)throw t;u.append("key",l[1].encryptedString),u.append("data",e.from(d.buffer),{filepath:a.encryptedString,contentType:"application/octet-stream"})}try{yield this.apiService.postShareCipherAttachment(i,t.id,u,n)}catch(e){throw new Error(e.getSingleMessage())}}))}encryptObjProperty(e,t,i,n){return z(this,void 0,void 0,(function*(){const s=[],r=this;for(const o in i)i.hasOwnProperty(o)&&function(t,o){const c=Promise.resolve().then(()=>{const s=e[i[t]||t];return s&&""!==s?r.cryptoService.encrypt(s,n):null}).then(e=>{o[t]=e});s.push(c)}(o,t);yield Promise.all(s)}))}encryptCipherData(e,t,i){return z(this,void 0,void 0,(function*(){switch(e.type){case n.a.Login:if(e.login=new h.a,e.login.passwordRevisionDate=t.login.passwordRevisionDate,e.login.autofillOnPageLoad=t.login.autofillOnPageLoad,yield this.encryptObjProperty(t.login,e.login,{username:null,password:null,totp:null},i),null!=t.login.uris){e.login.uris=[];for(let n=0;n<t.login.uris.length;n++){const s=new p.a;s.match=t.login.uris[n].match,yield this.encryptObjProperty(t.login.uris[n],s,{uri:null},i),e.login.uris.push(s)}}return;case n.a.SecureNote:return e.secureNote=new f.a,void(e.secureNote.type=t.secureNote.type);case n.a.Card:return e.card=new a.a,void(yield this.encryptObjProperty(t.card,e.card,{cardholderName:null,brand:null,number:null,expMonth:null,expYear:null,code:null},i));case n.a.Identity:return e.identity=new u.a,void(yield this.encryptObjProperty(t.identity,e.identity,{title:null,firstName:null,middleName:null,lastName:null,address1:null,address2:null,address3:null,city:null,state:null,postalCode:null,country:null,company:null,email:null,phone:null,ssn:null,username:null,passportNumber:null,licenseNumber:null},i));default:throw new Error("Unknown cipher type.")}}))}getCipherForUrl(e,t,i,n){return z(this,void 0,void 0,(function*(){const s=n?"autofillOnPageLoad-"+e:e;if(!this.sortedCiphersCache.isCached(s)){let t=yield this.getAllDecryptedForUrl(e);if(!t)return null;if(n){const e=yield this.storageService.get(T.a.autoFillOnPageLoadDefaultKey);if(t=t.filter(t=>t.login.autofillOnPageLoad||null===t.login.autofillOnPageLoad&&e),0===t.length)return null}this.sortedCiphersCache.addCiphers(s,t)}return i?this.sortedCiphersCache.getLastLaunched(s):t?this.sortedCiphersCache.getLastUsed(s):this.sortedCiphersCache.getNext(s)}))}}A([Object(I.a)(()=>"getAllDecrypted"),M("design:type",Function),M("design:paramtypes",[]),M("design:returntype",Promise)],F.prototype,"getAllDecrypted",null)}).call(this,i(98).Buffer)},825:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e,t){this.ids=null==e?[]:e,this.folderId=t}}},826:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.ids=null==e?[]:e}}},827:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.collectionIds=null==e?[]:e}}},828:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(147);class s{constructor(e){this.cipher=new n.a(e),this.collectionIds=e.collectionIds}}},829:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(147);class s{constructor(e){this.cipher=new n.a(e),this.collectionIds=e.collectionIds}}},830:function(e,t,i){"use strict";i.d(t,"a",(function(){return n}));class n{constructor(e){this.comparator=e,this.sortedCiphersByUrl=new Map,this.timeouts=new Map}isCached(e){return this.sortedCiphersByUrl.has(e)}addCiphers(e,t){t.sort(this.comparator),this.sortedCiphersByUrl.set(e,new s(t)),this.resetTimer(e)}getLastUsed(e){return this.resetTimer(e),this.isCached(e)?this.sortedCiphersByUrl.get(e).getLastUsed():null}getLastLaunched(e){return this.isCached(e)?this.sortedCiphersByUrl.get(e).getLastLaunched():null}getNext(e){return this.resetTimer(e),this.isCached(e)?this.sortedCiphersByUrl.get(e).getNext():null}updateLastUsedIndex(e){this.isCached(e)&&this.sortedCiphersByUrl.get(e).updateLastUsedIndex()}clear(){this.sortedCiphersByUrl.clear(),this.timeouts.clear()}resetTimer(e){clearTimeout(this.timeouts.get(e)),this.timeouts.set(e,setTimeout(()=>{this.sortedCiphersByUrl.delete(e),this.timeouts.delete(e)},3e3))}}class s{constructor(e){this.ciphers=e,this.lastUsedIndex=-1}getLastUsed(){return this.lastUsedIndex=Math.max(this.lastUsedIndex,0),this.ciphers[this.lastUsedIndex]}getLastLaunched(){return this.ciphers.filter(e=>{var t;return null===(t=e.localData)||void 0===t?void 0:t.lastLaunched}).sort((e,t)=>t.localData.lastLaunched.valueOf()-e.localData.lastLaunched.valueOf())[0]}getNextIndex(){return(this.lastUsedIndex+1)%this.ciphers.length}getNext(){return this.ciphers[this.getNextIndex()]}updateLastUsedIndex(){this.lastUsedIndex=this.getNextIndex()}}},832:function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return a}));var n=i(462),s=i(55),r=i(32),o=i(20),c=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class a{constructor(e,t,i,n){this.i18nService=e,this.messagingService=t,this.isDesktopApp=i,this.storageService=n,this.identityClientId="webapp",this.showDialogResolves=new Map,this.passwordDialogResolves=new Map,this.deviceCache=null,this.prefersColorSchemeDark=window.matchMedia("(prefers-color-scheme: dark)"),this.clipboardWriteCallback=this.clearClipboard,this.platformUtilsService=this}getDevice(){return this.deviceCache||(-1!==navigator.userAgent.indexOf(" Firefox/")||-1!==navigator.userAgent.indexOf(" Gecko/")?this.deviceCache=s.a.FirefoxExtension:window.opr&&opr.addons||window.opera||navigator.userAgent.indexOf(" OPR/")>=0?this.deviceCache=s.a.OperaExtension:-1!==navigator.userAgent.indexOf(" Edg/")?this.deviceCache=s.a.EdgeExtension:-1!==navigator.userAgent.indexOf(" Vivaldi/")?this.deviceCache=s.a.VivaldiExtension:window.chrome&&-1!==navigator.userAgent.indexOf(" Chrome/")?this.deviceCache=s.a.ChromeExtension:-1!==navigator.userAgent.indexOf(" Safari/")&&(this.deviceCache=s.a.SafariExtension)),this.deviceCache}getDeviceString(){return s.a[this.getDevice()].toLowerCase().replace("extension","")}isFirefox(){return this.getDevice()===s.a.FirefoxExtension}isChrome(){return this.getDevice()===s.a.ChromeExtension}isEdge(){return this.getDevice()===s.a.EdgeExtension}isOpera(){return this.getDevice()===s.a.OperaExtension}isVivaldi(){return this.getDevice()===s.a.VivaldiExtension}isSafari(){return this.getDevice()===s.a.SafariExtension}isIE(){return!1}isMacAppStore(){return!1}analyticsId(){}isViewOpen(){return c(this,void 0,void 0,(function*(){return Promise.resolve(!1)}))}lockTimeout(){return null}launchUri(e,t){n.a.createNewTab(e,t&&!0===t.extensionPage)}saveFile(e,t,i,s){n.a.downloadFile(e,t,i,s)}getApplicationVersion(){return Promise.resolve(n.a.getApplicationVersion())}supportsWebAuthn(e){return"undefined"!=typeof PublicKeyCredential}supportsU2f(e){return null!=e&&null!=e.u2f||(this.isChrome()||this.isOpera()||this.isVivaldi())}supportsDuo(){return!0}showToast(e,t,i,n){this.messagingService.send("showToast",{text:i,title:t,type:e,options:n})}showDialog(e,t,i,n,s){const r=Math.floor(Math.random()*Number.MAX_SAFE_INTEGER);return this.messagingService.send("showDialog",{text:e,title:t,confirmText:i,cancelText:n,type:s,dialogId:r}),new Promise(e=>{this.showDialogResolves.set(r,{resolve:e,date:new Date})})}showPasswordDialog(e,t,i){return c(this,void 0,void 0,(function*(){const n=Math.floor(Math.random()*Number.MAX_SAFE_INTEGER);return this.messagingService.send("showPasswordDialog",{title:e,body:t,dialogId:n}),new Promise(e=>{this.passwordDialogResolves.set(n,{tryResolve:(t,n)=>c(this,void 0,void 0,(function*(){return t?(e(!1),!1):(yield i(n))?(e(!0),!0):void 0})),date:new Date})})}))}eventTrack(e,t,i){this.messagingService.send("analyticsEventTrack",{action:e,label:t,options:i})}isDev(){return"development"===e.env.ENV}isSelfHost(){return!1}copyToClipboard(e,t){let i=window,n=window.document;t&&(t.window||t.win)?(i=t.window||t.win,n=i.document):t&&t.doc&&(n=t.doc);const s=!!t&&!!t.clearing,r=t&&t.clearMs?t.clearMs:null;if(this.isFirefox()&&i.navigator.clipboard&&i.navigator.clipboard.writeText)i.navigator.clipboard.writeText(e).then(()=>{s||null==this.clipboardWriteCallback||this.clipboardWriteCallback(e,r)});else if(i.clipboardData&&i.clipboardData.setData)i.clipboardData.setData("Text",e),s||null==this.clipboardWriteCallback||this.clipboardWriteCallback(e,r);else if(n.queryCommandSupported&&n.queryCommandSupported("copy")){this.isChrome()&&""===e&&(e="\0");const t=n.createElement("textarea");t.textContent=null==e||""===e?" ":e,t.style.position="fixed",n.body.appendChild(t),t.select();try{n.execCommand("copy")&&!s&&null!=this.clipboardWriteCallback&&this.clipboardWriteCallback(e,r)}catch(e){console.warn("Copy to clipboard failed.",e)}finally{n.body.removeChild(t)}}}readFromClipboard(e){return c(this,void 0,void 0,(function*(){let t=window,i=window.document;if(e&&(e.window||e.win)?(t=e.window||e.win,i=t.document):e&&e.doc&&(i=e.doc),this.isFirefox()&&t.navigator.clipboard&&t.navigator.clipboard.readText)return yield t.navigator.clipboard.readText();if(i.queryCommandSupported&&i.queryCommandSupported("paste")){console.log("readFromClipboard queryCommandSupported");const e=i.createElement("textarea");e.style.position="fixed",i.body.appendChild(e),e.focus();try{if(i.execCommand("paste"))return e.value}catch(e){console.warn("Read from clipboard failed.",e)}finally{i.body.removeChild(e)}}return null}))}resolveDialogPromise(e,t){if(this.showDialogResolves.has(e)){this.showDialogResolves.get(e).resolve(t),this.showDialogResolves.delete(e)}this.showDialogResolves.forEach((e,t)=>{(new Date).getTime()-e.date.getTime()>6e5&&this.showDialogResolves.delete(t)})}resolvePasswordDialogPromise(e,t,i){return c(this,void 0,void 0,(function*(){let n=!1;if(this.passwordDialogResolves.has(e)){const s=this.passwordDialogResolves.get(e);(yield s.tryResolve(t,i))&&(this.passwordDialogResolves.delete(e),n=!0)}return this.passwordDialogResolves.forEach((e,t)=>{(new Date).getTime()-e.date.getTime()>6e5&&this.passwordDialogResolves.delete(t)}),n}))}supportsBiometric(){return c(this,void 0,void 0,(function*(){return!this.isFirefox()||parseInt((yield browser.runtime.getBrowserInfo()).version.split(".")[0],10)>=87}))}authenticateBiometric(){return Promise.resolve(!1)}sidebarViewName(){return window.chrome.sidebarAction&&this.isFirefox()?"sidebar":this.isOpera()&&"undefined"!=typeof opr&&opr.sidebarAction?"sidebar_panel":null}supportsSecureStorage(){return!1}getDefaultSystemTheme(){return Promise.resolve(this.prefersColorSchemeDark.matches?"dark":"light")}onDefaultSystemThemeChange(e){this.prefersColorSchemeDark.addListener(({matches:t})=>{e(t?"dark":"light")})}clearClipboard(e,t=null){null!=this.clearClipboardTimeout&&(clearTimeout(this.clearClipboardTimeout),this.clearClipboardTimeout=null),o.a.isNullOrWhitespace(e)||this.storageService.get(r.a.clearClipboardKey).then(i=>{console.warn("clearSeconds",i),null==i&&(i=5),null==t&&(t=1e3*i),this.clearClipboardTimeoutFunction=()=>c(this,void 0,void 0,(function*(){console.log("clearClipboardTimeoutFunction");const t=yield this.platformUtilsService.readFromClipboard();e===t&&(console.log("clipboardValue === clipboardValueNow",e),this.platformUtilsService.copyToClipboard("",{clearing:!0}))})),this.clearClipboardTimeout=setTimeout(()=>c(this,void 0,void 0,(function*(){yield this.clearPendingClipboard()})),t)})}clearPendingClipboard(){return c(this,void 0,void 0,(function*(){null!=this.clearClipboardTimeoutFunction&&(yield this.clearClipboardTimeoutFunction(),this.clearClipboardTimeoutFunction=null)}))}}}).call(this,i(103))},833:function(e){e.exports=JSON.parse('{"name":"bitwarden","productName":"Bitwarden","description":"A secure and free password manager for all of your devices.","version":"2.0.3","author":"Bitwarden Inc. <hello@bitwarden.com> (https://bitwarden.com)","homepage":"https://bitwarden.com","license":"GPL-3.0","main":"main.js","repository":{"type":"git","url":"https://github.com/bitwarden/desktop"},"dependencies":{"@nodert-win10-rs4/windows.security.credentials.ui":"^0.4.4","big-integer":"1.6.48","browser-hrtime":"^1.1.8","electron-log":"4.3.5","electron-store":"8.0.0","electron-updater":"4.3.9","forcefocus":"^1.1.0","keytar":"7.6.0","node-ipc":"^9.1.4","regedit":"^3.0.3","zxcvbn":"4.4.2"}}')},834:function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return r}));var n=i(20),s=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class r{constructor(e){this.apiService=e}upload(t,i,r){return s(this,void 0,void 0,(function*(){const s=new FormData;try{const e=new Blob([i.buffer],{type:"application/octet-stream"});s.append("data",e,t)}catch(r){if(!n.a.isNode||n.a.isBrowser)throw r;s.append("data",e.from(i.buffer),{filepath:t,contentType:"application/octet-stream"})}yield r(s)}))}}}).call(this,i(98).Buffer)},836:function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return p}));var n=i(249),s=i(837),r=i(112),o=i(463),c=i(452),a=i(453),l=i(88),d=i(20),u=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function o(e){try{a(n.next(e))}catch(e){r(e)}}function c(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const h="sends_";class p{constructor(e,t,i,n,s,r,o){this.cryptoService=e,this.userService=t,this.apiService=i,this.fileUploadService=n,this.storageService=s,this.i18nService=r,this.cryptoFunctionService=o}clearCache(){this.decryptedSendCache=null}encrypt(e,t,i,n){return u(this,void 0,void 0,(function*(){let s=null;const r=new o.a;if(r.id=e.id,r.type=e.type,r.disabled=e.disabled,r.hideEmail=e.hideEmail,r.maxAccessCount=e.maxAccessCount,null==e.key&&(e.key=yield this.cryptoFunctionService.randomBytes(16),e.cryptoKey=yield this.cryptoService.makeSendKey(e.key)),null!=i){const t=yield this.cryptoFunctionService.pbkdf2(i,e.key,"sha256",1e5);r.password=d.a.fromBufferToB64(t)}if(r.key=yield this.cryptoService.encrypt(e.key,n),r.name=yield this.cryptoService.encrypt(e.name,e.cryptoKey),r.notes=yield this.cryptoService.encrypt(e.notes,e.cryptoKey),r.type===l.a.Text)r.text=new a.a,r.text.text=yield this.cryptoService.encrypt(e.text.text,e.cryptoKey),r.text.hidden=e.text.hidden;else if(r.type===l.a.File&&(r.file=new c.a,null!=t))if(t instanceof ArrayBuffer){const[i,n]=yield this.encryptFileData(e.file.fileName,t,e.cryptoKey);r.file.fileName=i,s=n}else s=yield this.parseFile(r,t,e.cryptoKey);return[r,s]}))}get(e){return u(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(h+t);return null!=i&&i.hasOwnProperty(e)?new o.a(i[e]):null}))}getAll(){return u(this,void 0,void 0,(function*(){const e=yield this.userService.getUserId(),t=yield this.storageService.get(h+e),i=[];for(const e in t)t.hasOwnProperty(e)&&i.push(new o.a(t[e]));return i}))}getAllDecrypted(){return u(this,void 0,void 0,(function*(){if(null!=this.decryptedSendCache)return this.decryptedSendCache;if(!(yield this.cryptoService.hasKey()))throw new Error("No key.");const e=[],t=[];return(yield this.getAll()).forEach(i=>{t.push(i.decrypt().then(t=>e.push(t)))}),yield Promise.all(t),e.sort(d.a.getSortFunction(this.i18nService,"name")),this.decryptedSendCache=e,this.decryptedSendCache}))}saveWithServer(e){var t;return u(this,void 0,void 0,(function*(){const i=new s.a(e[0],null===(t=e[1])||void 0===t?void 0:t.buffer.byteLength);let o;if(null==e[0].id){if(e[0].type===l.a.Text)o=yield this.apiService.postSend(i);else try{const t=yield this.apiService.postFileTypeSend(i);o=t.sendResponse,yield this.fileUploadService.uploadSendFile(t,e[0].file.fileName,e[1])}catch(t){if(!(t instanceof r.a&&404===t.statusCode))throw t instanceof r.a?new Error(t.getSingleMessage()):t;o=yield this.legacyServerSendFileUpload(e,i)}e[0].id=o.id,e[0].accessId=o.accessId}else o=yield this.apiService.putSend(e[0].id,i);const c=yield this.userService.getUserId(),a=new n.a(o,c);yield this.upsert(a)}))}legacyServerSendFileUpload(t,i){return u(this,void 0,void 0,(function*(){const n=new FormData;try{const e=new Blob([t[1].buffer],{type:"application/octet-stream"});n.append("model",JSON.stringify(i)),n.append("data",e,t[0].file.fileName.encryptedString)}catch(s){if(!d.a.isNode||d.a.isBrowser)throw s;n.append("model",JSON.stringify(i)),n.append("data",e.from(t[1].buffer),{filepath:t[0].file.fileName.encryptedString,contentType:"application/octet-stream"})}return yield this.apiService.postSendFileLegacy(n)}))}upsert(e){return u(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();let i=yield this.storageService.get(h+t);if(null==i&&(i={}),e instanceof n.a){const t=e;i[t.id]=t}else e.forEach(e=>{i[e.id]=e});yield this.storageService.save(h+t,i),this.decryptedSendCache=null}))}replace(e){return u(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId();yield this.storageService.save(h+t,e),this.decryptedSendCache=null}))}clear(e){return u(this,void 0,void 0,(function*(){yield this.storageService.remove(h+e),this.decryptedSendCache=null}))}delete(e){return u(this,void 0,void 0,(function*(){const t=yield this.userService.getUserId(),i=yield this.storageService.get(h+t);if(null!=i){if("string"==typeof e){if(null==i[e])return;delete i[e]}else e.forEach(e=>{delete i[e]});yield this.storageService.save(h+t,i),this.decryptedSendCache=null}}))}deleteWithServer(e){return u(this,void 0,void 0,(function*(){yield this.apiService.deleteSend(e),yield this.delete(e)}))}removePasswordWithServer(e){return u(this,void 0,void 0,(function*(){const t=yield this.apiService.putSendRemovePassword(e),i=yield this.userService.getUserId(),s=new n.a(t,i);yield this.upsert(s)}))}parseFile(e,t,i){return new Promise((n,s)=>{const r=new FileReader;r.readAsArrayBuffer(t),r.onload=r=>u(this,void 0,void 0,(function*(){try{const[s,o]=yield this.encryptFileData(t.name,r.target.result,i);e.file.fileName=s,n(o)}catch(e){s(e)}})),r.onerror=e=>{s("Error reading file.")}})}encryptFileData(e,t,i){return u(this,void 0,void 0,(function*(){return[yield this.cryptoService.encrypt(e,i),yield this.cryptoService.encryptToBytes(t,i)]}))}}}).call(this,i(98).Buffer)},837:function(e,t,i){"use strict";i.d(t,"a",(function(){return o}));var n=i(88),s=i(290),r=i(291);class o{constructor(e,t){switch(this.type=e.type,this.fileLength=t,this.name=e.name?e.name.encryptedString:null,this.notes=e.notes?e.notes.encryptedString:null,this.maxAccessCount=e.maxAccessCount,this.expirationDate=null!=e.expirationDate?e.expirationDate.toISOString():null,this.deletionDate=null!=e.deletionDate?e.deletionDate.toISOString():null,this.key=null!=e.key?e.key.encryptedString:null,this.password=e.password,this.disabled=e.disabled,this.hideEmail=e.hideEmail,this.type){case n.a.Text:this.text=new r.a,this.text.text=null!=e.text.text?e.text.text.encryptedString:null,this.text.hidden=e.text.hidden;break;case n.a.File:this.file=new s.a,this.file.fileName=null!=e.file.fileName?e.file.fileName.encryptedString:null}}}},85:function(e,t,i){"use strict";i.d(t,"a",(function(){return l}));var n=i(96),s=i(15),r=i(67),o=i(99),c=i(107),a=i(78);class l{constructor(e){this.id=null,this.organizationId=null,this.folderId=null,this.name=null,this.notes=null,this.type=null,this.favorite=!1,this.organizationUseTotp=!1,this.edit=!1,this.viewPassword=!0,this.login=new c.a,this.identity=new o.a,this.card=new r.a,this.secureNote=new a.a,this.attachments=null,this.fields=null,this.passwordHistory=null,this.collectionIds=null,this.revisionDate=null,this.deletedDate=null,this.reprompt=n.a.None,e&&(this.id=e.id,this.organizationId=e.organizationId,this.folderId=e.folderId,this.favorite=e.favorite,this.organizationUseTotp=e.organizationUseTotp,this.edit=e.edit,this.viewPassword=e.viewPassword,this.type=e.type,this.localData=e.localData,this.collectionIds=e.collectionIds,this.revisionDate=e.revisionDate,this.deletedDate=e.deletedDate,this.reprompt=e.reprompt)}get subTitle(){switch(this.type){case s.a.Login:return this.login.subTitle;case s.a.SecureNote:return this.secureNote.subTitle;case s.a.Card:return this.card.subTitle;case s.a.Identity:return this.identity.subTitle}return null}get hasPasswordHistory(){return this.passwordHistory&&this.passwordHistory.length>0}get hasAttachments(){return this.attachments&&this.attachments.length>0}get hasOldAttachments(){if(this.hasAttachments)for(let e=0;e<this.attachments.length;e++)if(null==this.attachments[e].key)return!0;return!1}get hasFields(){return this.fields&&this.fields.length>0}get passwordRevisionDisplayDate(){return this.type!==s.a.Login||null==this.login||null==this.login.password||""===this.login.password?null:this.login.passwordRevisionDate}get isDeleted(){return null!=this.deletedDate}}},88:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.Text=0]="Text",e[e.File=1]="File"}(n||(n={}))},888:function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(147);class s extends n.a{constructor(e){super(e),this.id=e.id}}class r{constructor(e,t){null!=e&&(this.ciphers=[],e.forEach(e=>{this.ciphers.push(new s(e))})),this.collectionIds=t}}},916:function(e,t,i){"use strict";i.r(t)},92:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.Domain=0]="Domain",e[e.Host=1]="Host",e[e.StartsWith=2]="StartsWith",e[e.Exact=3]="Exact",e[e.RegularExpression=4]="RegularExpression",e[e.Never=5]="Never"}(n||(n={}))},96:function(e,t,i){"use strict";var n;i.d(t,"a",(function(){return n})),function(e){e[e.None=0]="None",e[e.Password=1]="Password"}(n||(n={}))},99:function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(20);class s{constructor(e){this.title=null,this.middleName=null,this.address1=null,this.address2=null,this.address3=null,this.city=null,this.state=null,this.postalCode=null,this.country=null,this.company=null,this.email=null,this.phone=null,this.ssn=null,this.username=null,this.passportNumber=null,this.licenseNumber=null,this._firstName=null,this._lastName=null,this._subTitle=null}get firstName(){return this._firstName}set firstName(e){this._firstName=e,this._subTitle=null}get lastName(){return this._lastName}set lastName(e){this._lastName=e,this._subTitle=null}get subTitle(){return null!=this._subTitle||null==this.firstName&&null==this.lastName||(this._subTitle="",null!=this.firstName&&(this._subTitle=this.firstName),null!=this.lastName&&(""!==this._subTitle&&(this._subTitle+=" "),this._subTitle+=this.lastName)),this._subTitle}get fullName(){if(null!=this.title||null!=this.firstName||null!=this.middleName||null!=this.lastName){let e="";return null!=this.title&&(e+=this.title+" "),null!=this.firstName&&(e+=this.firstName+" "),null!=this.middleName&&(e+=this.middleName+" "),null!=this.lastName&&(e+=this.lastName),e.trim()}return null}get fullAddress(){let e=this.address1;return n.a.isNullOrWhitespace(this.address2)||(n.a.isNullOrWhitespace(e)||(e+=", "),e+=this.address2),n.a.isNullOrWhitespace(this.address3)||(n.a.isNullOrWhitespace(e)||(e+=", "),e+=this.address3),e}get fullAddressPart2(){if(null==this.city&&null==this.state&&null==this.postalCode)return null;const e=this.city||"-",t=this.state,i=this.postalCode||"-";let s=e;return n.a.isNullOrWhitespace(t)||(s+=", "+t),s+=", "+i,s}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,